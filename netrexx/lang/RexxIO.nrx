/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* netrexx.lang.RexxIO -- I/O utilities for NetRexx                   */
/* ------------------------------------------------------------------ */
/* Copyright IBM Corporation, 1996, 1997.  All Rights Reserved.       */
/* Author    Mike Cowlishaw                                           */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 96.04.03 Ask method (read a line)                                  */
/* 96.07.07 Say method (write a line or partial line)                 */
/* 97.02.01 Make I/O streams externally accessible [for IFB]          */
/*          [this may be a security exposure, removed for 1.1]        */
/* 97.06.28 Upgrade for 1.1 NLS                                       */
/* 98.08.30 Use PrintWriter for output                                */
/* ------------------------------------------------------------------ */

package netrexx.lang
options binary strictargs nodecimal noformat

/**
   This defines the I/O utility class for NetRexx.
 */

class RexxIO

  /* ----- Constants ----- */
  properties private static
    StdIn =BufferedReader(InputStreamReader(System.in))
    StdOut=PrintWriter(System.out)

  /** Function to return a line read from the standard input stream.
     If the stream is closed or otherwise unavailable, null is returned.
   */
  method Ask() static returns Rexx
    do
      line=StdIn.readLine()
      if line=null then return Rexx null
    catch IOException
      return null
    end
    return Rexx(line)

  /** Function to return a character read from the standard input stream.
     If the stream is closed or otherwise unavailable, null is returned.
     [This still seems to require that Enter be pressed, in 1.1.1]
      */
  method AskOne() static returns Rexx
    do
      one=char(StdIn.read())
    catch IOException
      return null
    end
    return Rexx(one)

  /** Function to write a line to the standard output stream.
     Arg1 is the Object or Rexx string to be written.
     If the line ends in the NUL character ('\-' or '\0') then no
       line termination is provided (and the NUL is deleted).
     If the write succeeds 0 is returned, otherwise 1 is returned.

     We handle all the well-known character forms directly to
       minimize code generation in caller; null is allowed for all
       objects.
     We also handle Object here, so null can be processed efficiently.
     We provide versions for all the other primitives, too.
      */
  method Say(obj=Object) static returns boolean
    if obj=null then return Say(char[] null)
    return Say(obj.toString().toCharArray())

  method Say(str=String) static returns boolean
    if str=null then return Say(char[] null)
    return Say(str.toCharArray())

  method Say(line=Rexx) static returns boolean
    return Say(Rexx.toCharArray(line))       -- null passes through

  method Say(c=char) static returns boolean
    ca=char[1]; ca[0]=c
    return Say(ca)

  -- numeric primitives
  method Say(n=long) static returns boolean  -- handles byte, short, int
    return Say(Long.toString(n).toCharArray())
  method Say(f=float)   static returns boolean; return Say(Rexx(f))
  method Say(d=double)  static returns boolean; return Say(Rexx(d))
  method Say(b=boolean) static returns boolean; return Say(Rexx(b))

  method Say(aline=char[]) static returns boolean
    if aline=null then StdOut.println()      -- just new line
     else do                                 -- have some data
      select
        when aline.length=0 then StdOut.println()
        when aline[aline.length-1]\=='\-' then StdOut.println(aline)
        otherwise                            -- rarer continuation case
          bline=char[aline.length-1]
          System.arraycopy(aline, 0, bline, 0, bline.length)
          StdOut.print(bline)
        end
      end
    StdOut.flush()  -- could be a real user out there
    return 0

