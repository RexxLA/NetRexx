/* sample_sem.nrx
   some sample code for sysutils semaphore methods
   try it by executing 'nrc -run sample_sem'
*/


class sample_sem

 properties public
   sys = sysutils
   h1
   h2

 method sample_sem
    sys = sysutils()
    sample_sem.Thread1()
    sys.SysSleep(2)
    sample_sem.Thread2()
    sys.SysSleep(2)
    sample_sem.Thread3()


 method main(s=String[]) static
   sample_sem()



 class sample_sem.Thread1 dependent extends Thread


  method Thread1
    this.start

  method run
    say "Thread1 CreateEventSem H1"
    h1 = parent.sys.SysCreateEventSem("H1")
    say h1
    say "Thread1 CreateEventSem H2"
    h2 = parent.sys.SysCreateEventSem("H2")
    say h2
    say "Thread1 CreateEventSem H2"
    do
       Loop i = 1 to 3
         i = i
         say "Thread1 ..ZZ..."
         parent.sys.SysSleep(5)
         say "Thread1 Releasing  EventSem H1"
         parent.sys.SysReleaseEventSem(h1)
         say "Thread1 Releasing  EventSem H2"
         parent.sys.SysReleaseEventSem(h2)
       End
       say "Thread1 close H1"
       say parent.sys.SysCloseEventSem(h1)
       say "Thread1 close H2"
       say parent.sys.SysCloseEventSem(h2)

       say "Thread1 CreateMutexSem H1"
       h1 = parent.sys.SysCreateMutexSem("H1")
       say h1

       Loop i = 1 to 3
         i = i
         say "Thread1 Request    MutexSem H1"
         rc =  parent.sys.SysRequestMutexSem(h1, 30000)
         say "Thread1 Requested  MutexSem H1 " rc
         say "Thread1 ..ZZ..."
         parent.sys.SysSleep(5)
         say "Thread1 Releasing  MutexSem H1"
         rc = parent.sys.SysReleaseMutexSem(h1)
         say "Thread1 ..ZZ... " rc
         parent.sys.SysSleep(5)

       End
       say "Thread1 close H1"
       say parent.sys.SysCloseMutexSem(h1)


    catch InterruptedException
       return
    end

 class sample_sem.Thread2 dependent extends Thread


  method Thread2
    this.start

  method run
    say "Thread2 OpenEventSem H1"
    h1 = parent.sys.SysOpenEventSem("H1")
    say "Thread2 OpenEventSem H2"
    h2 = parent.sys.SysOpenEventSem("H2")
    say "Thread2 OpenEventSem XX"
    say parent.sys.SysOpenEventSem("xx")
    say h1
    say h2
    do
       Loop i = 1 to 3
          i = i
          say "Thread2 Requesting EventSem XX"
          say parent.sys.SysRequestEventSem("xx")
          say "Thread2 Requesting EventSem H1"
          parent.sys.SysRequestEventSem(h1)
          say "Thread2 Requested  EventSem H1"
          parent.sys.SysSleep(2)
          say "Thread2 Requesting EventSem H2"
          parent.sys.SysRequestEventSem(h2)
          say "Thread2 Requested  EventSem H2"
       End

       say "Thread2 OpenMutexSem H1"
       h1 = parent.sys.SysOpenMutexSem("H1")
       say h1

       Loop i = 1 to 3
         i = i
         say "Thread2 Requesting MutexSem H1"
         rc = parent.sys.SysRequestMutexSem(h1, 30000)
         say "Thread2 Requested  MutexSem H1 " rc
         say "Thread2 ..ZZ..."
         parent.sys.SysSleep(5)
         say "Thread2 Releasing  MutexSem H1"
         rc = parent.sys.SysReleaseMutexSem(h1)
         say "Thread2 ..ZZ... " rc
         parent.sys.SysSleep(5)
       end

    catch InterruptedException
       return
    end

 class sample_sem.Thread3 dependent extends Thread


  method Thread3
    this.start

  method run
    say "Thread3 OpenEventSem H1"
    h1 = parent.sys.SysOpenEventSem("H1")
    say "Thread3 OpenEventSem H2"
    h2 = parent.sys.SysOpenEventSem("H2")
    say h1
    say h2
    do
       Loop i = 1 to 3
          i = i
          say "Thread3 Requesting EventSem H1"
          parent.sys.SysRequestEventSem(h1)
          say "Thread3 Requested  EventSem H1"
          parent.sys.SysSleep(2)
          say "Thread3 Requesting EventSem H2"
          parent.sys.SysRequestEventSem(h2)
          say "Thread3 Requested  EventSem H2"

       End

       say "Thread3 OpenMutexSem H1"
       h1 = parent.sys.SysOpenMutexSem("H1")
       say h1
       Loop i = 1 to 3
         i = i
         say "Thread3 Requesting MutexSem H1"
         rc = parent.sys.SysRequestMutexSem(h1, 30000)
         say "Thread3 Requested  MutexSem H1 " rc
         say "Thread3 ..ZZ..."
         parent.sys.SysSleep(5)
         say "Thread3 Releasing  MutexSem H1"
         rc = parent.sys.SysReleaseMutexSem(h1)
         say "Thread3 ..ZZ... " rc
         parent.sys.SysSleep(5)

       End

    catch InterruptedException
       return
    end

