filetype: netrexx

detect:
    filename: "(\\.nrx$|\\.njp$)"

rules:

    # operators - eleven basic symbols but multiple combinations.
    - symbol.operator: ([+*|=\\%]|<|>|/|-|&)
    - symbol.brackets: "[(){}]|\\[|\\]"
    # other symbols
    - symbol: ([.:;,])

    # boolean - NetRexx uses 1 and 0; 'true' and 'false' can be defined by variables though.

    # numbers
    - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"

    # binary
    - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"

    # hex
    - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
    - constant.specialChar: "\\b(([0-9])+([xX])+([A-Fa-f0-9]+))\\b"

    # escape sequences - NetRexx does not had \b; added \0 for null
    - constant.specialChar: "\\\\([tnrf]|'|\\\"|\\\\|\0)"

    # unicode
    - constant.specialChar: "\\\\u[A-Fa-f0-9]{4}"

    # strings using double quote character
    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            # highlight numbers inside string
            - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"
            # highlight binary number inside string
            - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"
            # highlight hex number inside string
            - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
            - constant.specialChar: "\\b(([0-9])+([xX])+([A-Fa-f0-9]+))\\b"
            # highlight unicode number inside string
            - constant.specialChar: "\\\\u[A-Fa-f0-9]{4}"
            - constant.specialChar: "\\\\."

    #  strings using single quote character
    - constant.string:
        start: "'"
        end: "'"
        skip: "\\\\."
        rules:
            # highlight numbers inside string
            - constant.number: "\\b[+-]?([0-9]+(\\.[0-9]+)?|\\.[0-9]+|\\.)([eE][+-]?[0-9]+)?[i]?\\b"
            # highlight binary number inside string
            - constant.specialChar: "\\b(([0-9])+([bB])+([0-1]+))\\b"
            # highlight hex number inside string
            - constant.specialChar: "\\\\x[A-Fa-f0-9]{2}"
            - constant.specialChar: "\\b(([0-9])+([xX])+([A-Fa-f0-9]+))\\b"
            # highlight unicode number inside string
            - constant.specialChar: "\\\\u[A-Fa-f0-9]{4}"
            - constant.specialChar: "\\\\."

    # keywords related to program flow
    - special: "\\b(exit|iterate|leave|return|signal)\\b"

    # keywords that appear before first class or statement
    - statement: "(?i)\\b(import|options|package)\\b"

    # option parameters
    - statement.parameter: "(?i)\\b(binary|nobinary)\\b"
    - statement.parameter: "(?i)\\b(comments|nocomments)\\b"
    - statement.parameter: "(?i)\\b(compact|nocompact)\\b"
    - statement.parameter: "(?i)\\b(console|noconsole)\\b"
    - statement.parameter: "(?i)\\b(crossref|nocrossref)\\b"
    - statement.parameter: "(?i)\\b(decimal|nodecimal)\\b"
    - statement.parameter: "(?i)\\b(diag|nodiag)\\b"
    - statement.parameter: "(?i)\\b(explicit|noexplicit)\\b"
    - statement.parameter: "(?i)\\b(format|noformat)\\b"
    - statement.parameter: "(?i)\\b(java|nojava)\\b"
    - statement.parameter: "(?i)\\b(logo|nologo)\\b"
    - statement.parameter: "(?i)\\b(replace|noreplace)\\b"
    - statement.parameter: "(?i)\\b(savelog|nosavelog)\\b"
    - statement.parameter: "(?i)\\b(sourcedir|nosourcedir)\\b"
    - statement.parameter: "(?i)\\b(strictargs|nostrictargs)\\b"
    - statement.parameter: "(?i)\\b(strictassign|nostrictassign)\\b"
    - statement.parameter: "(?i)\\b(strictcase|nostrictcase)\\b"
    - statement.parameter: "(?i)\\b(strictimport|nostrictimport)\\b"
    - statement.parameter: "(?i)\\b(strictprops|nostrictprops)\\b"
    - statement.parameter: "(?i)\\b(strictsignal|nostrictsignal)\\b"
    - statement.parameter: "(?i)\\b(symbols|nosymbols)\\b"
    - statement.parameter: "(?i)\\b(trace0|trace1|trace2|notrace)\\b"
    - statement.parameter: "(?i)\\b(utf8|noutf8)\\b"
    - statement.parameter: "(?i)\\b(verbose|verbose0)\\b"
    - statement.parameter: "(?i)\\b(verbose1|verbose2)\\b"
    - statement.parameter: "(?i)\\b(verbose3|verbose4|verbose5)\\b"
    - statement.parameter: "(?i)\\b(verbose5|noverbose)\\b"

    # give color to class names; later reset class to default statement color
    - blue: "class +[A-Za-z0-9]+ *((implements|extends) +[A-Za-z0-9.]+)?"

    # properties
    - statement.properties: "(?i)\\b(properties)\\b"

    # visibility
    -  statement.access: "(?i)\\b(constant|indirect|inheritable|private|public|shared|static)\\b"

    # give color to method names; later reset method to default statement color
    - blue: "method +[A-Za-z0-9]+"

    # builtin-functions
    - brightgreen: "(?i)\\b(abbrev|abs|b2d|b2x|c2d|c2x|center|centre)\\b"
    - brightgreen: "(?i)\\b(changestr|compare|copies|copyindexed)\\b"
    - brightgreen: "(?i)\\b(countstr|d2b|d2c|d2x|datatype|delstr)\\b"
    - brightgreen: "(?i)\\b(delword|exists|format|insert|lastpos|left)\\b"
    - brightgreen: "(?i)\\b(length|lower|max|min|overlay|pos)\\b"
    - brightgreen: "(?i)\\b(reverse|right|sequence|sign|space|strip)\\b"
    - brightgreen: "(?i)\\b(substr|subword|translate|trunc|upper)\\b"
    - brightgreen: "(?i)\\b(verify|word|wordindex|wordlength)\\b"
    - brightgreen: "(?i)\\b(wordpos|words|x2b|x2c|x2d)\\b"

    # Rexx arithmetic methods
    - statement: "(?i)\\b(OpAdd|OpAnd|OpCc|OpCcblank|OpDiv|OpDivI)\\b"
    - statement: "(?i)\\b(OpEq|OpEqS|OpGt|OpGtEq|OpGtEqS|OpGtS|OpLt)\\b"
    - statement: "(?i)\\b(OpLtEq|OpLtEqS|OpLtS|OpMinus|OpMult|OpNot|OpNotEq)\\b"
    - statement: "(?i)\\b(OpNotEqS|OpOr|OpPlus|OpPow|OpRem|OpSub|OpXor)\\b"

    # Rexx miscellaneous methods
    - statement: "(?i)\\b(charAt|equals|hashCode|toboolean|tobyte)\\b"
    - statement: "(?i)\\b(toByteArray|tochar|toCharArray|todouble|tofloat)\\b"
    - statement: "(?i)\\b(toint|tolong|toRexx|toshort|toString)\\b"

    # RexxIO
    - statement: "(?i)\\b(RexxIO|Ask|AskOne|Say|File|forEachline)\\b"
    - statement: "(?i)\\b(popOutputStream|pushOutputStream|setOutputStream)\\b"

    # RexxSet digits|form
    - statement: "(?i)\\b(RexxSet|formword|setDigits|setForm)\\b"
    - statement: "(?i)\\b(DEFAULT_DIGITS|DEFAULT_FORM||ENGINEERING|SCIENTIFIC)\\b"

    # Exceptions
    - blue: "(?i)\\b(BadArgumentException|BadColumnException)\\b"
    - blue: "(?i)\\b(BadNumericException|DivideException)\\b"
    - blue: "(?i)\\b(ExponentOverflowException|NoOtherwiseException)\\b"
    - blue: "(?i)\\b(NotCharacterException|NotLogicException)\\b"

    # modifiers
    - statement.class: "(?i)\\b(abstract|adapter|binary|dependent)\\b"
    - statement.class: "(?i)\\b(deprecated|extends|final|implements|interface)\\b"
    - statement.class: "(?i)\\b(native|protect|returns|signals|transient)\\b"
    - statement.class: "(?i)\\b(unused|uses|volatile)\\b"

    # data types
    - special: "(?i)\\b(boolean|byte|char|double|float)\\b"
    - special: "(?i)\\b(int|long|short|Rexx|String|void)\\b"

    # special names
    - special: "(?i)\\b(ask|digits|form|length|null|parent|source)\\b"
    - special: "(?i)\\b(sourceline|super|this|trace|version)\\b"

    # keywords
    # re-color class/method from above
    - statement: "(?i)\\b(class|method|do|if|loop|nop|numeric)\\b"
    - statement: "(?i)\\b(parse|properties|say|select)\\b"
    - statement: "(?i)\\b(catch|else|end|finally|otherwise|then|when)\\b"

    # sub-keywords
    - statement: "(?i)\\b(all|by|case|engineering|for|forever)\\b"
    - statement: "(?i)\\b(label|methods|off|over|results|scientific)\\b"
    - statement: "(?i)\\b(to|until|var|while)\\b"

    # pipe
    - statement: "(?i)\\b(pipe)\\b"

    # pipe stages
    - brightgreen: "(?i)\\b(_rexx|_string|_vector|abbrev|abbrevi|abbrevia)\\b"
    - brightgreen: "(?i)\\b(abbreviat|abbreviati|abbreviatio|abbreviation)\\b"
    - brightgreen: "(?i)\\b(aggrc|append|array|arraya|arrayr|arrayw|between)\\b"
    - brightgreen: "(?i)\\b(buffer|casei|change|chop|cmd|command|comment)\\b"
    - brightgreen: "(?i)\\b(compare|cons|conso|consol|console|copy|count|dam)\\b"
    - brightgreen: "(?i)\\b(deal|deblock|dict|dicta|dictr|dictw|disk|diska)\\b"
    - brightgreen: "(?i)\\b(diskr|diskslow|diskw|drop|dup|dupl|dupli|duplic)\\b"
    - brightgreen: "(?i)\\b(duplica|duplicat|duplicate|elastic|fanin)\\b"
    - brightgreen: "(?i)\\b(faninany|fanout|fblock|file|filea|filer|fileslow)\\b"
    - brightgreen: "(?i)\\b(filew|find|frlabel|fromlabel|fromtarget|frtarget)\\b"
    - brightgreen: "(?i)\\b(gate|gen|get|getf|getfi|getfil|getfile|getfiles)\\b"
    - brightgreen: "(?i)\\b(getovers|getstems|hash|hasha|hashr|hashw|hole)\\b"
    - brightgreen: "(?i)\\b(hostbyaddr|hostbyname|hostid|hostname|insert)\\b"
    - brightgreen: "(?i)\\b(inside|join|joincont|juxtapose|listzip|literal)\\b"
    - brightgreen: "(?i)\\b(locate|lookup|nfind|ninside|nlocate|noeofback)\\b"
    - brightgreen: "(?i)\\b(nop|not|notfind|notinside|notlocate|outside|over)\\b"
    - brightgreen: "(?i)\\b(overl|overla|overlay|pad|pick|prefix|ptimer)\\b"
    - brightgreen: "(?i)\\b(qsort|query|random|reverse|serialize|sort)\\b"
    - brightgreen: "(?i)\\b(sortClass|sortRexx|space|spec|specs|split)\\b"
    - brightgreen: "(?i)\\b(sqlselect|stem|stema|stemr|stemw|strfind)\\b"
    - brightgreen: "(?i)\\b(strfrlab|strfrlabe|strfrlabel|strfromlabel)\\b"
    - brightgreen: "(?i)\\b(strlit|strlite|strliter|strlitera|strliteral)\\b"
    - brightgreen: "(?i)\\b(strnfind|strtolab|strtolabe|strtolabel|take)\\b"
    - brightgreen: "(?i)\\b(tcpclient|tcpdata|tcplisten|term|termi|termin)\\b"
    - brightgreen: "(?i)\\b(termina|terminal|timestamp|tokenise|tokenize)\\b"
    - brightgreen: "(?i)\\b(tolabel|totarget|trans|transl|transla|translat)\\b"
    - brightgreen: "(?i)\\b(translate|truncate|unique|unzip|var|varover)\\b"
    - brightgreen: "(?i)\\b(vector|vectora|vectorr|vectorw|xlate|zip|zone)\\b"

    # annotations - LEAVE HERE to avoid clashing with KEYWORDS above
    - magenta: "@[A-Za-z]+"

    # Block Comment
    - cyan:
        start: "/\\*"
        end: "\\*/"
        rules:
            - todo: "(TODO|XXX|FIXME):?"

    # Doc Comment
    - cyan:
        start: "/\\*\\*"
        end: "\\*/"
        rules:
            - todo: "(TODO|XXX|FIXME):?"

    # Line Comment
    - cyan:
        start: "--"
        end: "$"
        rules:
            - todo: "(TODO|XXX|FIXME):?"

    # Todo
    - todo: "(TODO|XXX|FIXME):?"

