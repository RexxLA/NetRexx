/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 1997.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* DiagConcat                                                         */
/*                                                                    */
/*   An object that tests concatenation                               */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.06.23 Initial                                                 */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.diag
options binary

class DiagConcat

 /* Construct a set of tests; raise DiagX exception if error */
 method DiagConcat

  /*-- C O N C A T E N A T I O N ---------------------------------------*/
  ok='OK'
  if 5  1 =='5 1' then ok=ok '!' '<blank>'
                  else signal DiagX('<blank> operator')
  if 6||2 =='62'-
   & 'xxx'||'2' =='xxx2' then ok=ok '!' '||'
                         else signal DiagX('|| operator')
  if 'X'123.4'y' =='X123.4y'-
   & 'x'Minx()'Y'=='xRiceY'
                  then ok=ok '!' '<abuttal>'
                  else signal DiagX('<abuttal> operator')
  if 'X'123.4/10'y' =='X12.34y' then ok=ok '!' '<compound>'
                  else signal DiagX('<compound Concat>')

  /* And here's a tricky one that failed before 0.80, with options binary */
  -- n=char '\n'
  crlf=Rexx 'xx'
  crlf='\n'||'\n'
  if crlf='20' then signal DiagX('<char-char Concat>')
               else ok=ok '!' '<char-char>'
  /*--------------------------------------------------------------------*/

  say 'DiagConcat:' ok
  return

 method minx returns rexx     -- a little case testing, too
  return 'Rice'

 /* Scaffolding for stand-alone test */
 method main(s=String[]) static
  say version '/' source -- say what level we are running under
  do
    DiagConcat()
  catch e=DiagX
    say 'Failed: "'e.getMessage'"'
  end
