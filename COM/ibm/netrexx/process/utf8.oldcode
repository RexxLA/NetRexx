
 /* toUTF8 -- return string from segment of byte array, UTF8-encoded
    Arg1 is byte array
    Arg2 is offset into array to start
    Arg3 is number of bytes to process
    returns String, of length <= len
    */
 -- This should be somewhere more public?
 method toUTF8(data=byte[], start=int, len=int) private returns String
  work=char[len]             -- result will be this or shorter
  j=0                        -- j -> output array
  last=start+len-1           -- last character of input string
  do label utfgood
    loop i=start to last       -- i -> input array
      c=char(data[i]&255)
      if c>'\x7F' then do      -- multibyte
        if c<'\xC0' then leave utfgood
        if c<='\xDF' then do   -- two-byte
          if i=last then leave utfgood
          c2=char(data[i+1]&255)
          if c2<'\x80' | c2>'\xBF' then leave utfgood
          c=char((int(c) &int('\x1F'))*64-
                +(int(c2)&int('\x3F')))
          i=i+1
          end
         else if c<='\xEF' then do -- three-byte
          if i+2>last then leave utfgood
          c2=char(data[i+1]&255); c3=char(data[i+2]&255)
          if c2<'\x80' | c2>'\xBF' then leave utfgood
          if c3<'\x80' | c3>'\xBF' then leave utfgood
          c=char((int(c) &int('\x1F'))*4096-
               + (int(c2)&int('\x3F'))*64-
               + (int(c3)&int('\x3F')))
          i=i+2
          end
         else leave utfgood
        end
      work[j]=c
      j=j+1
      end i
    return String(work, 0, j)
    end utfgood

  /* Here to report an error in UTF */
  -- if rxt.program.flag.diag then say '# UTFerror C:' Rexx(c).c2x
  pos=i-start+1
  tok=RxToken(';', sourcelines, pos, 1, null) -- pseudo-token
  /* Error handling will need a sourceline to display .. so make an
     ASCII one */
  sline=String(data, 0, start, len)
  inline[sourcelines-1]=sline
  signal RxQuit(rxt, tok, 'invalid.utf8.found', infile, sourcelines) -- terminal...
