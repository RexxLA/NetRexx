/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrNop                                                              */
/*                                                                    */
/*   An object that represents a parsed Nop clause                    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.05.29 Initial                                                 */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal

/**   An object that represents a parsed Nop clause                    */
class NrNop implements RxClauseParser
 properties private
  rxt    =RxTranslator                            -- root
  tokens =RxToken[]                               -- local reference

 /** Construct an object from the current clause */
 method NrNop(newrxt=RxTranslator)
  rxt    =newrxt
  tokens =rxt.program.parser.cursor.curclause.tokens

 /** Pass processing */
 method scan(pass=int)
  if pass<2 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrNop', pass)

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  if tokens[1].type=RxToken.END then rxt.program.streamer.out(';')
   else signal RxError(rxt, tokens[1], 'junk.on.end')
  return

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  return                                          -- I can do this.
