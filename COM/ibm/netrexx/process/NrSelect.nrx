/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrSelect                                                           */
/*                                                                    */
/*   An object that represents a parsed Select clause.                */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 1996.06.10 Initial                                                 */
/* 1997.11.06 Omit javalabel block if no block label                  */
/* 1998.12.21 Add CASE exprc processing                               */
/* 1999.09.11 Use switch{} if suitable                                */
/* 2000.02.11 Ensure case expression parsing is in scan, not generate */
/* 2000.02.18 Ensure casename is always set up in scan                */
/* 2000.03.07 Revise for interpretation                               */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal

/**   An object that represents a parsed Select clause.                */
class NrSelect extends NrBlock implements RxClauseParser uses RxCode, RxExpr
 properties  shared
  whens      =Vector(10)                -- WHEN clause list [RxClause]
  other      =RxClause                  -- OTHERWISE clause [null if none]
  casevarcode=RxCode null               -- CASE variable code [null if no CASE]
  streamer   =RxStreamer                -- for outing
  mayswitch  =boolean 0                 -- 1 if could perhaps generate SWITCH
  noswitch   =boolean 0                 -- 1 if a WHEN finds SWITCH impossible
  pendings   =Vector                    -- Pending collection, if mayswitch
  dupcheck   =Rexx '0'                  -- Duplicate WHEN code checker

 properties  private
  rxt        =RxTranslator              -- root
  parser     =RxParser                  -- local reference
  pcursor    =RxCursor                  -- local reference
  tokens     =RxToken[]                 -- local reference
  labelchunk =int                       -- insert point for label code
  caseexpr   =RxExpr null               -- CASE expression [null if none]

 /** Construct an object from the current clause */
 method NrSelect(newrxt=RxTranslator)
  super(newrxt)
  rxt        =newrxt                    -- the boss
  streamer   =rxt.program.streamer      -- our streamer
  parser     =rxt.program.parser        -- our parser
  pcursor    =parser.cursor             -- our parsing cursor
  tokens     =pcursor.curclause.tokens  -- local reference

 /** Pass processing */
 method scan(pass=int)
  if pass<2 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrSelect', pass)

  /* Apart from initialization, /*select*/ and error messages, this
     scanning is identical to NrDo.nrx -- could share code */

  -- Alter state before any potential error messages
  parser.pushlevel('SELECT')            -- new level
  parser.thislevel.selstate=NrLevel.SEL_WHENEXP

  /* Parse the keywords and their values */
  n=0
  loop label keywords forever
    n=n+1; tok=tokens[n]; tn=tok.type
    if tn=RxToken.END  then leave
    if tn=RxToken.SP   then iterate
    if tn<>RxToken.SYM then signal RxError(rxt, tok, 'select.keyword.expected')
    select
      when parser.iskey(tok.value, 'LABEL') then do
        if parser.thislevel.javalabel\=='' then
          signal RxError(rxt, tok, 'duplicate.keyword')
        n=n+1; tok=tokens[n]; tn=tok.type
        if tn<>RxToken.SP then signal RxError(rxt, tok, 'blank.expected')
        n=n+1; tok=tokens[n]; tn=tok.type
        if tn<>RxToken.SYM then signal RxError(rxt, tok, 'label.expected')
        parser.checkduplabel(tok.value, tok)
        parser.thislevel.blocklabel=tok.value
        -- make and save Java-safe label
        outlabel=Rexx tok.value
        if rxt.classer.javakey(outlabel) then outlabel='$'outlabel
        parser.thislevel.javalabel=outlabel
        end /* LABEL */
      when parser.iskey(tok.value, 'PROTECT') then do
        if super.protcode\=null then signal RxError(rxt, tok, 'duplicate.keyword')
        n=n+1; tok=tokens[n]; tn=tok.type
        if tn=RxToken.SP then do; n=n+1; tok=tokens[n]; tn=tok.type; end
        term=rxt.tparser.parseterm(pcursor, n, 1) -- is an RHS reference
        next=term.endoff+1
        if term.group=T_UNKNOWN then signal RxError(rxt, tokens[n], 'unknown.variable')
        if term.type.isprimitive then
          signal RxError(rxt, tok, 'cannot.protect.primitive',-
                         rxt.program.babel.typeString(term.type))
        if term.type.isnull then
          signal RxError(rxt, tok, 'cannot.protect.null')
        /* If a type then we have to handle it indirectly */
        /* [don't do this for now, as would need to catch ClassNotFoundException] */
        /* if term.group=S_TYPE then term.javacode='Class.forName("'term.type.classname'")' */
        if term.group=S_TYPE then signal RxError(rxt, tok, 'cannot.protect.type')
        parser.addexceptions(1, term.exceptions, tok, 1) -- to level above
        super.protcode=term             -- save in block
        pcursor.curclause.startprot=1   -- and add alert
        n=next-1 /* will bump */
        end

      when parser.iskey(tok.value, 'CASE') then do
        -- [duplicate not possible as we must be last on instruction]
        begin=n+1; tn=tokens[n].type
        if tn=RxToken.SP then begin=begin+1
        code=rxt.eparser.parseexpr(pcursor, 0, begin, null, null)
        caseexpr=RxExpr(rxt, pcursor, CASE_EXPR, code)

        -- if expression is simply a variable name, then we don't need a
        -- temporary variable (or, later, an assignment)
        if code.group=S_VAR then casevarcode=code -- use asis
         else do
          pcursor.curclass.uniques=pcursor.curclass.uniques+1
          name='$'pcursor.curclass.uniques
          casevarcode=RxCode(S_VAR, code.type, null)
          casevarcode.javacode=name
          end
        leave keywords             -- [no more possible]
        end

      otherwise
        signal RxError(rxt, tok, 'select.keyword.expected')
      end
    end keywords

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate

  /* If we are (or may be) tracing, then we need to wrap the target
     blocks, as the single-statement units may become doubles
     (traceclause instructions added) */
  maytrace=(pcursor.curmethod.methodmaxtrace\=RexxTrace.OFF)
  parser.thislevel.innerwraps=maytrace
  -- add "synchronized" start if needed [before Try]
  if super.protcode\=null then
    streamer.outpart('synchronized('super.protcode.javacode'){')
   else
    streamer.outpart('') -- place to hang trychunk
  parser.thislevel.trychunk=streamer.chunks  -- record where we might add "try"
  streamer.outpart('{')
  rxt.program.tracer.traceclause(pcursor.curclause) -- add trace code if needed
  -- [don't need to defer label for SELECT, but keeps code similar to DO/LOOP]
  labelchunk=streamer.chunks       -- record where we might add label
  streamer.outpart('/*select*/')   -- [need an out() for formatting]

  /* If CASE was specified, use the evaluated code and assign to a
     temporary variable if necessary.  Also determine if it's eligible
     for switch{} generation. */
  if caseexpr\=null then do label havecase
    -- if expression was simply a variable name, then we don't need an
    -- assignment
    code=caseexpr.code
    if code.group=S_VAR then casepart='' -- nothing needed here
     else casepart=code.type.toJava casevarcode.javacode'='code.javacode';'
    -- check eligibility for switch{} construct
    select
      when maytrace                then mayswitch=0
      when code.type=rxt.inttype   then mayswitch=1
      when code.type=rxt.chartype  then mayswitch=1
      when code.type=rxt.shorttype then mayswitch=1
      when code.type=rxt.bytetype  then mayswitch=1
      otherwise mayswitch=0
      end
    if mayswitch then do
      pendings=Vector(20)               -- will use
      this.Pending(streamer.chunks, casepart, 'switch('code.javacode'){')
      end
     else streamer.outpart(casepart)    -- switch not possible
    end havecase
  streamer.out('') -- [cosmetic]


 /** endinitial -- end the initial SELECT block, code generation */
 method endinitial
  thislevel=parser.thislevel
  if thislevel.selstate=NrLevel.SEL_ALLOK then /* no otherwise */ do
    if mayswitch then if \parser.thislevel.lastterm then
      this.Pending(streamer.chunks, '', 'break;')
    parser.indention=parser.indention-1
    if parser.thislevel.innerwraps then fin='}'; else fin=''
    streamer.out(fin)
    elcode='else{'
    if mayswitch then this.Pending(streamer.chunks, elcode, 'default:{')
                 else streamer.outpart(elcode)
    parser.indention=parser.indention+1
    streamer.outpart('throw new' NrBabel.rexxnootherclass'();', 1)
    thislevel.selstate=NrLevel.SEL_OTHER     -- as though had otherwise
    end

  -- ending is simply add final }s and end the Java DO, if needed
  if parser.thislevel.innerwraps then fin='}'.copies(whens.size)
                                 else fin='}'
  parser.indention=parser.indention-1
  streamer.out(fin, 1)

  -- +++ note .. there is no need for do...while if labeled switch;
  --     improve this later

  if mayswitch then this.Pending(streamer.chunks, '', '}')

  if parser.thislevel.javalabel\=='' then do      -- label, please
    -- add label starter to group begin
    streamer.outinsertpart(parser.thislevel.javalabel':do{', labelchunk)
    -- .. and add ending
    streamer.outpart('}while(false);')
    end
  parser.indention=parser.indention+1

  -- finally add the 'alternative' blocks if switch was a possibility
  if mayswitch then loop i=0 for pendings.size
    pend=Pending pendings.elementAt(i)
    pend.out(\noswitch)
    end i
  return

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  -- PROTECT is handled at the NrBlock level

  rxt.interpreter.pushlevel(cursor)     -- start the SELECT block

  -- If there's a CASE expression then evaluate it and save the result
  if caseexpr\=null then do
    ecode=caseexpr.evaluate(cursor)     -- re-evaluate the expression
    cursor.curlevel.casecode=ecode
    end

/** ------------------------------------------------------------------ */
/* NrSelect.Pending                                                   */
/*                                                                    */
/*   An object that represents a pending piece of a Select construct. */
/*                                                                    */
/*   When a Select is processed, it may (iff CASE is used and the     */
/*   expression is of a valid type) be a candidate for generating a   */
/*   SWITCH construct rather than an if-then-else chain.              */
/*                                                                    */
/*   In this case, the MAYSWITCH flag is set, and pieces of code that */
/*   vary are generated into Pending chunks.  The correct piece of    */
/*   code for each insertion is then inserted as a batch at the end   */
/*   of the Select construct.                                         */
/*                                                                    */
/*   All pieces are output parts (formatting is controlled by fixed   */
/*   output chunks, which may be empty strings).                      */
/* ------------------------------------------------------------------ */
/* 1999.09.11 Initial                                                 */
class NrSelect.Pending dependent
 properties private
  where     =int         -- insert point
  ifcode    =Rexx        -- code if not using SWITCH
  swcode    =Rexx        -- code if using SWITCH

 /** Constructor .. adds this to pending list */
 method Pending(w=int, ic=Rexx, sc=Rexx)
  where=w
  ifcode=ic
  swcode=sc
  parent.pendings.addElement(this) -- enqueue

 /** out -- write out this pending chunk
    Arg1 is 1 if writing out Switch
    */
 method out(switch=boolean)
  if switch then code=swcode
            else code=ifcode
  parent.streamer.outinsertpart(code, where)

