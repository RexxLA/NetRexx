/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrPackage                                                          */
/*                                                                    */
/*   An object that represents a parsed package instruction.          */
/*   Called on pass0 and pass2                                        */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.05.28 Initial                                                 */
/* 1998.01.13 Make syntax errors RxQuit to prevent knock-on errors    */
/* 1998.12.12 Do not import sub-packages automatically                */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal

/**   An object that represents a parsed package instruction.          */
/*   Called on pass0 and pass2                                        */
class NrPackage implements RxClauseParser

 properties private
  rxt    =RxTranslator             -- root
  parser =RxParser                 -- local reference
  tokens =RxToken[]                -- local reference
  packagename=Rexx                 -- our name

 /** Construct a package object from the current clause */
 /* [PARSEPACKAGE in prototype] */
 method NrPackage(newrxt=RxTranslator)
  rxt    =newrxt                   -- the boss
  parser =rxt.program.parser       -- our parser
  tokens =parser.cursor.curclause.tokens -- local reference

  if parser.cursor.curclass\=null then signal RxError(rxt, tokens[0], 'package.after.class')
  if rxt.program.packagename\=null then signal RxError(rxt, tokens[0], 'duplicate.package')

 /** Pass processing */
 method scan(pass=int)
  if pass=1 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrPackage:' pass)
  if pass=2 then return            -- no checking needed

  if tokens[1].type\=RxToken.SP  then signal RxError(rxt, tokens[1], 'package.name.expected')
  if tokens[2].type\=RxToken.SYM then signal RxError(rxt, tokens[2], 'package.name.expected')
  n=2; name=Rexx(tokens[n].value)
  loop forever
    n=n+1; tok=tokens[n]; t=tok.type
    if t=RxToken.END then leave
    if t\=RxToken.DOT then signal RxQuit(rxt, tok, 'dot.expected')
    n=n+1; tok=tokens[n]; t=tok.type
    if t\=RxToken.SYM then signal RxQuit(rxt, tok, 'package.part.expected')
    name=name'.'tok.value
    end
  packagename=name                 -- save locally ..
  rxt.program.packagename=name     -- .. and for all to share

  /* Register it, if new */
  if \rxt.classer.ispackage(name) then rxt.classer.addpackage(name)

  /* Import the classes from this package.
     OK if none found or is a standard package.  */
  rxt.classer.importclasses(name)

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  /* Insert the PACKAGE (and name) into output, right at the top */
  rxt.program.streamer.outinsert('package' packagename';',-
                                 parser.programstartchunk, 0)

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  signal RxQuit(rxt, tokens[0], 'internal.error', 'NrPackage: interpret')

