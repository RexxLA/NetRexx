/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrProperties                                                       */
/*                                                                    */
/*   An object that represents a parsed properties instruction        */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.05.28 Initial                                                 */
/* 1996.08.06 Add STATIC keyword                                      */
/* 1997.01.29 Save attributes rather than modifiers in RxClass        */
/* 1997.02.09 Add Indirect attribute                                  */
/* 1997.02.03 Add Transient attribute                                 */
/* 1997.05.31 Add Deprecated modifier                                 */
/* 1997.06.21 Add Shared attribute                                    */
/* 1997.07.01 General rework of options handling for better messages  */
/* 1999.05.27 Add Unused attribute                                    */
/* ------------------------------------------------------------------ */
/* Note: If (later) we allow PROPERTIES in interface classes, then    */
/*       some options (e.g., PRIVATE) must be disallowed.             */

package COM.ibm.netrexx.process
options binary nodecimal

/**   An object that represents a parsed properties instruction        */
class NrProperties implements RxClauseParser
 properties private
  rxt    =RxTranslator                            -- root
  parser =RxParser                                -- local reference
  pcursor=RxCursor                                -- local reference
  tokens =RxToken[]                               -- local reference

  -- results determined on pass1
  keywords  =Rexx ''               -- list of keywords seen
  atts      =int                   -- given attributes
  staticprop=boolean 0             -- static properties follow

 /** Construct an object from the current clause */
 method NrProperties(newrxt=RxTranslator)
  rxt    =newrxt                   -- the boss
  parser =rxt.program.parser       -- our parser
  pcursor=parser.cursor            -- our parsing cursor
  tokens =pcursor.curclause.tokens -- local reference

  if parser.level>=2 then
    signal RxError(rxt, tokens[0], 'properties.inside.method')
  if pcursor.curclass.classinfo.isinterface then
    signal RxError(rxt, tokens[0], 'properties.not.allowed.in.interface')

  /* The next line can only be activated during component testing, as
     this syntax would normally set up a property variable */
  if tokens[1].type=RxToken.END then signal RxError(rxt, tokens[1], 'properties.word.expected')

 /** Pass processing */
 method scan(pass=int)
  /* We only need to process the syntax of the instruction on pass1 */
  if pass=0 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrProperties')

  if pass=1 then do label pass1check
    access=char[]                  -- access keyword
    modifier=char[]                -- modifier keyword
    accesstype=int 0               -- access type accumulator
    static=boolean 0               -- static property
    final =boolean 0               -- final property
    volatile=boolean 0             -- volatile property
    transient=boolean 0            -- transient property
    deprecated=boolean 0           -- deprecated property
    unused=boolean 0               -- unused property
    -- no ThreadSafe yet
    n=0
    loop label options forever
      n=n+1; tok=tokens[n]; t=tok.type
      if t=RxToken.END then leave
      if t<>RxToken.SP then signal RxError(rxt, tok, 'blank.expected')
      n=n+1; tok=tokens[n]; t=tok.type
      if t<>RxToken.SYM then signal RxError(rxt, tok, 'keyword.expected')
      keywords=keywords tok.value
      select
        when parser.iskey(tok.value, 'INHERITABLE') then do
          if access<>null then signal RxError(rxt, tok, 'duplicate.visibility', access)
          accesstype=RxVariable.VAR_INHERIT
          access=tok.value
          end
        when parser.iskey(tok.value, 'PUBLIC') then do
          if access<>null then signal RxError(rxt, tok, 'duplicate.visibility', access)
          accesstype=RxVariable.VAR_PUBLIC
          access=tok.value
          end
        when parser.iskey(tok.value, 'PRIVATE') then do
          if access<>null then signal RxError(rxt, tok, 'duplicate.visibility', access)
          accesstype=RxVariable.VAR_PRIVATE
          access=tok.value
          end
        when parser.iskey(tok.value, 'INDIRECT') then do
          if access<>null then signal RxError(rxt, tok, 'duplicate.visibility', access)
          accesstype=RxVariable.VAR_INDIRECT
          access=tok.value
          end
        when parser.iskey(tok.value, 'SHARED') then do
          if access<>null then signal RxError(rxt, tok, 'duplicate.visibility', access)
          accesstype=RxVariable.VAR_SHARED
          access=tok.value
          end
        when parser.iskey(tok.value, 'CONSTANT') then do
          if modifier<>null then signal RxError(rxt, tok, 'duplicate.modifier', modifier)
          final=1
          static=1
          statictok=tok
          modifier=tok.value
          end
        when parser.iskey(tok.value, 'STATIC') then do
          if modifier<>null then signal RxError(rxt, tok, 'duplicate.modifier', modifier)
          static=1
          statictok=tok
          modifier=tok.value
          end
        when parser.iskey(tok.value, 'TRANSIENT') then do
          if modifier<>null then signal RxError(rxt, tok, 'duplicate.modifier', modifier)
          transient=1
          modifier=tok.value
          end
        when parser.iskey(tok.value, 'VOLATILE') then do
          if modifier<>null then signal RxError(rxt, tok, 'duplicate.modifier', modifier)
          volatile=1
          voltok=tok
          modifier=tok.value
          end
        when parser.iskey(tok.value, 'DEPRECATED') then do
          if deprecated then signal RxError(rxt, tok, 'duplicate.keyword')
          -- We cannot safely add /** @deprecated */ later if comments pass through
          if rxt.program.flag.comments then RxWarn(rxt, tok, 'deprecated.not.available')
           else deprecated=1
          end
        when parser.iskey(tok.value, 'UNUSED') then do
          if unused then signal RxError(rxt, tok, 'duplicate.keyword')
          unused=1
          unutok=tok
          end
        otherwise signal RxError(rxt, tok, 'not.a.keyword')
        end
      end options

    /* checks */
    if accesstype==RxVariable.VAR_INDIRECT & static & \final then
      signal RxError(rxt, statictok, 'indirect.properties.cannot.be')
    if accesstype==RxVariable.VAR_INDIRECT & volatile then
      signal RxError(rxt, voltok, 'indirect.properties.cannot.be')
    if pcursor.curclass.classinfo.isdependent then if static then
      signal RxError(rxt, statictok, 'dependent.properties.cannot.be')
    if unused then if accesstype\==RxVariable.VAR_PRIVATE then
      signal RxError(rxt, unutok, 'unused.must.be.private')

    /* set state for this class */
    staticprop=static              -- save for next pass
    atts=RxVariable.VAR_PROP       -- ..
    if accesstype=0 then atts=atts+RxVariable.VAR_INHERIT
     else do
      atts=atts+accesstype
      -- convert INDIRECT CONSTANT to INDIRECT READONLY (in effect)
      if accesstype=RxVariable.VAR_INDIRECT then
       if final & static then do
        final=0; static=0
        atts=atts+RxVariable.VAR_READONLY
        end
      end
    if       final     then atts=atts+RxVariable.VAR_CONSTANT
     else if static    then atts=atts+RxVariable.VAR_STATIC
     else if transient then atts=atts+RxVariable.VAR_TRANSIENT
     else if volatile  then atts=atts+RxVariable.VAR_VOLATILE
    if deprecated      then atts=atts+RxVariable.VAR_DEPRECATED
    if unused          then atts=atts+RxVariable.VAR_UNUSED

    if rxt.program.flag.diag then say '# propatts:' atts static
    end pass1check

  -- update cursor status [both passes, for now]
  pcursor.curpropatts=atts
  pcursor.curstatic=staticprop

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  -- just a comment
  rxt.program.streamer.out('/* properties' keywords.space '*/')

 /** Interpretation */
 method interpret(cursor=RxCursor null)

  -- Simply update the attributes.
  -- We don't need to change curstatic here, as RxInterpreter manages
  -- staticality in class initialization
  cursor.curpropatts=atts

