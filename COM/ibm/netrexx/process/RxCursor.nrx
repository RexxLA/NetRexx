/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1999, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxCursor                                                           */
/*                                                                    */
/*   An object that represents the current context of execution or    */
/*   parsing.  This may be either during initial parsing or per-      */
/*   thread while executing.                                          */
/*                                                                    */
/*   Even during parsing, a non-null curthis indicates than an        */
/*   instance is accessible.                                          */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1999.10.20 Initial                                                 */
/* 1999.10.21 Add init request                                        */
/* 2000.02.18 Add empty constructor                                   */
/* 2000.02.19 Add local and object pool references                    */
/* 2000.02.25 Add alerts                                              */
/* 2000.03.31 curthis becomes general Object [was RxInstance]         */
/* 2000.04.12 curpropatts added for runtime class initialization      */
/* 2000.04.13 curprogram added; empty constructor removed             */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal


class RxCursor

 properties shared constant
  -- Actions: values for curacttype
  CUR_NOACT  =int 0           -- no action pending
  CUR_RETURN =int 1           -- return
  CUR_EXCEP  =int 2           -- exception
  CUR_LEAVE  =int 3           -- leave block
  CUR_ITER   =int 4           -- interate loop

 properties shared
  curprogram =RxProgram       -- current program [always exists]
  curclass   =RxClass         -- current class [if any]
  curmethod  =RxMethod        -- current method [if any]
  curclause  =RxClause        -- current clause [maybe outside class]
  curlevel   =NrLevel         -- current statement level descriptor
  curthis    =Object          -- current instance; null if static code
  curparent  =Object          -- current parent instance [iff not null]
  curpropatts=int             -- current PROPERTIES attributes
  curlpool   =Hashtable       -- current local (method) variable pool
                              -- [class pool is in RxClass object]
  -- settings objects
  curtrace   =RexxTrace       -- trace settings object
  curnumer   =RexxSet         -- numeric settings object

  -- control/state values...
  curbinary  =boolean 0       -- current binary setting
  curstatic  =boolean 0       -- current static code setting
  curexec    =boolean 0       -- cursor is active: clause execution required
                              -- [if 0, we are just parsing]
  curnewprot =boolean 0       -- starting a new protected block
  curendprot =boolean 0       -- just ended a protected block

  curact     =boolean 0       -- 1 to request new action
  curacttype =int             -- action type (one of the CUR_ values)
  curactblock=NrBlock         -- block to stop unwinding at (for LEAVE
                              -- and ITERATE)
  -- next three handle proxy/interpreter interactions in constructors
  curprecall =boolean 0       -- this cursor exists for super(...) precall
  curskipone =boolean 0       -- skip the first clause (proxy ran it)
  curskiptrace=boolean 0      -- skipping tracing after precall

  curreturn  =Object          -- return value from interpret(), if any
     -- This will be an object (after a special methodcall)
     -- An RxCode or null (after return)
     -- An RxSignal (after signal)
  curjump    =RxClause        -- control transfer request if non-null

 /* General Constructor */
 method RxCursor(cp=RxProgram, ccl=RxClass, cm=RxMethod, cc=RxClause)
  curprogram=cp
  curclass=ccl
  curmethod=cm
  curclause=cc

