/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrParse                                                            */
/*                                                                    */
/*   An object that represents a parsed Parse instruction.            */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.06.09 Initial                                                 */
/* 1996.08.03 Add tracing                                             */
/* 1998.05.21 Add assigns to tracing                                  */
/* 2000.03.05 Rework for interpretation                               */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal

/**   An object that represents a parsed Parse instruction.            */
class NrParse implements RxClauseParser uses RxCode
 properties private
  rxt      =RxTranslator                -- root
  parser   =RxParser                    -- local reference
  pooler   =RxVarPool                   -- variables manager
  pcursor  =RxCursor                    -- local reference
  tokens   =RxToken[]                   -- local reference
  converter=RxConverter                 -- ..

  -- the following are results of scan
  term=RxCode                 -- the term to be parsed
  termconv=RxConvert          -- conversion used to convert term to Rexx
  ilist=Rexx 0;  ins=int 0    -- instruction list and instruction count
  rlist=Rexx ''; refs=int 0   -- references list and references count
  olist=Rexx ''               -- matching original names
  tlist=Rexx ''               -- matching trace tags
  rcla =Rexx ''               -- class for each item
  rdim =Rexx ''               -- dimension for each item
  vin  =Rexx 0                -- In/Out flags [tail is REFS number]
  vout =Rexx 0                -- ..
  tracenames=String[]         -- lowercase assigned names

 /** Construct an object from the current clause */
 method NrParse(newrxt=RxTranslator)
  rxt      =newrxt                      -- the boss
  parser   =rxt.program.parser          -- our parser
  pooler   =rxt.program.pooler          -- our variables manager
  pcursor  =parser.cursor               -- our parsing cursor
  converter=rxt.converter               -- local reference
  tokens   =pcursor.curclause.tokens    -- ..
  if tokens[1].type=RxToken.END then
    signal RxError(rxt, tokens[1], 'parse.term.expected')

 /** The PARSE instruction is compiled into three parts of code:

    1. Copying referenced variables into an array to be passed to the
       parser.
    2. Compiled template (as an instruction list)
    3. Setting all variables from the array passed to the parser.

    The instruction codes are defined by RexxParse.nrx, as follows
    (these are all type char):

      RexxParse.EOP
      RexxParse.EOS
      RexxParse.STRING
      RexxParse.ABS
      RexxParse.PLUS
      RexxParse.MINUS
      RexxParse.VAR
      RexxParse.VARABS
      RexxParse.VARPLUS
      RexxParse.VARMINUS
      RexxParse.VARLIST

    */

 method scan(pass=int)
  if pass<2 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrParse', pass)


  if tokens[1].type<>RxToken.SP then begin=1; else begin=2
  tok=tokens[begin]
  term=rxt.tparser.parseterm(pcursor, begin, 1) -- this is an RHS reference

  -- say '# TB:' term.begoff term.endoff

  if term.group=S_TYPE then signal RxError(rxt, tok, 'cannot.parse.type')
  if term.group=T_UNKNOWN then signal RxError(rxt, tok, 'unknown.variable')

  if term.type=NrBabel.rexxtype then termconv=null
   else do     -- conversion to Rexx needed
    termconv=converter.assigncost(pcursor, NrBabel.rexxtype, term.type)
    if termconv.cost>rxt.convertible then
      signal RxError(rxt, tok, 'cannot.convert.to.rexx',-
                     rxt.program.babel.typeString(term.type))
    converter.convertcode(pcursor, NrBabel.rexxtype, termconv.proc, term)
    end
  n=term.endoff+1

  parser.addexceptions(1, term.exceptions, tok)

  /* Collect and translate the template */
  -- Should use Vectors for all of these, for the collecting
  if tokens[n].type=RxToken.END then signal RxError(rxt, tokens[n], 'template.expected')
  vlook=Rexx 0           -- variables lookaside [name -> rlist number]
  assigns=Vector(10)     -- list of lowercase variable names assigned to [String]
  eot  =boolean 0        -- end of template
  loop until eot         -- each segment of template
    segvars=0            -- Variables in this segment
    segrefs=Rexx 0       -- References, one-by-one
    /* Collect variable names (and place-holders) */
    loop n=n by 1
      tok=tokens[n]; tn=tok.type
      if tn=RxToken.SP then iterate n
      if tn<>RxToken.SYM & tn<>RxToken.DOT then leave n -- pattern expected
      /* have a variable name or dot */
      if n>0 then do                    -- check no dots adjacent to symbols
        tm1=tokens[n-1].type
        if tm1==RxToken.SYM | (tm1==RxToken.DOT & tn==RxToken.SYM) then
          RxWarn(rxt, tok, 'blank.expected')
          -- signal RxError, later
        end
      segvars=segvars+1
      if tn=RxToken.DOT then do
        varname=Rexx '.'; origname=varname
        vartype=NrBabel.rexxtype
        vartag='.'
        end
       else do                     -- real variable
        /* processing here is just like LOOP I=... */
        origname=tok.value
        varname=origname
        -- for now, warn of local properties if STRICTPROPS is set
        var=pooler.findvar(pcursor, varname, tok, 0, 0, 2)
        if var\=null then do
          lhtype=var.vartype; vartype=var.vartype
          end
         else do
          lhtype=null; vartype=NrBabel.rexxtype
          end
        /* test old vars can be assigned Rexx; new ones become Rexx */
        /* We conservatively indicate that it's not being given a value.
           This will force it to be initialized.  This is wasteful as
           this is only needed for the 'delim' example (and similar) for
           which local initialization of affected variables would be
           better.  When/if we have the latter, change 1 to 0 here. */
        var=pooler.checkvar(pcursor, RxVariable.VAR_LOCAL, varname, lhtype,-
                            tok, NrBabel.rexxtype, tokens[begin], 1, '=')
        varname=var.varspell       -- get real spelling
        vartag=var.tracetag        -- and tag for tracing
        assigns.addElement(varname.lower.toString)
        end

      v=vlook[varname]             -- get registration number
      if v==0 then /* new this template */ do
        if refs=250 then signal RxError(rxt, tok, 'too.many.template.variables')
        refs=refs+1; v=refs        -- one more known
        rlist[refs]=varname        -- for assigns
        rcla[refs]=vartype.classname  -- ..
        rdim[refs]=vartype.dimension  -- ..
        olist[refs]=origname       -- original name
        tlist[refs]=vartag         -- trace tag
        vlook[varname]=v           -- now we know it
        end
      vout[v]=1                    -- all vars get set
      segrefs[segvars]=v
      /* say '# Segvar' segvars 'is ref' v '['varname']' */
      end n

    /* Here when pattern (or end of template) found */
    select
      when tn=RxToken.END then do
        eot=1                       -- end of template found
        -- if we have some variables to set, add end-of-string matcher
        if segvars>0 then do
          ins=ins+1; ilist[ins]=int(RexxParse.EOS)     -- code for the pattern
          end
        end
      when tn=RxToken.STR  then do      -- literal string
        /* First pack escapes from string */
        packed=parser.packstring(tok.value, tok)
        /* code for the pattern */
        ins=ins+1; ilist[ins]=int(RexxParse.STRING)
        len=packed.length
        ins=ins+1; ilist[ins]=len
        loop i=0 to len-1
          c=packed[i]                   -- get next character
          ins=ins+1; ilist[ins]=int(c)  -- and save it as number
          end i
        n=n+1
        end
      otherwise /* more complicated pattern */ do
        if tn<>RxToken.OP then pre=char ' '
         else /* operator character */ do
          pre=tok.value[0]
          if pre\='+' then if pre\='-' then if pre\='=' then
            signal RxError(rxt, tok, 'bad.operator.in.template')
          n=n+1; tok=tokens[n]; tn=tok.type
          end
        /* now expecting number or vref */
        select
          when tn=RxToken.NUM then /* literal number */ do
            num=Rexx(tok.value).toint   -- caught below if bad
            -- note a number can be negative if 2x8F, etc.
            if num>999999999 | num<0 then
              signal RxError(rxt, tok, 'bad.number.pattern') -- 00, etc., is OK
            /* split to bytes */
            num=num%1              -- clean
            zeros=0                -- count of leading zero bytes
            usbyte=int[4]
            loop i=3 to 0 by -1
              usbyte[i]=num//256
              num=num%256
              if usbyte[i]=0 then zeros=zeros+1; else zeros=0
              end
            /* now generate internal code for the positional pattern */
            select
              when pre=' ' then code=int(RexxParse.ABS)
              when pre='=' then code=int(RexxParse.ABS)
              when pre='+' then code=int(RexxParse.PLUS)
              when pre='-' then code=int(RexxParse.MINUS)
              end
            ins=ins+1; ilist[ins]=code
            ins=ins+1; ilist[ins]=4-zeros
            loop i=zeros to 3
              ins=ins+1; ilist[ins]=usbyte[i]
              end
            catch NumberFormatException
              signal RxError(rxt, tok, 'bad.number.pattern') -- not an int, etc.
            end /* number */

          when tn=RxToken.LPAR then /* vref */ do
            n=n+1; tok=tokens[n]; tn=tok.type
            if tn<>RxToken.SYM then signal RxError(rxt, tok, 'variable.name.expected')
            origname=tok.value
            varname=origname
            -- for now, warn of local properties if STRICTPROPS is set
            var=pooler.findvar(pcursor, varname, tok, 1, 0, 2)
            if var=null then signal RxError(rxt, tok, 'variable.name.expected')
            varname=var.varspell        -- use real spelling
            n=n+1; tok2=tokens[n]; tn2=tok2.type
            if tn2<>RxToken.RPAR then signal RxError(rxt, tok2, 'right.parenthesis.expected')
            /* Looks like we have a vref */
            v=vlook[varname]            -- get registration number
            if v==0 then /* new this template */ do
              if refs=250 then signal RxError(rxt, tok, 'too.many.template.variables')
              refs=refs+1; v=refs       -- one more known
              rlist[refs]=varname       -- for assigns
              olist[refs]=origname      -- original name
              vlook[varname]=v          -- now we know it
              end
            rcla[v]=var.vartype.classname -- save input signature
            rdim[v]=var.vartype.dimension -- ..
            vin[v]=1                    -- it's an input
            /* now generate code for the vref */
            select
              when pre=' ' then code=int(RexxParse.VAR)
              when pre='=' then code=int(RexxParse.VARABS)
              when pre='+' then code=int(RexxParse.VARPLUS)
              when pre='-' then code=int(RexxParse.VARMINUS)
              end
            ins=ins+1; ilist[ins]=code
            ins=ins+1; ilist[ins]=v.toint-1
            end
          otherwise signal RxError(rxt, tok, 'bad.parse.template')
          end
        n=n+1
        end /* more complicated pattern */
      end

    /* prepare for variables */
    if segvars>0 then do
      ins=ins+1; ilist[ins]=int(RexxParse.VARLIST)-- code
      ins=ins+1; ilist[ins]=segvars               -- count
      loop vv=1 to segvars
        ins=ins+1; ilist[ins]=segrefs[vv].toint-1 -- ref
        end vv
      end /* have vars in this segment */
    end /* segments, until eot */

  ins=ins+1; ilist[ins]=int(RexxParse.EOP)        -- end of parse
  /* loop i=1 to ins; say '# Ilist['i']:' ilist[i]; end */

  /* tracenames may be used by either code generation or interpretation */
  if assigns.size=0 then tracenames=String[] null
   else do
    tracenames=String[assigns.size]
    assigns.copyinto(tracenames)
    end

 /** Trace names list */
 method getAssigns returns String[]
  return tracenames

 /** Code generation [only] */
 method generate
  /* Trace the code if needed */
  rxt.program.tracer.traceclause(pcursor.curclause, RexxTrace.VAR, tracenames)

  /* Now it's time to generate code for the PARSE */
  /*   1. Constant for the instruction list (could be shared) */
  /*   2. Local var for the references list (it can change) */
  /*   3. Copy IN values to the references list, corrected */
  /*   4. Invoke the parser */
  /*   5. Copy OUT values from the references list */

  /* 1. Constant for the instruction list (could be shared) */
  /* First the initializer */
  icode=RxCode(S_EXPR, rxt.chararraytype, null)
  icode.javacode='{'
  loop i=1 to ins
    icode.javacode=icode.javacode||ilist[i]
    if i<ins then icode.javacode=icode.javacode','
    end
  icode.javacode=icode.javacode'}'
  ilistvar=converter.addconstant(pcursor, rxt.chararraytype, icode).javacode

  /* 2. Local var for the references list (it can change) */
  pcursor.curclass.uniques=pcursor.curclass.uniques+1
  rlistvar='$'pcursor.curclass.uniques
  rxt.program.streamer.out('{'NrBabel.rexxclass rlistvar'[]=new' NrBabel.rexxclass'['refs'];')   -- create

  /* 3. Copy IN values to the references list */
  out=''
  loop r=1 to refs
    if vin[r] then do
      rcode=RxCode(S_EXPR, RxType(rcla[r], rdim[r]), null)
      rcode.javacode=rlist[r]
      converter.torexx(pcursor, rcode, 1)    -- convert to Rexx
      out=out||rlistvar'['r-1']='rcode.javacode';'
      end
    end r
  if out\=='' then rxt.program.streamer.out(out)

  /* 4. Invoke the parser */
  invoke=NrBabel.rexxparseclass'.parse('term.javacode','ilistvar','rlistvar');'
  rxt.program.streamer.out(invoke)

  /* 5. Copy OUT values from the references list (except placeholders) */
  out=''
  loop r=1 to refs
    if vout[r] then if rlist[r]\=='.' then do
      vcode=RxCode(S_EXPR, NrBabel.rexxtype, null)
      vcode.javacode=rlistvar'['r-1']'
      rtype=RxType(rcla[r], rdim[r])

      conv=converter.assigncost(pcursor, rtype, NrBabel.rexxtype)
      if conv.cost>rxt.convertible then
        signal RxQuit(rxt, null, 'internal.error', 'NrParse bad convert' rtype.toSig)
      converter.convertcode(pcursor, rtype, conv.proc, vcode)
      /* add tracing if necessary */
      rxt.program.tracer.tracecode(vcode, pcursor.curclause.tokens[0],-
        tlist[r], RexxTrace.VAR, olist[r])
      out=out||rlist[r]'='vcode.javacode';'
      end
    end r
  rxt.program.streamer.out(out'}') -- always need at least the '}'

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  -- this simply follows the same sequence as code generation

  -- 1. make the istruction list
  chars=char[ins]
  loop i=1 to ins
    chars[i-1]=char(ilist[i].toint)
    end i

  -- 2. Make the references list
  rexxes=Rexx[refs]

  -- 3. Copy IN values to the references list
  loop r=1 to refs
    if vin[r] then do label vin
      -- name is in input list
      var=pooler.refindvar(cursor, olist[r]) -- find the variable
      -- convert to Rexx if need be
      varvalue=rxt.interpreter.getVar(cursor, var, null)
      if var.vartype=NrBabel.rexxtype then rexxes[r-1]=Rexx varvalue
       else do
        icode=RxCode(S_EXPR, var.vartype, null)
        icode.value=varvalue
        iconv=converter.assigncost(cursor, NrBabel.rexxtype, var.vartype)
        converter.convertcode(cursor, NrBabel.rexxtype, iconv.proc, icode)
        rexxes[r-1]=Rexx icode.value
        end
      end vin
    end r

  /* 4. re-evaluate the term and invoke the parser */
  term=rxt.tparser.evalterm(cursor, term.begoff, 1) -- is RHS term
  if termconv\=null then do
    tok=cursor.curclause.tokens[term.begoff]
    converter.convertcode(cursor, NrBabel.rexxtype, termconv.proc, term, tok)
    end
  -- say '# T:' (Rexx term.value) term.type
  -- say '#  :' term.begoff cursor.curclause.showtokens
  RexxParse.parse(Rexx term.value, chars, rexxes)

  /* 5. Copy OUT values from the references list (except placeholders) */
  loop r=1 to refs
    if vout[r] then if olist[r]\=='.' then do label vout
      -- name is in output list and is not placeholder
      var=pooler.refindvar(cursor, olist[r]) -- find the variable
      -- convert the value from Rexx to whatever the variable needs
      if var.vartype=NrBabel.rexxtype then varvalue=rexxes[r-1]
       else do
        vcode=RxCode(S_EXPR, NrBabel.rexxtype, null)
        vcode.value=rexxes[r-1]
        vconv=converter.assigncost(cursor, var.vartype, NrBabel.rexxtype)
        -- say '# VC:' var.vartype vconv.proc ''''vcode.value''''
        converter.convertcode(cursor, var.vartype, vconv.proc, vcode)
        varvalue=vcode.value
        end
      rxt.interpreter.setVar(cursor, var, null, varvalue)  -- set it
      -- trace the value if needed
      if cursor.curtrace\=null then do
        cursor.curtrace.traceRexx(cursor.curclause.tokens[0].line,-
                                  rexxes[r-1], tlist[r], RexxTrace.VAR,-
                                  olist[r])
        end
      end vout
    end r

  return
