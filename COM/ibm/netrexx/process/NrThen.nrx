/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrThen                                                             */
/*                                                                    */
/*   An object that represents a parsed Then clause.                  */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 1996.06.10 Initial                                                 */
/* 2000.02.24 Add interpretation                                      */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal

/**   An object that represents a parsed Then clause.                  */
class NrThen implements RxClauseParser
 properties private
  rxt    =RxTranslator                            -- root
  parser =RxParser                                -- local reference
  tokens =RxToken[]                               -- local reference

 /** Construct an object from the current clause */
 method NrThen(newrxt=RxTranslator)
  rxt      =newrxt                           -- the boss
  parser   =rxt.program.parser               -- our parser
  tokens   =parser.cursor.curclause.tokens   -- local reference

  if tokens[1].type\=RxToken.END then signal RxQuit(rxt, tokens[1], 'internal.error', 'NrThen')

 /** Pass processing */
 method scan(pass=int)
  if pass<2 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrThen', pass)
  if parser.thislevel.key=='IF' then
   if parser.thislevel.ifstate=NrLevel.IF_THENEXP then do
    parser.thislevel.ifstate=NrLevel.IF_THEN
    topif=NrIf parser.thislevel.clause.lookaside -- the owning NrIf
    topif.thenclause=parser.cursor.curclause
    return
    end
  if parser.thislevel.key=='SELECT' then
   if parser.thislevel.selstate=NrLevel.SEL_THENEXP then do
    parser.thislevel.selstate=NrLevel.SEL_THEN
    return
    end
  signal RxError(rxt, parser.cursor.curclause.tokens[0], 'unexpected.then')

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  -- THEN generates no code, but does change state

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  cursor.curlevel.nextone=1                  -- request execute next clause
