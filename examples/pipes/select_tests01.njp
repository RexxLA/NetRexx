/* select -- choose Records using Rexx Parse  */

/*
  23/ 5/29 New.  Jeff Hennick
*/

pipe (select_tests01)

 o: faninany |
    sort singleok |
    specs 2-* 1 |
    cons ?


-- select dstring ?
   literal aza;e2g;hij |
   split ; |
   select /return rec.pos('2') > 0/ |
   c1: compare any ~2# 1 SELECT dstring ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal e2g |
   split ; |
   c1: ?

-- select dstring (secondary) ?
   literal aza;e2g;hij |
   split ; |
   p2: select /return rec.pos('2') > 0/ ?
   p2: |
   c2: compare any ~2# 2 select dstring (secondary) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal aza;hij |
   split ; |
   c2: ?

-- select dstring (prev) ?
   literal aza;e2g;h2i |
   split ; |
   select /parse rec 2 r +1;parse prev 2 p +1; return r \= p/ |
   c3: compare any ~2# 3 select dstring (prev) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal aza;e2g |
   split ; |
   c3: ?

-- select dstring (tertiary) ?
   literal aza;e2g;hij |
   split ; |
   p4: select /return 2/ |
   hole ?
   p4: |
   hole ?
   p4: |
   c4: compare any ~2# 4 select dstring (tertiary) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal aza;e2g;hij |
   split ; |
   c4: ?


-- select dstring (multiple) ?
   literal 1a2;3b4;5c6;zzz;7c8;9b0;aab |
   split ; |
   p5: select ,
    /parse rec 2 k +1; ,
    select case k; ,
     when 'a' then o = 0; ,
     when 'b' then o = 2; ,
     when 'c' then o = 3; ,
     otherwise o = 1; ,
    end; ,
    return o/ |
   c5z: compare any ~2# 5z select dstring (multiple primary) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal zzz |
   split ; |
   c5z:  ?
   p5: |
   c5a: compare any ~2# 5a select dstring (multiple secondary) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal 1a2;aab |
   split ; |
   c5a: ?
   p5: |
   c5b: compare any ~2# 5b select dstring (multiple tertiary) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal 3b4;9b0 |
   split ; |
   c5b: ?
   p5: |
   c5c: compare any ~2# 5c select dstring (multiple quaternary) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal 5c6;7c8 |
   split ; |
   c5c:


/** select -- Select Records using user logic

>>--SELECT--NetRexx_Dstring-->

 Records are selected by the NetRexx Delimited_string.
 The Dstring is placed in a method that supplies the
 record in the variable rec.  The previous record is in prev.
 The method returns 1 to select the record to the primary output stream,.
 or 0 to send it to the secondary stream.  A record sent to a disconnected
 stream is discarded.

 Alternatively, the method can return the number of any output stream,.
 but NOTE: the primary and secondary numbers, 0 & 1 are reversed per
 the above logic. Other streams have their corresponding number.

 An other return value results in the record being discarded.

 Examples:
   select /return rec.pos('2') > 0/

   select /parse rec 2 r +1;parse prev 2 p +1; return r \= p/

*/
