/* specs_tests8.njp */

/*
  22/12/31 Documentation update. Jeff Hennick
  20/ 3/28 Jeff Hennick
*/

pipe (specs_tests8)

 o: faninany |
    sort |
    specs 2-* 1 |
    cons ?

-- specs simple ?
   literal one;two;three;four |
   split ; |
   specs /Pipes GOOD / 1 1-*  next |
   c1: compare any ~2# 1 specs simple ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal Pipes GOOD one;Pipes GOOD two;Pipes GOOD three;Pipes GOOD four |
   split ; |
   c1: ?
   literal 1;2;3;4 |
   split ; |
   c1: ?

-- specs select second ?
   literal one;two;three;four |
   split ; |
   s2: specs 1-*  next select 1 1-* nextword select second 1-* nw |
   c2: compare any ~2# 2 specs select second~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal one 1;two 2 one;three 3 two;four 4 three |
   split ; |
   c2: ?
   literal 1;2;3;4 |
   split ; |
   s2: ?

-- specs select first ?
   literal one;two;three;four |
   split ; |
   s3: specs 1-*  next select 1 1-* nextword select second 1-* nw select first 1-* nw|
   c3: compare any ~2# 3 specs select first~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal one 1 one;two 2 one two;three 3 two three;four 4 three four |
   split ; |
   c3: ?
   literal 1;2;3;4 |
   split ; |
   s3: ?

-- specs right ?
   literal one;two;three;four |
   split ; |
   specs /Pipes GOOD / 1 1-*  12.10 right |
   c4: compare any ~2# 4 specs right ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal Pipes GOOD        one;Pipes GOOD        two;Pipes GOOD      three;Pipes GOOD       four |
   split ; |
   c4: ?

-- specs center ?
   literal one;two;three;four |
   split ; |
   specs /Pipes GOOD / 1 1-*  12.10 center /!/ next |
   c5: compare any ~2# 5 specs center ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal Pipes GOOD    one    !;Pipes GOOD    two    !;Pipes GOOD   three   !;Pipes GOOD    four   ! |
   split ; |
   c5: ?

-- specs centre ?
   literal one;two;three;four |
   split ; |
   specs /Pipes GOOD / 1 1-*  12.10 centre /!/ next |
   c6: compare any ~2# 6 specs centre ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal Pipes GOOD    one    !;Pipes GOOD    two    !;Pipes GOOD   three   !;Pipes GOOD    four   ! |
   split ; |
   c6: ?

-- specs left ?
   literal one;two;three;four |
   split ; |
   specs /Pipes GOOD / 1 pad # 1-*  12.10 left /!/ next |
   c7: compare any ~2# 7 specs left ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal Pipes GOOD one#######!;Pipes GOOD two#######!;Pipes GOOD three#####!;Pipes GOOD four######! |
   split ; |
   c7: ?

-- specs pad (leading hex & spaces) ?
   specs pad 3a /Test   1/ 1-20 |
   c8: compare any ~2# 8 specs pad (leading hex & spaces) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal Test   1:::::::::::: |
   c8: ?

-- specs pad (mid hex & spaces) ?
   specs /lead/ 1-9 pad 3a /Test   1/ 6-20 |
   c9: compare any ~2# 9 specs pad (mid hex & spaces) ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal lead Test   1::::::: |
   c9: ?

-- specs 1-* range ?
   specs /lead/ 1-* |
   c10: compare any ~2#10 specs 1-* range ~ equal ~*OK*~ notequal ~**FAIL**  at rec \\c col \\b.~ less /Less:\nActual:\n\\p\nExpected:\n\\s\n/ more /More:\nActual:\n\\p\nExpected:\n\\s\n/ |
   o: ?
   literal lead |
   c10:


/** specs
            +-STOP--ALLEOF----+ (3)
 >>--SPECs--+-----------------+-------+-----------------+-------->
            +-STOP-+-ANYEOF-+-+ (3)   +-COUNTERS-number-+ (12)
                   +-n------+   (3)


       v------------------------------------------------------------+
   >---+--+-| Group |--------------------------+--+--------------+--+--><
          +-READ-------------------------------+  +-(1),-(4)(13)-+
          +-READSTOP---------------------------+ (3)
          +-WRITE------------------------------+
          +-SELECT-+-streamnum-+---------------+
          |        +-streamid--+               |
          +-OUTSTREAM--streamnum---------------+
          +-PAD--+-char----+-------------------+
          |      +-hexchar-+                   |
          |      +-BLANK---+                   |
          |      +-SPACE---+                   |
          +-+-WORDSEParator---+--+--char-----+-+  (7)
            +-WS--------------+  +-hexchar---+
            +-FIELDSEparator--+  +-BLANK-----+
            +-FS--------------+  +-TAB-------+
                                 +-hexstring-+
                                 +-qword-----+    (4)(6)
Group:
 |--| Id |--| Input |--| Conversion |--| Output |--| Alignment |--|

Id:
 |-letter--(14)--:-(2)--|

Input:
 |--+-Words-(1)-wnumberrange----------------------+-------|
    +-Fields-(1)-fnumberrange---------------------+
    +-cnumberrange--------------------------------+
    +-/string/------------------------------------+
    +-Xhexstring----------------------------------+
    +-Hhexstring----------------------------------+
    +-Bbinstring----------------------------------+
    |            +-FROM--1-------+ +-BY--1-----+  |
    +-+-RECNO--+-+---------------+-+-----------+--+  (8)
    | +-NUMBER-+ +-FROM--fromnum-+ +-BY--bynum-+  |
    +-TODclock------------------------------------+  (3)

Conversion:
 |-+-------+--+------------------------------+------|
   +-STRIP-+  +-B2C--------------------------+
              +-B2X--------------------------+ (4)
              +-C2B--------------------------+
              +-C2D--------------------------+
              +-C2F--------------------------+ (3)
              +-C2I--------------------------+ (3)
              +-C2P-+------------+-----------+ (3)
              |     +-(2)(scale)-+           | (3)
              +-C2V--------------------------+ (3)
              +-C2X--------------------------+
              +-D2C--------------------------+
              +-D2X--------------------------+ (4)
              +-F2C--------------------------+ (3)
              +-I2C--------------------------+ (3)
              +-P2C-+------------+-----------+ (3)
              |     +-(2)(scale)-+           | (3)
              +-V2C--------------------------+ (3)
              +-X2B--------------------------+ (4)
              +-X2C--------------------------+
              +-X2D--------------------------+ (4)
              +-F2T--------------------------+ (3)
              +-LOWER------------------------+ (4)
              +-UPPER------------------------+ (4)
              +-STRING-----------------------+ (4)(11)
              +-+-NETREXX-+-delimited_string-+ (4)(10)
                +-NR------+                    (4)
Output:
 |--+-Next-+-------+-------+--|
    |      +-(2).n-+       |
    +-NEXTWord-+-+-------+-+
    +-NWord----+ +-(2).n-+ |
    +-columnrange----------+
    +-.--------------------+

Alignment:
    +-Left---+
 |--+--------+--|
    +-Center-+
    +-Right--+

Notes:
 (1) Blanks are optional in this position.
 (2) Blanks are not allowed here.
 (3) CMS only. Not yet implemented in njpipes
 (4) NetRexx only. Not yet implemented in CMS
 (5) NetRexx only: READ is giving the same output as READSTOP when
     the streams are different length.
 (6) A Qword is an optionally quoted word, with single or double marks.
     If it contains spaces or begins with a quote mark, it must be quoted.
     It can not begin with a space (the quote mark will be considered
     a single character, and rest jibberish).
     If is unquoted and an even number of hexadecimal characters,
     it will be used as a hexchar or hexstring.
 (7) NetRexx Pipelines ONLY: a single quote character is NOT allowed,
     use "'" or '"' as appropriate.
 (8) CMS Pipelines, without documenting it, places this right by defualt
     NetRexx Pipelines follows the documentation and places this left by defualt.
     Specify the alignment you want to override these defaults.
 (9) CMS has a mini-programming language built in. It uses Control Breaks and
     Structured Data.
     NetRexx does not yet have these, but see the NETREXX converter (10).
(10) The delimited string is any valid NetRexx code. [Yes, you can get in trouble!]
     It is put into a method and executed for each record.  The selected input data
     is in the variable DATA. The returned string is output.  The persistent
     variable array COUNTER[] is available for your use. Each COUNTER is
     initially 0, but can hold any NetRexx value, including strings. COUNTERs
     are shared across all NETREXX converters in a stage. Index can be number or string.
     Fields identified by a fieldid are accessed as field["id"] when the quotes are
     required, the id is a single letter, case is respected
(11) The data is processed by the toString() method.
(12) CMS Only. NetRexx ignores COUNTERS n; it has an unlimited number. See the NETREXX converter.
(13) NetRexx Only. A comma may be used to separate groups for readability.
(14) Letter is a single character, a-zA-Z.  Case is respected. BLANK is not permited between
     letter and : .  The resulting data is available in the NETREXX code as field["letter"].

**/
