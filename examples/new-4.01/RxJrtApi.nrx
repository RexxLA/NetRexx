import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.Files
import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.OpenOption
import java.nio.file.LinkOption
import java.nio.file.StandardOpenOption
import org.netrexx.process 


-- Walks the JPMS jrt:/ file system and modules provided in --module-path
-- By default all directories are listed.
-- -a shows all content
-- -m and -p tabulates modules and packages
-- 
-- Note, all directories are listed, there's no check if the directories
--  actually contain class files and thus could qualify as a 'package'

-- This version uses the JMPS JMPS API to handle modules read from --module-path
-- It only compiles and runs on Java9+ 

class RxJrt public

  properties public static
    isJrt       = boolean 0
    fsep        = '/'
    opt_all     = boolean 0
    opt_module  = boolean 0
    opt_package = boolean 0
    module_path = String null
    

  properties public
    jrtprefix = 'jrt:'||fsep


  method main( args=String[] ) static
    loop a=0 to args.length-1
      arg=Rexx args[a]            -- get next word
      select
        when arg = '-all' | arg = '-a' then do
          opt_all = 1
        end
        when arg = '-module' | arg = '-m' then do
          opt_module = 1
        end
        when arg = '-package' | arg = '-p' then do
          opt_package = 1
          opt_module  = 1
        end

      otherwise
        say 'RxJrt : Walks the JPMS jrt:/ file system and modules provided in --module-path'
        say ' Optional arguments'
        say '  [-a | -all]     show all'
        say '  [-m | -module]  show module'
        say '  [-p | -package] show package (actually a directory..)'
        exit 2
      end  
    end

    rx = RxJrt()
    if \isJrt then do
      exit 1
    end
    else do
      rx.RxJrtTree()
      rx.RxModPath()
      exit 0
    end  

-- constructor
-- check if running >= JDK9, special case CSR JDK-8227076     

  method RxJrt
    v = NrVersion()
    say '# 'v.getLogo() v.getFullVersion() v.getProcdate()
    
    o = Object.class.getResource('Object.class')   -- check for 1.1.8+
    say '# Found Object.class at 'o
    os = o.toString()
    if os.startsWith(jrtprefix) then do
      isJrt = 1
      c = jrtprefix||os.substring(jrtprefix.length())
      p = Paths.get(URI.create(c))
      if \Files.isReadable(p) then do
        jrtprefix = jrtprefix||'modules'||fsep              -- CSR JDK-8227076, fix for GraalVM/OpenJDK 11
      end 
      say '# Running JDK9+ with jrt prefix' jrtprefix
      module_path = System.getProperty("jdk.module.path")
      if module_path \= null then say '# Module-path set as 'module_path
    end 
    else 
      say '# No JPMS available'

  -- explore the module-path if present
  -- need to set JDK_JAVA_OPTIONS as in 
  -- export JDK_JAVA_OPTIONS='--module-path path1:path2' #linux
  -- set JDK_JAVA_OPTIONS='--module-path path1;path2' #windows
  -- or run java --module-path path classfile
  -- all modules (jar files) on path(s) will be loaded

  method RxModPath()
    if module_path == null then return
    
    seen = ''
    mpath = module_path
    psep=System.getProperty("path.separator") -- : or ;
    loop forever
      parse mpath mp (psep) mpath
      if mp == '' then leave
      p = Paths.get(URI.create('file://'||mp))
      mod_finder = ModuleFinder.of([p])       
      mod_ref = mod_finder.findAll()
      i = mod_ref.iterator()     
      loop while i.hasNext()
         mod = ModuleReference i.next()
         zfile = String mod.location.get().toString()
         d = mod.descriptor()
         jar = zfile.substring(zfile.lastindexof('/')+1)
         if opt_module then do
            say 'Module: 'd.name' from 'jar
         end      
         j = d.exports().iterator()
         loop while j.hasNext()
            mdexp = ModuleDescriptor.Exports j.next()
            if \mdexp.isQualified() then do 
               pack = mdexp.source()
               seen[pack] = 1
               if opt_package then do
                  say '  'pack
               end
               else if \opt_module then do   
                  say '/'jar'/'d.name'/'pack
               end   
            end   
         end
         j = d.exports().iterator()
         loop while j.hasNext()
            mdexp = ModuleDescriptor.Exports j.next()
            if mdexp.isQualified() then do 
               pack = mdexp.source()
               seen[pack] = 1
               if opt_package then do
                  say '  'pack' \tqualified to 'mdexp.targets()
               end
               else if \opt_module then do   
                  say '/'jar'/'d.name'/'pack' \tqualified to 'mdexp.targets()
               end   
            end   
         end
         j = d.packages().iterator()
         loop while j.hasNext()
            pack = String j.next()
            if seen[pack] \= 1 then do
               if opt_package then do
                  say '  'pack' \tprivate'
               end
               else if \opt_module then do   
                  say '/'jar'/'d.name'/'pack' \tprivate'
               end   
            end   
         end

      end
    end
    return 


-- walk the file system directory tree

  method RxJrtTree(path_ = '')
    dpath = path_
    do
      p = Paths.get(URI.create(jrtprefix||dpath))

      if \Files.isDirectory(p, [LinkOption null]) then return 

      stream = Files.list(p)
      ap = Object[]
      ap = stream.toArray()

      loop i = 0 to ap.length-1
        tp = Path ap[i]
        if Files.isDirectory(tp, [LinkOption null]) then do
          s = tp.toString()
          parse s '/modules/' module '/' package
          package = package.translate('.', fsep)
          if opt_module then do
            if package = '' then do
              say 'Module: 'module
            end
            else if opt_package then do
              say '  'package
            end
          end
          else do
            say s
          end  
       
          RxJrtTree(s.substring(9))                     -- strip /modules/ and call recursive
        end
        else do
          if opt_all then do
            say tp.toString
          end
        end
      end     
    catch e=Exception
      say '! exception' e e.getMessage()
    end
  return 


