numeric digits 64

class MapMandelbrotSet public extends Thread implements Chaos

  properties  public
  uview    = UnivViewPort
  x0       = double 0.0
  y0       = double 0.0
  left     = double
  right    = double
  top      = double
  bottom   = double
  width    = int
  height   = int
  
  method main( args=String[] ) static 
    l = -1.0
    r = +2.0
    t = +1.0
    b = -1.0
    w = 400
    h = 300
    
    MapMandelbrotSet(l, r, t, b, w, h)
    
    
  method run()
    calcMandelbrotSet()
    
    -- Chaos implementors
    
    -- initial
  method Init(l, r, t, b, w, h, re, im)
    MapMandelbrotSet(l, r, t, b, w, h)
    
    -- zoom in
  method Zoom(l, r, t, b, uv = UnivViewPort)
    MapMandelbrotSet(l, r, t, b, uv)
    
    -- resize
  method Resize(w , h , uv = UnivViewPort)
    uv.view.animating = 0          -- stop possible animation
    MapMandelbrotSet(w , h , uv)
    
    --animate
  method Animate()
    uview.view.animate()
    
    -- flip mandelbrot-julia set
  method Flip()
    parse uview.view.panel.zframe.getCrosshair() re im
    MapJuliaSet(uview.left, uview.right, uview.top, uview.bottom, uview.view.width, uview.view.height, re, im)
    
    
    -- initial
  method MapMandelbrotSet(l, r, t, b, w, h)
    say 'Mapping mandelbrot ' l  r  t  b w h
    left   = l
    right  = r   
    top    = t   
    bottom = b
    width  = w  
    height = h
    
    uview = UnivViewPort(l, r, t, b, width, height)
    uview.map = this
    
    this.start()
    
    -- zoom in
  method MapMandelbrotSet(l, r, t, b, uv = UnivViewPort)
    say 'Remapping mandelbrot 'l r t b uv.depth'#'
    width  = uv.view.width  
    height = uv.view.height
    
    left   = l
    right  = r   
    top    = t   
    bottom = b
    
    uview  = uv
    uview.left   = left
    uview.right  = right
    uview.top    = top
    uview.bottom = bottom
    
    this.start()
    
    -- resize
  method MapMandelbrotSet(w , h , uv = UnivViewPort)
    say 'Remapping mandelbrot 'uv.left uv.right uv.top uv.bottom w h uv.depth'#'
    width  = w  
    height = h
    
    
    uview = uv
    left   = uv.left
    right  = uv.right   
    top    = uv.top   
    bottom = uv.bottom
    
    this.start()
    
    
  method CalcMandelbrotSet()
    say 'thread 'Thread.currentThread().getName()' started'
    uview.view.iFrame.animate.setEnabled(0)
    uview.runningThreads = uview.runningThreads + 1
    loop while uview.runningThreads > 1         -- make sure only one tread is running per universal view
      date('C')                                 -- waiting for the loop below to leave and decrease counter
    end
    
    dxPix = double
    dyPix = double
    
    dxPix = (right - left) / width
    dyPix = (top - bottom) / height
    
    x0 = 0.0 
    y0 = 0.0
    
    y = double
    x = double
    y = bottom
    loop label outerloop for height
      x = left
      loop for width
        i = MandelbrotCompute(x, y)
        uview.UnivSetPoint(x, y, i)
        x = x + dxPix
        if uview.runningThreads > 1 then leave outerloop
      end
      y = y + dyPix
    end
    
    uview.runningThreads = uview.runningThreads - 1       -- decrease
    if uview.runningThreads == 0 then uview.view.iFrame.animate.setEnabled(1)
    
    say 'thread 'Thread.currentThread().getName()' done'
    
    
  method MandelbrotCompute(cReal = double, cImaginary = double)  binary
    i = 0
    
    maxIteration = uview.depth
    
    y = double
    x = double
    xSq = double
    ySq = double
    dSq = double
    
    x = x0
    y = y0
    xSq = x * x
    ySq = y * y	
    dSq = xSq + ySq
    loop forever
      i = i + 1
      y = x * y
      y = y + y - cImaginary
      x = xSq - ySq - cReal
      
      xSq = x * x
      ySq = y * y
      dSq = xSq + ySq
      
      if i > maxIteration then do
        i = 0
        leave
      end	 
      if dSq > 100.0 then do
        leave
      end
    end
    return i   
    	 
