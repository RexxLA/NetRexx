.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refkinst.Keyword Instructions
.ty Page &refkinst.: Keyword instructions
.pi /Instructions
.pi /Instructions/keyword
.pi /Keywords/mixed case
.pi /Keyword instructions
:p.A :i.keyword instruction:ei. is one or more clauses, the first of
which starts with a keyword that identifies the instruction.
Some keyword instructions affect the flow of control; the remainder
just provide services to the programmer.
Some keyword instructions (:kw.do:ekw., :kw.if:ekw., :kw.loop:ekw., or
:kw.select:ekw.) can include nested instructions.
.* .pi /Example/program
:a id=refappa.Appendix A:ea. includes an example of a NetRexx program
using many of the instructions available.
:p.As can be deduced from the syntax rules described earlier, a keyword
instruction is recognized :hp2.only:ehp2. if its keyword is the first
token in a clause, and if the second token is not an :q.:hp4.=:ehp4.:eq.
character (implying an assignment).
It would also not be recognized if the second token started
with :q.:hp4.(:ehp4.:eq., :q.:hp4.&lbrk.:ehp4.:eq.,
or :q.:hp4..:ehp4.:eq. (implying that the first token starts a term).
.* [%book
.* .pi /THEN/as free standing clause
.* :fn.The keyword :kw.then:ekw. may also be recognized in the body of an
.* :kw.if:ekw. or :kw.when:ekw. clause.
.* :efn.
.* ]]
:p.Further, if a current local variable, method argument, or property
has the same name as a keyword then the keyword will not be recognized.
This important rule allows NetRexx to be extended with new keywords in
the future without invalidating existing programs.
:p.
Thus, for example, this sequence in a program with no :hp4.say:ehp4.
variable:
:xmp.
say 'Hello'
say('1')
say=3
say 'Hello'
:exmp.
:pc.would be a :kw.say:ekw. instruction, a call to some :hp4.say:ehp4.
method, an assignment to a :hp4.say:ehp4. variable, and an error.
:p.In NetRexx, therefore, keywords are not reserved; they may be used as
the names of variables (though this is not recommended, where known in
advance).
.pi /Sub-keywords
:p.Certain other keywords, known as :i.sub-keywords:ei., may be
known within the clauses of individual instructions &dash. for
example, the symbols :kw.to:ekw. and :kw.while:ekw. in the :kw.loop:ekw.
instruction.  Again, these are not reserved; if they had been used as
names of variables, they would not be recognized as sub-keywords.
.* (For details, refer to the description of each instruction.)
:p.Blanks adjacent to keywords have no effect other than that of
separating the keyword from the subsequent token.
For example, this applies to the blanks next to the sub-keyword
:kw.while:ekw. in
:xmp.
loop  while  a=3
:exmp.
:pc.Here at least one blank was required to separate the symbols
forming the keywords and the variable name, :hp4.a:ehp4..  However the
blank following the :kw.while:ekw. is not necessary in
:xmp.
loop while 'Me'=a
:exmp.
:pc.though it does aid readability.
.cp 25
