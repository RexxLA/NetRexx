.* ------------------------------------------------------------------
.* NetRexx Part 1 Concepts                                       mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=reflangco.Language concepts
.* Language stuff
.pi /NetRexx/language concepts
.pi /Language concepts
.pi /Philosophy of NetRexx
:p.
As described in the last section, NetRexx was created by applying the
philosophy of the Rexx language to the semantics required for
programming the Java Virtual Machine (JVM).  Despite the assumption that
the JVM is a :q.target environment:eq. for NetRexx, it is intended that
the language not be environment-dependent; the essentials of the
language do not depend on the JVM.  Environment-dependent details, such
as the primitive types supported, are not part of the language
specification.
:p.
The primary concepts of Rexx have been described before, in :cit.The
Rexx Language:ecit., but it is worth repeating them and also indicating
where modifications and additions have been necessary to support the
concepts of statically-typed and object-oriented environments.  The
remainder of this section is therefore a summary of the principal
concepts of NetRexx.
.*
.cp 5;.* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:h4.Readability
.pi /Style, programming
.pi /Programming style
.pi /Readability, of programs
.pi /Legibility, perceived
.pi /Perceived legibility
:p.One concept was central to the evolution of Rexx syntax, and hence
NetRexx syntax: :hp1.readability:ehp1. (used here in the sense of
perceived legibility).
Readability in this sense is a somewhat subjective quality, but the
general principle followed is that the tokens which form a program can
be written much as one might write them in Western European
languages (English, French, and so forth).
Although NetRexx is more formal than a natural language, its syntax is
lexically similar to everyday text.
:p.The structure of the syntax means that the language is readily
adapted to a variety of programming styles and layouts.
This helps satisfy user preferences and allows a lexical familiarity
that also increases readability.
Good readability leads to enhanced understandability, thus yielding
fewer errors both while writing a program and while reading it for
information, debugging, or maintenance.
Important factors here are:
:ol.
:li.
Punctuation and other special notations
.pi /Punctuation, optional
are required only when
absolutely necessary to remove ambiguity (though punctuation may often
be added according to personal preference, so long as it is
syntactically correct).  Where notations are used, they follow
established conventions.
:li.
The language is essentially case-insensitive.
.pi /Case/insensitivity to
A NetRexx programmer
may choose a style of use of uppercase and lowercase letters that he or
she finds most helpful (rather than a style chosen by some other
programmer).
:li.
The classical constructs of structured and object-oriented programming
.pi /Structured programming concepts
.pi /Object-oriented programming concepts
are available in NetRexx, and can undoubtedly lead to programs that are
easier to read than they might otherwise be.
The simplicity and small number of constructs also make NetRexx an
excellent language for teaching the concepts of good structure.
:li.
Loose binding between the physical lines in a program and the syntax of
the language ensures that even though programs are affected by line
ends, they are not irrevocably so.  A clause may be spread over several
lines or put on just one line; this flexibility helps a programmer lay
out the program in the style felt to be most readable.
:eol.
.cp 5;.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:h4.Natural data typing and decimal arithmetic
.pi /Natural data typing
.pi /Data/type checking
.pi /Datatypes
.pi /Strong typing
.pi /Decimal/arithmetic
.pi /Precision/arbitrary
:p.:q.Strong typing:eq., in which the values that a variable may take
are tightly constrained, has been an attribute of some languages
for many years.
The greatest advantage of strong typing is for the interfaces between
program modules, where errors are easy to introduce and difficult to
catch.
Errors :hp1.within:ehp1. modules that would be detected by strong
typing (and which would not be detected from context) are much rarer,
certainly when compared with design errors, and in the majority of
cases do not justify the added program complexity.
:p.
NetRexx, therefore, treats types as unobtrusively as possible, with a
simple syntax for type description which makes it easy to make types
explicit at interfaces (for example, when describing the arguments to
methods).
:p.
By default, common values (identifiers, numbers, and so on) are
described in the form of the symbolic notation (strings of characters)
that a user would normally write to represent those values.
This natural datatype for values also supports decimal arithmetic for
numbers, so, from the user's perspective, numbers look like and are
manipulated as strings, just as they would be in everyday use on paper.
:p.
When dealing with values in this way, no internal or machine
representation of characters or numbers is exposed in the language, and
so the need for many data types is reduced.
There are, for example, no fundamentally different concepts of
:hp1.integer:ehp1. and :hp1.real:ehp1.; there is just the single
concept of :hp1.number:ehp1..
The results of all operations have a defined symbolic representation,
and will therefore act consistently and predictably for every correct
implementation.
:p.
This concept also underlies the BASIC
.pi /BASIC, programming language
:fn.
Kemeny, J. G. and Kurtz, T. E., :hp2.BASIC programming:ehp2.,
John Wiley & Sons Inc., New York, 1967.
:efn.
language; indeed, Kemeny and Kurtz's vision for BASIC included many of
the fundamental principles that inspired Rexx.  For example, Thomas E.
Kurtz wrote:
[%book
.sk 0.6;.in +8mm;.ir +8mm
]]
[%www
:quote.
]]
[%odt
:quote.
]]
:q.Regarding variable types, we felt that a distinction
between &osq.fixed&csq. and &osq.floating&csq. was less justified in
1964 than earlier ... to our potential audience the distinction between
an integer number and a non-integer number would seem esoteric.
A number is a number is a number.:eq.
:fn.
Kurtz, T. E., :hp2.BASIC:ehp2. :hp1.in:ehp1. Wexelblat, R. L. (Ed),
:hp2.History of Programming Languages:ehp2., ISBN 0-12-745040-8,
Academic Press, New York 1981.
:efn.
[%book
.ir -8mm;.in -8mm;.sk 0.6
]]
[%www
:equote.
]]
[%odt
:equote.
]]
:pc.For Rexx, intended as a scripting language, this approach was ideal;
symbolic operations were all that were necessary.
:p.
For NetRexx, however, it is recognized that for some applications it
is necessary to take full advantage of the performance of the
underlying environment, and so the language allows for the use and
specification of binary arithmetic and types, if available.
A very simple mechanism (declaring a class or method to be
:hp1.binary:ehp1.) is
provided to indicate to the language processor that binary arithmetic
and types are to be used where applicable.  In this case, as in other
languages, extra care has to be taken by the programmer to avoid
exceeding limits of number size and so on.
.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.cp 5
:h4.Emphasis on symbolic manipulation
.pi /Symbolic manipulation
:p.Many values that NetRexx manipulates are (from the user's point of
view, at least) in the form of strings of characters.
Productivity is greatly enhanced if these strings can be handled
as easily as manipulating words on a page or in a text editor.
NetRexx therefore has a rich set of character manipulation
operators and methods, which operate on values of type :hp4.Rexx:ehp4.
(the name of the class of NetRexx strings).
:p.
Concatenation, the most common string operation, is treated
specially in NetRexx.
In addition to a conventional concatenate operator
(:q.:hp4.||:ehp4.:eq.), the novel :hp1.blank operator:ehp1. from Rexx
concatenates two data strings together with a blank in between.
Furthermore, if two syntactically distinct terms (such as a string and
a variable name) are abutted, then the data strings are concatenated
directly.
These operators make it especially easy to build up complex character
strings, and may at any time be combined with the other operators.
.cp 5
:p.For example, the :kw.say:ekw. instruction consists of the keyword
:kw.say:ekw. followed by any expression.
In this instance of the instruction, if the variable :hp4.n:ehp4. has
the value :q.:hp4.6:ehp4.:eq. then
:xmp.
say 'Sorry,' n&z.100/50'% were rejected'
:exmp.
.cp 3
:pc.would display the string
:xmp.
Sorry, 12% were rejected
:exmp.
:pc.Concatenation has a lower priority than the arithmetic operators.
The order of evaluation of the expression is therefore first the
multiplication, then the division, then the concatenate-with-blank, and
finally the direct concatenation.
:p.Since the concatenation operators are distinct from the arithmetic
operators, very natural coercion (automatic conversion) between numbers
and character strings is possible.
Further, explicit type-casting (conversion of types) is effected by the
same operators, at the same priority, making for a very natural and
consistent syntax for changing the types of results.  For example,
:xmp.
i=int 100/7
:exmp.
:pc.would calculate the result of :hp4.100:ehp4. divided
by :hp4.7:ehp4., convert that result to an integer
(assuming :hp4.int:ehp4. describes an integer type) and then assign it to the
variable :hp4.i:ehp4..
.cp 5;.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:h4.Nothing to declare
.pi /Nothing to declare
.pi /Declarations/why optional in NetRexx
:p.
Consistent with the philosophy of simplicity, NetRexx does not require
that variables within methods be declared before use.  Only the
:hp1.properties:ehp1.
:fn.
Class variables and instance variables.
:efn.
of classes &dash. which may form part of their interface to other
classes &dash. need be listed formally.
:p.
Within methods, the type of variables is deduced statically from
context, which saves the programmer the menial task of stating the type
explicitly.  Of course, if preferred, variables may be listed and
assigned a type at the start of each method.
.cp 5;.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:h4.Environment independence
.pi /Environment, independence from
.pi /System independence
:p.The core NetRexx language is independent of both operating systems
and hardware.
NetRexx programs, though, must be able to interact with their
environment, which implies some dependence on that environment (for
example, binary representations of numbers may be required).  Certain
areas of the language are therefore described as being defined by the
environment.
:p.
Where environment-independence is defined, however, there may be a loss
of efficiency &dash. though this can usually be justified in view of the
simplicity and portability gained.
:p.
As an example, character string comparison in NetRexx is normally
independent of case and of leading and trailing blanks.
(The string :q._Yes_:eq. :hp1.means:ehp1. the same as :q.yes:eq. in
most applications.)
However, the influence of underlying hardware has often subtly affected
this kind of design decision, so that many languages only allow trailing
blanks but not leading blanks, and insist on exact case matching.
By contrast, NetRexx provides the human-oriented relaxed comparison for
strings as default, with optional :q.strict comparison:eq. operators.
.cp 5;.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:h4.Limited span syntactic units
.pi /Syntactic units
.pi /Error detection, localized
:p.The fundamental unit of syntax in the NetRexx language is the clause,
which is a piece of program text terminated by a semicolon (usually
implied by the end of a line).
The span of syntactic units is therefore small, usually one line or
less.
This means that the syntax parser in the language processor can rapidly
detect and locate errors, which in turn means that error messages can
be both precise and concise.
:p.It is difficult to provide good diagnostics for languages (such as
Pascal and its derivatives) that have large fundamental syntactic units.
For these languages, a small error can often have a major or
distributed effect on the parser, which can lead to multiple error
messages or even misleading error messages.
.cp 5;.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:h4.Dealing with reality
.pi /Dealing with reality
.pi /Reality, dealing with
.pi /Reliability, of a language
.pi /Tools, reliability of
:p.A computer language is a tool for use by real people to do real work.
Any tool must, above all, be reliable.
In the case of a language this means that it should do what the user
expects.
User expectations are generally based on prior experience, including
the use of various programming and natural languages, and on the human
ability to abstract and generalize.
:p.
.pi /Astonishment factor
It is difficult to define exactly how to meet user expectations, but it
helps to ask the question :q.Could there be a high :hp1.astonishment
factor:ehp1. associated with this feature?:eq..
If a feature, accidentally misused, gives apparently unpredictable
results, then it has a high astonishment factor and is therefore
undesirable.
:p.
.pi /Consistency
Another important attribute of a reliable software tool is
:hp1.consistency:ehp1..
A consistent language is by definition predictable and is often
elegant.
The danger here is to assume that because a rule is consistent and
easily described, it is therefore simple to understand.  Unfortunately,
some of the most elegant rules can lead to effects that are completely
alien to the intuition and expectations of a user who, after all, is
human.
:p.
.pi /Robustness
These constraints make programming language design more of an art than a
science, if the usability of the language is a primary goal.  The
problems are further compounded for NetRexx because the language is
suitable for both scripting (where rapid development and ease of use are
paramount) and for application development (where some programmers
prefer extensive checking and redundant coding).  These conflicting
goals are balanced in NetRexx by providing automatic handling of many
tasks (such as conversions between different representations of strings
and numbers) yet allowing for :q.strict:eq. options which, for example,
may require that all types be explicit, identifiers be identical in case
as well as spelling, and so on.
.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.cp 5
:h4.Be adaptable
.pi /Adaptability
:p.Wherever possible NetRexx allows for the extension of instructions
and other language constructs, building on the experience gained
with Rexx.
For example, there is a useful set of common characters available for
future use, since only small set is used for the few special
notations in the language.
:p.
Similarly, the rules for keyword recognition allow instructions to be
added whenever required without compromising the integrity of existing
programs.   There are :b.no:eb. reserved keywords in NetRexx;
variable names chosen by a programmer always take precedence over
recognition of keywords.  This ensures that NetRexx programs may
safely be executed, from source, at a time or place remote from their
original writing &dash. even if in the meantime new
keywords have been added to the language.
:p.
A language needs to be adaptable because :hp1.it certainly will be
used for applications not foreseen by the designer:ehp1..
Like all programming languages, NetRexx may (indeed, probably will)
prove inadequate for certain future applications; room for expansion and
change is included to make the language more adaptable and robust.
.cp 5;.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
:h4.Keep the language small
.pi /Size/of language
.pi ref /Size/Length
:p.
NetRexx is designed as a small language.  It is not the sum of all
the features of Rexx and of Java; rather, unnecessary features have been
omitted.
The intention has been to keep the language as small as possible, so
that users can rapidly grasp most of the language.
This means that:
:ul.
:li.the language appears less formidable to the new user
:li.documentation is smaller and simpler
:li.the experienced user can be aware of all the abilities of the
language, and so has the whole tool at his or her disposal
:li.there are few exceptions, special cases, or rarely used
embellishments
:li.the language is easier to implement.
:eul.
:p.
Many languages have accreted :q.neat:eq. features which make certain
algorithms easier to express; analysis shows that many of these are
rarely used.  As a rough rule-of-thumb, features that simply provided
alternative ways of writing code were added to Rexx and NetRexx only if
they were likely to be used more often than once in five thousand
clauses.
.*  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.cp 5
:h4.No defined size or shape limits
.pi /Limits of size
:p.The language does not define limits on the size or shape of any of
its tokens or data (although there may be implementation restrictions).
It does, however, define a few :hp1.minimum:ehp1. requirements that must
be satisfied by an implementation.
Wherever an implementation restriction has to be applied, it is
recommended that it should be of such a magnitude that few (if any)
users will be affected.
:p.
Where arbitrary implementation limits are necessary, the language
requires that the implementer use familiar and memorable decimal values
for the limits.  For example 250 would be used in preference to 255, 500
to 512, and so on.
.* There is no longer any advantage in forcing the artifacts of the binary
.* system onto a population that uses only the decimal system.
.* Only a tiny minority of future programmers will need to deal with
.* base-two-derived number systems.
.*
