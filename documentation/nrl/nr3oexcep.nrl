.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2003.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refoexcep.Exception and error handling
.pi /Overview/exceptions
.pi /Exceptions/overview
.* Converted 3 Sep 1996 10:36:11
:p.
NetRexx doesn't have a :kw.goto:ekw. instruction, but a :kw.signal:ekw.
instruction is provided for abnormal transfer of control, such as when
something unusual occurs.  Using :kw.signal:ekw. raises an
:hp1.exception:ehp1.; all control instructions are then :q.unwound:eq.
until the exception is caught by a control instruction that specifies a
suitable :kw.catch:ekw. instruction for handling the exception.
:p.
Exceptions are also raised when various errors occur, such as attempting
to divide a number by zero.  For example&colon.
.pi /Example/program
:xmp.
say 'Please enter a number&colon.'
number=ask
do
  say 'The reciprocal of' number 'is&colon.' 1/number
catch RuntimeException
  say 'Sorry, could not divide "'number'" into 1'
  say 'Please try again.'
end
:exmp.
:p.
Here, the :kw.catch:ekw. instruction will catch any exception that is
raised when the division is attempted (conversion error, divide by zero,
&etc.), and any instructions that follow it are then executed.  If no
exception is raised, the :kw.catch:ekw. instruction (and any
instructions that follow it) are ignored.
:p.
Any of the control instructions that end with :kw.end:ekw. (:kw.do:ekw.,
:kw.loop:ekw., or :kw.select:ekw.) may be modified with one or more
:kw.catch:ekw. instructions to handle exceptions.
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
