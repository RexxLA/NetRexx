.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refassign.Assignments and Variables
.pi /Instructions/assignment
.pi /Assignment
.pi ref /Equals sign/= equals sign
.pi /= equals sign/assignment indicator
.pi /Variables/setting new value
.pi /Variables/valid names
.pi /Variables
.pi /Symbols/use of
:p.A :i.variable:ei. is a named item whose value may be changed
during the course of execution of a NetRexx program.
The process of changing the value of a variable is called
:i.assigning:ei. a new value to it.
:p.
Each variable has an associated type, which cannot change during the
execution of a program; therefore, the values assigned to a given
variable must always have a type that can safely be assigned to that
variable.
.*
.pi /Symbols/assigning values to
.pi /Assignment/instruction
.pi /= equals sign/assignment indicator
.pi /Variables/setting new value
.pi /Names/of variables
.pi /Variables/valid names
.pi /Variables/names of
:p.Variables may be assigned a new value by the :kw.method:ekw. or
:kw.parse:ekw. instructions, but the most common way of changing the
value of a variable is by using an :i.assignment instruction:ei..
Any clause within a class and of the form:
.pi /Assignment
[%char
.bx left right
:xmp.
:hp1.assignment:ehp1.;

:hp0.where :hp1.assignment:ehp1. is::ehp0.

____:i.term:ei.=:i.expression:ei.
:exmp.
.bx off
]]
[%smff
.synass
]]
:pc.is taken to be an assignment instruction.
The result of the :hp1.expression:ehp1. becomes the new value of the
variable named by the :hp1.term:ehp1. to the left of the equals sign.
When the term is simply a symbol, this is called the :i.name:ei. of
the variable.
.cp 5;
:p.:hp2.Example::ehp2.
:xmp.
/&z. Next line gives FRED the value 'Frederic' &z./
fred='Frederic'
:exmp.
:pc.The symbol naming the variable cannot begin with a digit (0-9).
:fn.
Without this restriction on the first character of a variable name,
it would be possible to redefine a number, in that for example the
assignment :q.:hp4.3=4;:ehp4.:eq. would give a variable called
:q.:hp4.3:ehp4.:eq. the value :hp4.'4':ehp4..
:efn.
.*
:p.
Within a NetRexx program, variable names are not case-sensitive (for
example, the names :hp4.fred:ehp4., :hp4.Fred:ehp4., and :hp4.FRED:ehp4.
refer to the same variable).
Where public names are exposed (for example, the names of properties,
classes, and methods, and in cross-reference listings) the case used for
the name will be that used when the name was first introduced
(:q.first:eq. is determined statically by position in a program rather
than dynamically).
.*
:p.
.pi /Variables/type of
Similarly, the type of a NetRexx variable is determined by the type of
the value of the expression that is first assigned to it.
:fn.
Since NetRexx infers the type of a variable from usage, substantial
programs can be written without introducing explicit type
declarations, although these are allowed.
:efn.
For subsequent assignments, it is an error to assign a value to a
variable with a type mismatch unless the language processor can
determine that the value can be assigned safely to the type of the
variable.
:p.
In practice, this means that the types must match exactly, be a
simplification, or both be :q.well-known:eq. types such
as :hp4.Rexx:ehp4., :hp4.String:ehp4., :hp4.int:ehp4., &etc., for which
safe conversions are defined.  The possibilities are described in the
section on :a id=refconv.:hp1.Conversions:ehp1.:ea..
:fn.
Implementations may provide for a stricter rule for assignment (where
the types must be identical), controlled by the :kw.options:ekw.
instruction.
:efn.
.cp  7
:p.
For example, if there are types (classes)
called :hp4.ibm.util.hex:ehp4., :hp4.RunKnown:ehp4.,
and :hp4.Window:ehp4., then:
:xmp.
hexy=ibm.util.hex(3) -- 'hexy' has type 'ibm.util.hex'
rk=RunKnown()        -- 'rk' has type 'RunKnown'
fred=Window(10, 20)  -- 'fred' has type 'Window'
s="Los Lagos"        -- 's' has type 'Rexx'
j=5                  -- 'j' has type 'Rexx'
:exmp.
:p.
The first three examples invoke the :i.constructor:ei. method for the
type to construct a value (an object).  A constructor method always has
the same name as the class to which it belongs, and returns a new value
of that type.  Constructor methods are described in detail in
:a id=refmethcon.:hp1.Methods and Constructors:ehp1.:ea..
:p.
The last two examples above illustrate that, by default, the types of
literal strings and numbers are NetRexx strings (type :hp4.Rexx:ehp4.)
and so variables tend to be of type :hp4.Rexx:ehp4..
This simplifies the language and makes it easy to learn, as many useful
programs can be written solely using the powerful :hp4.Rexx:ehp4. type.
Potentially more efficient (though less human-oriented) primitive
or built-in types for literals will be used in :a id=refbincla.binary
classes:ea..
:p.:ri.If the examples above were in a binary class, then, in the
reference implementation, the types of :hp4.s:ehp4. and :hp4.j:ehp4.
would have been :hp4.java.lang.String:ehp4. and :hp4.int:ehp4.
respectively.
:eri.
:p.
.pi /Declarations/of variables
.pi /Types/declaring
A variable may be introduced (:q.declared:eq.) without giving it an
initial value by simply assigning a type to it:
:xmp.
i=int
r=Rexx
f=java.io.File
:exmp.
:pc.Here, the expression to the right of the :q.:hp4.=:ehp4.:eq. simply
evaluates to a type with no value.
.* - - - - - -
.cp 10
:h4.The use and scope of variables
:p.
NetRexx variables all follow the same rules of assignment, but are used
in different contexts.  These are:
:dl termhi=1.
.cp 5
:dt id=refprops.Properties
.pi /Properties
.pi /Variables/properties
:dd.
Variables which name the values (the data) owned by an object of the
type defined by the class are called :i.properties:ei..
When an object is constructed by the class, its properties are created
and are initialized to either a default value
(:hp4.null:ehp4. or, for variables of primitive type, an
implementation-defined value, typically 0)
or to a value provided by the programmer.
:p.
The attributes of properties can be changed by the
:a id=refprop.:kw.properties:ekw. instruction:ea..
For example, properties may also be :hp1.constant:ehp1., which means
that they are initialized when the class is first loaded and do not
change thereafter.
:dt.Method arguments
.pi /Method/argument variables
.pi /Variables/method arguments
:dd.
When a method is invoked, arguments may be passed to it.
These :i.method arguments:ei. are assigned to the variables named on
the :a id=refmethod.:kw.method:ekw. instruction:ea. that introduces the
method.
:dt.Local variables
.pi /Local variables
.pi /Variables/local
:dd.
Variables that are known only within a method are called :i.local
variables:ei.; each time a method is invoked a distinct set of local
variables is available.
Local variables are normally given an initial value by the programmer.
If they are not, they are initialized to a default value
(:hp4.null:ehp4. or, for variables of primitive type, an
implementation-defined value, typically 0).
:edl.
:p.
.pi /Variables/scope of
.pi /Variables/visibility
.pi /Variables/static typing of
.pi /Static variable typing
In order for types to be determined and type-checking to be possible at
:q.compile-time:eq., and easily determined by inspection, the use and
type of every variable is determined by its position in the program, not
by the order in which assignments are executed.
That is, variable typing is static.
:p.
The visibility of a variable depends on its use.  Properties are
visible to all methods in a class; method arguments and local variables
are only visible within the method in which they appear.  In particular:
:ul.
:li.Within a class, properties have unique names (they cannot be
overridden by method arguments or by local variables within
methods); this avoids error-prone ambiguity.
:li.
Within a method, a method argument acts like a local variable (that is,
it is in the same name-space as local variables, and can be assigned new
values); it can be considered to be a local variable that is assigned a
value just before the body of the method is executed.  There cannot be
both a method argument and a local variable in a method with the same
name.
:li.
Within methods, variables can take only one type, the type assigned to
them when first encountered in the method (in a strict :q.physical:eq.
sense, that is, as parsed from top to bottom of the program and from
left to right on each line).
Since methods tend to be small, there is no local scoping of variables
inside the constructs within a method.
:fn.
Unlike the block scoping of PL/I, C, or Java.
:efn.
:p.
Thus, in this example:
:xmp.
method iszero(x)
  if x=0 then qualifier='is zero'
         else qualifier='is not zero'
  say 'The argument' qualifier'.'
:exmp.
:pc.the variable :hp4.qualifier:ehp4. is known throughout the method and
hence has a known type and value when the :kw.say:ekw. instruction is
executed.
:eul.
:p.
To summarize: a symbol that names a variable in the current class either
refers to a property (and in any use of it within the class refers to
that property), or it refers to a variable that is unique within a
method (and any use of the name within that method refers to the same
variable).
.*
:note.
A variable is just a name, or :q.handle:eq. for a value.
It is possible for more than one variable to refer to the same value, as
in the program:
:xmp.
first='A string'
second=first
:exmp.
:pc.Here, both variables refer to the same value.  If that value is
changeable then a change to the value referred to by one of the
variable names would also be seen if the value is referred to by the
other.
For example, sub-values of a NetRexx string can be changed, using
:a id=refinstr.:hp1.Indexed references:ehp1.:ea., so a change to a
sub-value of :hp4.first:ehp4. would also be seen in an identical indexed
reference to :hp4.second:ehp4..
.* - - - - - -
.cp 10
:h4.Terms on the left of assignments
.pi /Terms/in assignments
.pi /Terms/on left of =
:p.
In an assignment instruction, the :hp1.term:ehp1. to the left of the
equals sign is most commonly a simple non-numeric symbol, which
always names a variable in the current class.
The other possibilities, as seen in the example below, are:
:ol.
:li.
The term is an :a id=refinstr.:hp1.indexed reference:ehp1.:ea., to an
existing variable that refers to a string of type :hp4.Rexx:ehp4. or an
:a id=refarray.array:ea..
The variable may be in the current class, or be a property in a class
named in the :kw.uses:ekw. phrase of the :kw.class:ekw. instruction for
the current class.
:li.
The term is a :a id=refcomterm.compound term:ea. that ultimately refers
to a property (see above) in some class (which may be the current class).
This property cannot be a constant.
:eol.
.cp 9
:p.:hp2.Examples::ehp2.
:xmp.
r=Rexx ''
r&lbrk.'foo'&rbrk.='?'         -- indexed string assignment
s=String&lbrk.3&rbrk.
s&lbrk.0&rbrk.='test'          -- array assignment
Sample.value=1       -- property assignment
this.value=1         -- property assignment
super.value=1        -- property assignment
:exmp.
:pc.
The last two examples show assignments to a property in the current
class or in a superclass of the current class, respectively.  Note that
references to properties in other classes must alway be qualified in
some way (for example, by the prefix :hp4.super.:ehp4.).  The use of the
prefix :hp4.this.:ehp4. for properties in the current class is optional.
.* - - - - -
.cp 40
