.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refexpr.Expressions and Operators
.pi /Terms
.pi /Data/terms
.pi /Substitution/in expressions
:p.Many clauses can include :i.expressions:ei..  Expressions in NetRexx
are a general mechanism for combining one or more data items in various
ways to produce a result, usually different from the original data.
.pi /Dyadic operators
.pi /Prefix operators
.pi /Monadic (prefix) operators
.pi /Operators
:p.Expressions consist of one or more :a id=refterms.terms:ea., such as
literal strings, symbols, method calls, or sub-expressions,
and zero or more :i.operators:ei. that denote operations to be carried
out on terms.
Most operators act on two terms, and there will be at least one of these
:i.dyadic:ei. operators between every pair of terms.
:fn.
One operator, direct concatenation, is implied if two terms
:a id=refabut.abut:ea..
:efn.
There are also :i.prefix:ei. (monadic) operators, that act on the
term that is immediately to the right of the operator.
There may be one or more prefix operators to the left of any term,
provided that adjacent prefix operators are different.
.pi /Expressions/evaluation
.pi /Expressions/results of
.pi /Evaluation/of expressions
.pi /Parentheses/in expressions
:p.Evaluation of an expression is left to right, modified by parentheses
and by :a id=refpreced.operator precedence:ea. in the usual
:q.algebraic:eq. manner.
Expressions are wholly evaluated, except when an error occurs during
evaluation.
.pi /Results/size of
.pi /Data/length of
.pi /Types/of values
.pi /Types/of terms
.pi /Data/type checking
.pi /Datatypes
:p.As each term is used in an expression, it is evaluated as
appropriate and its value (and the type of that value) are determined.
:p.
The result of any operation is also a value, which may be a character
string, a data object of some other type, or (in special circumstances)
a binary representation of a character or number.  The type of the
result is well-defined, and depends on the types of any terms involved
in an operation and the operation carried out.
Consequently, the result of evaluating any expression is a value which
has a known type.
:p.
Note that the NetRexx language imposes no restriction on the maximum
size of results, but there will usually be some practical limitation
dependent upon the amount of storage and other resources available
during execution.
.*
.cp 10
:h3 id=refops.Operators
.pi /Operators/composition of
:p.The operators in NetRexx are constructed from one or more
:a id=refopers.operator characters:ea..
Blanks (and comments) adjacent to operator characters have no effect on
the operator, and so the operators constructed from more than one
character may have embedded blanks and comments.
In addition, blank characters, where they occur between tokens within
expressions but are not adjacent to another operator, also act as an
operator.
:p.The operators may be subdivided into five groups: concatenation,
arithmetic, comparative, logical, and type operators.  The first four
groups work with terms whose type is :q.well-known:eq. (that is,
strings, or known types that can be be converted to strings without
information loss).  The operations in these groups are defined in terms
of their operations on strings.
:dl termhi=3.
.cp 8
:dt.Concatenation
.pi /Operators/concatenation
.pi /Concatenation/of strings
.pi /Blank/as concatenation operator
.pi /Blank/operator
.pi /Operators/blank
.pi /Strings/concatenation of
.pi /|| concatenation operator
:dd.
The concatenation operators are used to combine two strings to form
one string by appending the second string to the right-hand end of the
first string.  The concatenation may occur with or without an
intervening blank:
:dl tsize=22mm termhi=4.
:dt.(blank)
:dd.Concatenate terms with one blank in between.
:dt.&vbar.&vbar.
:dd.Concatenate without an intervening blank.
:dt id=refabut.(abuttal)
:dd.Concatenate without an intervening blank.
:edl.
.pi /Abuttal concatenation operator
:p.Concatenation without a blank may be forced by using
the :hp4.&vbar.&vbar.:ehp4. operator, but it is useful to remember that
when two terms are adjacent and are not separated by an operator,
:fn.
This can occur when the terms are syntactically distinct (such as a
literal string and a symbol).
:efn.
they will be concatenated in the same way.
This is the :i.abuttal:ei. operation.
For example, if the variable :hp4.Total:ehp4. had the
value :hp4.'37.4':ehp4., then :hp4.Total'%':ehp4. would evaluate
to :hp4.'37.4%':ehp4..
:p.Values that are not strings are first converted to strings before
concatenation.
.cp 8;
:dt.Arithmetic
.pi /Operators/arithmetic
.pi /Numbers/arithmetic on
.pi /Arithmetic/operators
.pi /Addition;.pi /Subtraction;.pi /Multiplication;.pi /Division
.pi /Negation/of numbers
.pi /Remainder operator;.pi /Integer division;.pi /Exponentiation
.pi /Power operator
.pi /+ plus sign/addition operator
.* .pi key /+- Sub/z/z/ /- subtraction operator
.pi /&idash. minus sign/subtraction operator
.pi /* multiplication operator
.pi ?/ division operator
.pi ?% integer division operator
.pi ?// remainder operator
.pi ?** power operator
.pi /Prefix operators/+
.pi /Prefix operators/-
:dd.
Character strings that are :a id=refnumdef.numbers:ea.
may be combined using the arithmetic operators:
:dl tsize=22mm termhi=4.
:dt.+
:dd.Add.
:dt.-
:dd.Subtract.
:dt.*
:dd.Multiply.
:dt./
:dd.Divide.
:dt.%
:dd.Integer divide.
:br.
Divide and return the integer part of the result.
:dt.//
:dd.Remainder.
:br.
Divide and return the remainder (this is not modulo, as the result
may be negative).
:dt.**
:dd.Power.
:br.
Raise a number to a whole number power.
:dt.Prefix -
:dd.Same as the subtraction: :q.:hp4.0-:ehp4.number:eq..
:dt.Prefix +
:dd.Same as the addition: :q.:hp4.0+:ehp4.number:eq..
:edl.
:pc.The section on :a id=refnums.:hp1.Numbers and Arithmetic:ehp1.:ea.
describes numeric precision, the format of valid numbers, and the
operation rules for arithmetic.  Note that if an arithmetic result is
shown in exponential notation, then it is likely that rounding has
occurred.
:p.
In :a id=refbincla.binary classes:ea., the arithmetic operators will use
binary arithmetic if both terms involved have values which are binary
numbers.
The section on :a id=refbinary.:hp1.Binary values and operations:ehp1.:ea.
describes binary arithmetic.
.cp 8;
:dt id=refcomps.Comparative
.pi /Operators/comparative
.pi /Comparative operators
.pi /Comparison/of numbers
.pi /Comparison/of strings and numbers
.pi /Strict comparative operators
.pi /Normal comparative operators
.pi /Numbers/comparison of
.pi /Strings/comparison of
.pi /Equality/testing of
.pi /Inequality, testing of
:dd.
The comparative operators compare two terms and return the
value :hp4.'1':ehp4. if the result of the comparison is true,
or :hp4.'0':ehp4. otherwise.  Two sets of operators are defined: the
:i.strict:ei. comparisons and the :i.normal:ei. comparisons.
:p.The strict comparative operators all have one of the characters
defining the operator doubled.  The :q.:hp4.==:ehp4.:eq.,
and :q.:hp4.&bslash.==:ehp4.:eq. operators
test for strict equality or inequality between two strings.
Two strings must be identical to be considered strictly equal.
Similarly, the other strict comparative operators (such as
:q.:hp4.>>:ehp4.:eq. or :q.:hp4.<<:ehp4.:eq.) carry out a simple
left-to-right character-by-character comparison, with no padding of
either of the strings being compared.
If one string is shorter than, and is a leading sub-string of, another
then it is smaller (less than) the other.
Strict comparison operations are case sensitive, and the exact collating
order may depend on the character set used for the implementation.
:fn.
For example, in an ASCII or Unicode environment, the digits 0-9
are lower than the alphabetics, and lowercase alphabetics are higher
than uppercase alphabetics.
In an EBCDIC environment, lowercase alphabetics precede uppercase, but
the digits are higher than all the alphabetics.
:efn.
:p.For all the other comparative operators, if :hp2.both:ehp2. the
terms involved are numeric,
:fn.
That is, if they can be compared numerically without error.
:efn.
a numeric comparison (in which leading zeros are ignored,
&etc.) is effected; otherwise, both terms are treated as character
strings.
For this character string comparison, leading and trailing blanks are
ignored, and then the shorter string is padded with blanks on the right.
The character comparison operation takes place from left to right, and
is :hp2.not:ehp2. case sensitive (that is, :q.:hp4.Yes:ehp4.:eq.
compares equal to :q.:hp4.yes:ehp4.:eq.).
As for strict comparisons, the exact collating order may depend on the
character set used for the implementation.
.cp 5
:p.The comparative operators return true (:hp4.'1':ehp4.) if the terms
are:
:p.:hp2.Normal:ehp2. comparative operators:
:dl tsize=29mm termhi=4.
.pi /= equals sign/equal operator
.pi '&bslash.= not equal operator
.pi '>< greater than or less than operator
.pi '<> less than or greater than operator
.pi '> greater than operator
.pi '< less than operator
.pi '>= greater than or equal operator
.pi '<= less than or equal operator
.pi '&bslash.> not greater than operator
.pi '&bslash.< not less than operator
:dt.=
:dd.Equal (numerically or when padded, &etc.).
:dt.&bslash.=
:dd.Not equal (inverse of =).
:dt.>
:dd.Greater than.
:dt.<
:dd.Less than.
:dt.><, <>
:dd.Greater than or less than (same as :q.Not equal:eq.).
:dt.>=, &bslash.<
:dd.Greater than or equal to, not less than.
:dt.<=, &bslash.>
:dd.Less than or equal to, not greater than.
:edl.
.*
.pi '== strictly equal operator
.pi '&bslash.== strictly not equal operator
.pi '>> strictly greater than operator
.pi '<< strictly less than operator
.pi '>>= strictly greater than or equal operator
.pi '<<= strictly less than or equal operator
.pi '&bslash.>> strictly not greater than operator
.pi '&bslash.<< strictly not less than operator
:p.:hp2.Strict:ehp2. comparative operators:
:dl tsize=29mm termhi=4.
:dt.==
:dd.Strictly equal (identical).
:dt.&bslash.==
:dd.Strictly not equal (inverse of :hp4.==:ehp4.).
:dt.>>
:dd.Strictly greater than.
:dt.<<
:dd.Strictly less than.
:dt.>>=, &bslash.<<
:dd.Strictly greater than or equal to, strictly not less than.
:dt.<<=, &bslash.>>
:dd.Strictly less than or equal to, strictly not greater than.
:edl.
:p.
.pi /Objects/comparing
.pi /Objects/equality
.pi /Equality/of objects
.pi /= equals sign/equal operator
.pi /&bslash.= not equal operator
The equal and not equal operators (:q.:hp4.=:ehp4.:eq.,
:q.:hp4.==:ehp4.:eq., :q.:hp4.&bslash.=:ehp4.:eq., and
:q.:hp4.&bslash.==:ehp4.:eq.) may be used to compare two objects which
are not strings for equality, if the implementation allows them to be
compared (usually they will need to be of the same type).  The strict
operators test whether the two objects are in fact the same object,
:fn.
Note that two distinct objects compared in this way may contain values
(properties) that are identical, yet they will not compare equal as they
are not the same object.
:efn.
and the normal operators may provide a more relaxed comparison, if
available to the implementation.
:fn.
:ri.In the reference implementation, the :hp4.equals:ehp4. method is
used for normal comparisons.  Where not provided by a type, this is
implemented by the Object class as a strict comparison.:eri.
:efn.
:p.
In :a id=refbincla.binary classes:ea., all the comparative operators
will use binary arithmetic to effect the comparison if both terms
involved have values which are binary numbers.
In this case, there is no distinction between the strict and the normal
comparative operators.
The section on :a id=refbinary.:hp1.Binary values and operations:ehp1.:ea.
describes the binary arithmetic used for comparisons.
.* - - - - -
.cp 8
:dt.Logical (Boolean)
.pi /Operators/logical
.pi /Boolean operations
.pi /AND/logical operator
.pi /OR/logical inclusive
.pi /OR/logical exclusive
.pi /XOR, logical operator
.pi /Exclusive OR/logical operator
.pi ref /Inclusive OR operator/OR logical operator
.pi /NOT operator
.pi /Negation/of logical values
.pi /Logical operations
.pi /&amp. and operator
.pi /| or operator
.pi /&amp.&amp. exclusive or operator
.pi /&bslash. backslash/not operator
.pi /Backslash character/not operator
.pi /Prefix operators/&bslash.
.pi /True value
.pi /False value
:dd.
A character string is taken to have the value :q.false:eq. if it
is :hp4.'0':ehp4., and :q.true:eq. if it is :hp4.'1':ehp4..
The logical operators take one or two such values (values other
than :hp4.'0':ehp4. or :hp4.'1':ehp4. are not allowed) and
return :hp4.'0':ehp4. or :hp4.'1':ehp4. as appropriate:
:dl tsize=29mm termhi=4.
:dt.&
:dd.And.
:br.
Returns 1 if both terms are true.
:dt.&vbar.
:dd.Inclusive or.
:br.
Returns 1 if either term is true.
:dt.&amp.&amp.
:dd.Exclusive or.
:br.
Returns 1 if either (but not both) is true.
:dt.Prefix &bslash.
:dd.Logical not.
:br.
Negates; 1 becomes 0 and :hp1.vice versa:ehp1..
:edl.
:p.
.pi /Bits/binary operators
In :a id=refbincla.binary classes:ea., the logical operators will act on
all bits in the values if both terms involved have values which are
boolean or integers.
The section on :a id=refbinary.:hp1.Binary values and
operations:ehp1.:ea. describes this in more detail.
.* - - - - -
.cp 8
:dt id=reftypeops.Type
.pi /Operators/type
.pi /Types/operations on
.pi /Types/checking instances of
:dd.
Several of the operators already described can be used to carry out
operations related to types.  Specifically:
:ul.
.pi /Concatenation/of types
.pi /Casting/to type
.pi /Blank/as type conversion operator
.pi /Blank/operator
.pi /Operators/blank
.pi /Types/concatenation of
.pi /|| concatenation operator
.pi /Abuttal concatenation operator
:li.Any of the concatenation operators may be used for :i.type
concatenation:ei., which concatenates a type to a value.  All three
operators (blank, :q.:hp4.&vbar.&vbar.:ehp4.:eq., and abuttal) have the same
effect, which is to :a id=refconv.convert:ea.
:fn.
This is sometimes known as :hp1.casting:ehp1.
:efn.
the value to the type
specified (if the conversion is not possible, an error is reported or an
exception is signalled).
The type must be on the left-hand side of the operator.
.cp 7
:p.:hp2.Examples::ehp2.
:xmp.
String "abc"
int (a+1)
long 1
Exception e
InputStream myfile
:exmp.
.*
:li.
.pi /Prefix operators/+/with types
.pi /Prefix operators/-/with types
.pi /Prefix operators/&bslash./with types
A type on the left hand side of an operator that could be a prefix
operator (:m.+:em., :m.-:em., or :m.\:em.) is assumed to imply
type concatenation after the prefix operator is applied to the
right-hand operand, as though an explicit concatenation operator were
placed before the prefix operator.
.cp 5
:p keep.
For example:
:xmp.
x=int -y
:exmp.
:pc.means that :m.-y:em. is evaluated, and then the result is
converted to :m.int:em. before being assigned to :m.x:em..
:fn.
This could also have been written :m.x=int (-y):em..
.* avoid being treated as subtracting :m.y:em. from the type :m.int:em.
.*(which is not possible).
:efn.
.*
:li.
.pi '>= greater than or equal operator'on types
.pi '<= less than or equal operator'on types
The :q.less than or equal:eq. and the :q.greater than or equal:eq.
operators (:q.:hp4.<=:ehp4.:eq. and :q.:hp4.>=:ehp4.:eq.) may be used
with a type on either side of the operator, or on both sides.
In this case, they test whether a value or type is a subclass of, or is
the same as, a type, or vice versa.
.cp 5
:p.:hp2.Examples::ehp2.
:xmp.
if i<=Object then say 'I is an Object'
if String>=i then say 'I is a String'
if String<=Object then say 'String is an Object'
:exmp.
:eul.
.* - - - - -
:pc.The precedence of these operators is not affected by their being
used with types as operands.
:edl.
.* - - - - -
.cp 15
:h3 id=refnumdef.Numbers
.pi /Numbers
.pi /Exponential notation
.pi /E-notation
.pi /Powers of ten in numbers
:p.The arithmetic operators above require that both terms involved be
numbers; similarly some of the comparative operators carry out a
numeric comparison if both terms are numbers.
:p.Numbers are introduced and defined in detail in the section
on :a id=refnums.:hp1.Numbers and arithmetic:ehp1.:ea..
.* on pages &refnums.-&refenums..
In summary, :i.numbers:ei. are character strings consisting of one or
more decimal digits optionally prefixed by a plus or minus sign, and
optionally including a single period (:q.:hp4..:ehp4.:eq.) which then
represents a decimal point.
A number may also have a power of ten suffixed in conventional
exponential notation: an :q.:hp4.E:ehp4.:eq. (uppercase or lowercase)
followed by a plus or minus sign then followed by one or more decimal
digits defining the power of ten.
:p.Numbers may have leading blanks (before and/or after the sign, if
any) and may have trailing blanks.
Blanks may not be embedded among the digits of a number or in the
exponential part.
.cp 9
:p.:hp2.Examples::ehp2.
.pi /Numbers/examples of
:xmp.
'12'
'-17.9'
'127.0650'
'73e+128'
' + 7.9E-5 '
'00E+000'
:exmp.
:p.Note that the sequence :hp4.-17.9:ehp4. (without quotes) in an
expression is not simply a number.
It is a minus operator (which may be prefix minus if there is no term
to the left of it) followed by a positive number.
The result of the operation will be a number.
.pi /Whole numbers
:p.A :a id=refwholed.:i.whole number:ei.:ea. in NetRexx is a number
that has a zero (or no) decimal part.
:p.
:hp2.Implementation minimum::ehp2.
All implementations must support 9-digit arithmetic.
In unavoidable cases this may be limited to integers only, and in this
case the divide operator (:q.:hp4./:ehp4.:eq.) must not be supported.
If exponents are supported in an implementation, then they must be
supported for exponents whose absolute value is at least as large as the
largest number that can be expressed as an exact integer in default
precision, &ie., 999999999.
.cp 15
:h3 id=refpreced.Parentheses and operator precedence
.pi /Operators/precedence (priorities) of
.pi /Parentheses/in expressions
.pi /Precedence of operators
.pi /Priorities of operators
.pi /Algebraic precedence
:p.Expression evaluation is from left to right; this is modified by
parentheses and by operator precedence:
:ul.
:li.
When parentheses are encountered, other than those that identify
:a id=refmethcon.method calls:ea., the entire :i.sub-expression:ei.
delimited by the parentheses is evaluated immediately when the term is
required.
:li.When the sequence
:xmp.
term&sub1. operator&sub1. term&sub2. operator&sub2. term&sub3.
:exmp.
:pc.is encountered, and :hp4.operator&sub2.:ehp4. has a higher
precedence than :hp4.operator&sub1.:ehp4., then the
operation :hp4.(term&sub2. operator&sub2. term&sub3.):ehp4. is evaluated
first.
The same rule is applied repeatedly as necessary.
:p.Note, however, that individual terms are evaluated from left to
right in the expression (that is, as soon as they are encountered).  It
is only the order of :hp2.operations:ehp2. that is affected by the
precedence rules.
:eul.
:pc.For example, :q.:hp4.&z.:ehp4.:eq. (multiply) has a higher precedence
than :q.:hp4.+:ehp4.:eq. (add), so :hp4.3+2&z.5:ehp4. will evaluate to
13 (rather than the 25 that would result if strict left to right
evaluation occurred).
To force the addition to be performed before the multiplication the
expression would be written :hp4.(3+2)&z.5:ehp4., where the first three
tokens have been formed into a sub-expression by the addition of
parentheses.
.cp 5
:p.The order of precedence of the operators is (highest at the top):
:dl tsize=45mm termhi=1.
.cp 5;
:dt.Prefix operators
:dd.
:hp4.+  -  &bslash.:ehp4.
.cp 5;
:dt.Power operator
:dd.
:hp4.&z.&z.:ehp4.
.cp 5;
:dt.Multiplication and division
:dd.
:hp4.&z.  /  %  //:ehp4.
.cp 5;
:dt.Addition and subtraction
:dd.
:hp4.+  -:ehp4.
.cp 5;
:dt.Concatenation
:dd.
:hp4.(blank)  &vbar.&vbar.  (abuttal):ehp4.
.cp 5;
:dt.Comparative operators
:dd.
:hp4.=  ==  >  <  <= >=  <<  &bslash.>> :ehp4. &etc.
.cp 5;
:dt.And
:dd.
:hp4.&:ehp4.
.cp 5;
:dt.Or, exclusive or
:dd.
:hp4.&vbar.  &amp.&amp.:ehp4.
:edl.
.cp 12
.pi /Expressions/examples
.* .cp 5;:p.:hp2.Examples::ehp2.
:p.If, for example, the symbol :hp4.a:ehp4. is a variable whose value
is :hp4.'3':ehp4., and :hp4.day:ehp4. is a variable with the
value :hp4.'Monday':ehp4., then:
.* .se gives = '=='
:xmp.
a+5              ==  '8'
a-4&z.2            ==  '-5'
a/2              ==  '1.5'
a%2              ==  '1'
0.5&z.&z.2           ==  '0.25'
(a+1)>7          ==  '0'            /&z. that is, False &z./
' '=''           ==  '1'            /&z. that is, True  &z./
' '==''          ==  '0'            /&z. that is, False &z./
' '&bslash.==''         ==  '1'            /&z. that is, True  &z./
(a+1)&z.3=12       ==  '1'            /&z. that is, True  &z./
'077'>'11'       ==  '1'            /&z. that is, True  &z./
'077'>>'11'      ==  '0'            /&z. that is, False &z./
'abc'>>'ab'      ==  '1'            /&z. that is, True  &z./
'If it is' day   ==  'If it is Monday'
day.substr(2,3)  ==  'ond'
'!'day'!'        ==  '!Monday!'
:exmp.
:note.The NetRexx order of precedence usually causes no difficulty, as it
is the same as in conventional algebra and other computer languages.
There are two differences from some common notations; the prefix minus
operator always has a higher priority than the power operator, and
power operators (like other operators) are evaluated left-to-right.
Thus
:xmp.
-3&z.&z.2      ==  9    /&z. not -9  &z./
-(2+1)&z.&z.2  ==  9    /&z. not -9  &z./
2&z.&z.2&z.&z.3    ==  64   /&z. not 256 &z./
:exmp.
:p.
These rules were found to match the expectations of the majority of
users when the Rexx language was first designed, and NetRexx follows the
same rules.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 40
