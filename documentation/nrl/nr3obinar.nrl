.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2000.  All Rights Reserved.
.* ------------------------------------------------------------------
.* Converted 3 Sep 1996 10:36:12
.* 2000.08.23 Add bnary methods
:h2 id=refobinar.Binary types and conversions
.pi /Overview/binary types
.pi /Overview/conversions
.pi /Binary numbers/overview
.pi /Conversion/overview
:p.
Most programming environments support the notion of fixed-precision
:q.primitive:eq. binary types, which correspond closely to the binary
operations usually available at the hardware level in computers.
For the reference implementation, these types are&colon.
:ul.
:li.
:hp1.byte, short, int,:ehp1. and :hp1.long:ehp1. &dash. signed integers
that will fit in 8, 16, 32, or 64 bits respectively
:li.
:hp1.float:ehp1. and :hp1.double:ehp1. &dash. signed floating point
numbers that will fit in 32 or 64 bits respectively.
:li.
:hp1.char:ehp1. &dash. an unsigned 16-bit quantity, holding a Unicode
character
:li.
:hp1.boolean:ehp1. &dash. a 1-bit logical value,
representing :m.0:em. or :m.1:em. (:q.false:eq. or :q.true:eq.).
:eul.
:p.
Objects of these types are handled specially by the implementation
:q.under the covers:eq. in order to achieve maximum efficiency; in
particular, they cannot be constructed like other objects &dash. their
value is held directly.  This distinction rarely matters to the NetRexx
programmer&colon. in the case of string literals an object is
constructed automatically; in the case of an :m.int:em. literal, an
object is not constructed.
:p.
Further, NetRexx automatically allows the conversion between the various
forms of character strings in implementations
:fn.
In the reference implementation, these
are :m.String:em., :m.char:em., :m.char&lbrk.&rbrk.:em. (an
array of characters), and the NetRexx string type, :m.Rexx:em..
:efn.
and the primitive types.  The :q.golden rule:eq. that is followed by
NetRexx is that any automatic conversion which is applied must not lose
information&colon. either it can be determined before execution that the
conversion is safe (as in :m.int:em. to :m.String:em.) or it
will be detected at execution time if the conversion fails (as
in :m.String:em. to :m.int:em.).
:p.
The automatic conversions greatly simplify the writing of programs;
the exact type of numeric and string-like method arguments rarely needs
to be a concern of the programmer.
:p.
For certain applications where early checking or performance override
other considerations, the reference implementation of NetRexx provides
options for different treatment of the primitive types&colon.
:ol.
:li.
:kw.options strictassign:ekw. &dash. ensures exact type matching for all
assignments.  No conversions (including those from shorter integers to
longer ones) are applied.  This option provides stricter type-checking
than most other languages, and ensures that all types are an exact match.
:li.
:kw.options binary:ekw. &dash. uses implementation-dependent fixed
precision arithmetic on binary types (also, literal numbers, for
example, will be treated as binary, and local variables will be given
:q.native:eq. types such as :m.int:em. or :m.String:em., where
possible).
:p.
Binary arithmetic currently gives better performance than NetRexx
decimal arithmetic, but places the burden of avoiding overflows and
loss of information on the programmer.
:eol.
:p.
The options instruction (which may list more than one option) is placed
before the first class instruction in a file; the :kw.binary:ekw.
keyword may also be used on a :kw.class:ekw. or :kw.method:ekw.
instruction, to allow an individual class or method to use binary
arithmetic.
.* - - - - -
:h4.Explicit type assignment
:p.
You may explicitly assign a type to an expression or variable&colon.
.pi /Example/program
:xmp.
i=int 3000000  -- 'i' is an 'int' with value 3000000
j=int 4000000  -- 'j' is an 'int' with value 4000000
k=int          -- 'k' is an 'int', with no initial value
say i&z.j        -- multiply and display the result
k=i&z.j          -- multiply and assign result to 'k'
:exmp.
:p.
This example also illustrates an important difference between
:kw.options nobinary:ekw. and :kw.options binary:ekw..  With the former
(the default) the :kw.say:ekw. instruction would display the result
:q.:m.1.20000000E+13:em.:eq. and a conversion overflow would be
reported when the same expression is assigned to the variable :m.k:em..
:p.
With :kw.options binary:ekw., binary arithmetic would be used for the
multiplications, and so no error would be detected; the :kw.say:ekw.
would display :q.:m.-138625024:em.:eq. and the variable :m.k:em.
takes the incorrect result.
.* - - - - -
:h4.Binary types in practice
:p.
In practice, explicit type assignment is only occasionally needed in
NetRexx.  Those conversions that are necessary for using existing
classes (or those that use :kw.options binary:ekw.) are generally
automatic.
For example, here is an :q.Applet:eq. for use by Java-enabled
browsers&colon.
.pi /Example/applet
:xmp.
/&z. A simple graphics Applet &z./
class Rainbow extends Applet
  method paint(g=Graphics)  -- called to repaint window
    maxx=size.width-1
    maxy=size.height-1
    loop y=0 to maxy
      col=Color.getHSBColor(y/maxy, 1, 1) -- new colour
      g.setColor(col)                     -- set it
      g.drawLine(0, y, maxx, y)           -- fill slice
    end y
:exmp.
.* 1997.11.10 -- example previously had drawRect
:p.
In this example, the variable :m.col:em. will have
type :m.Color:em., and the three arguments to the
method :m.getHSBColor:em. will all automatically be converted to
type :m.float:em..  As no overflows are possible in this example,
:kw.options binary:ekw. may be added to the top of the program with no
other changes being necessary.
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
