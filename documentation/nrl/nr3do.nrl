.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refdo.Do instruction
.ty Page &refdo.: Do instruction
.pi start /DO instruction
.pi /Instructions/DO
.pi ref /END clause/DO instruction
.pi ref /DO instruction/grouping
.pi /Flow control/with DO construct
.pi /Group, DO
.pi /DO group
.pi /Simple DO group
[%char
.bx left right
:xmp.
:hp2.do:ehp2. &lbrk.:hp2.label:ehp2. :hp1.name:ehp1.&rbrk. &lbrk.:hp2.protect:ehp2. :hp1.term:ehp1.&rbrk.;
________:hp1.instructionlist:ehp1.
____&lbrk.:hp2.catch:ehp2. &lbrk.:hp1.vare:ehp1. =&rbrk. :hp1.exception:ehp1.;
________:hp1.instructionlist:ehp1.&rbrk....
____&lbrk.:hp2.finally:ehp2.&lbrk.;&rbrk.
________:hp1.instructionlist:ehp1.&rbrk.
____:hp2.end:ehp2. &lbrk.:hp1.name:ehp1.&rbrk.;

where :hp1.name:ehp1. is a non-numeric :i.symbol:ei.

and :hp1.instructionlist:ehp1. is zero or more :i.instruction:ei.s
:exmp.
.bx off
]]
[%smff
.syndo
]]
:p.The :kw.do:ekw. instruction is used to group instructions together for
execution; these are executed once.
The group may optionally be given a label, and may protect an object
while the instructions in the group are executed; exceptional conditions
can be handled with :kw.catch:ekw. and :kw.finally:ekw..
:p.
The most common use of :kw.do:ekw. is simply for treating a number of
instructions as group.
.cp 6
:p.:hp2.Example::ehp2.
:xmp.
/&z. The two instructions between DO and END will both &z./
/&z. be executed if A has the value 3.                 &z./
if a=3 then do
  a=a+2
  say 'Smile!'
  end
:exmp.
.pi /Body/of group
:pc.Here, only the first :hp1.instructionlist:ehp1. is used.
This forms the :i.body:ei. of the group.
:p.
The instructions in the :i.instructionlist:ei.s may be any assignment,
method call, or keyword instruction, including any of the more complex
constructions such as :kw.loop:ekw., :kw.if:ekw., :kw.select:ekw., and
the :kw.do:ekw. instruction itself.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 8
:h4.Label phrase
.pi /DO instruction/LABEL
.pi /DO group/naming of
.pi /LABEL/on DO instruction
:p.
If :kw.label:ekw. is used to specify a :hp1.name:ehp1. for the group,
then a :kw.leave:ekw. which specifies that name may be used to leave the
group, and the :kw.end:ekw. that ends the group may optionally specify
the name of the group for additional checking.
.cp 7
:p.:hp2.Example::ehp2.
:xmp.
do label sticky
  x=ask
  if x='quit' then leave sticky
  say 'x was' x
  end sticky
:exmp.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 8
:h4.Protect phrase
.pi /PROTECT/on DO instruction
:p.
If :kw.protect:ekw. is given it must be followed by a :hp1.term:ehp1.
that evaluates to a value that is not just a type and is not of a
primitive type; while the :kw.do:ekw. construct is being executed, the
value (object) is protected &dash. that is, all the instructions in the
:kw.do:ekw. construct have exclusive access to the object.
:p.
Both :kw.label:ekw. and :kw.protect:ekw. may be specified, in any order,
if required.
.*
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 8
:h4.Exceptions in do groups
:p.
.pi /CATCH/on DO instruction
.pi /FINALLY/on DO instruction
Exceptions that are raised by the instructions within a do group may be
caught using one or more :kw.catch:ekw. clauses that name the
:i.exception:ei. that they will catch.
When an exception is caught, the exception object that holds the details
of the exception may optionally be assigned to a variable,
:hp1.vare:ehp1..
:p.
Similarly, a :kw.finally:ekw. clause may be used to introduce
instructions that will always be executed at the end of the group, even
if an exception is raised (whether caught or not).
:p.
The :a id=refexcep.:hp1.Exceptions:ehp1. section:ea. has details and
examples of :kw.catch:ekw. and :kw.finally:ekw..
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.pi end /DO instruction
.cp 25
