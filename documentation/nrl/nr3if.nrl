.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2.If instruction
.pi /IF instruction
.pi /Instructions/IF
.pi /THEN/following IF clause
.pi ref /ELSE keyword/IF instruction
.pi /Flow control/with IF construct
[%char
.bx left right
:xmp.
:hp2.if:ehp2. :i.expression:ei.&lbrk.;&rbrk.
_____:hp2.then:ehp2.&lbrk.;&rbrk. :i.instruction:ei.
____&lbrk.:hp2.else:ehp2.&lbrk.;&rbrk. :i.instruction:ei.&rbrk.
:exmp.
.bx off
]]
[%smff
.synif
]]
:p.The :kw.if:ekw. construct is used to conditionally execute an
instruction or group of instructions.
It can also be used to select between two alternatives.
:p.The expression is evaluated and must result in either 0 or 1.
If the result was 1 (true) then the instruction after the
:kw.then:ekw. is executed.
If the result was 0 (false) and an :kw.else:ekw. was given
then the instruction after the :kw.else:ekw. is executed.
.cp 5
:p.:hp2.Example::ehp2.
:xmp.
if answer='Yes' then say 'OK!'
                else say 'Why not?'
:exmp.
:p.Remember that if the :kw.else:ekw. clause is on the same line as the
last clause of the :kw.then:ekw. part, then you need a semicolon to
terminate that clause.
.* The last example could have been written:
.cp 5;
:p.:hp2.Example::ehp2.
:xmp.
if answer='Yes' then say 'OK!';  else say 'Why not?'
:exmp.
:p.The :kw.else:ekw. binds to the nearest :kw.then:ekw. at the same level.
This means that any :kw.if:ekw. that is used as the instruction
following the :kw.then:ekw. in an :kw.if:ekw. construct that has an
:kw.else:ekw. clause, must itself have an :kw.else:ekw. clause (which
may be followed by the dummy instruction, :kw.nop:ekw.).
.cp 5
:p.:hp2.Example::ehp2.
:xmp.
if answer='Yes' then if name='Fred' then say 'OK, Fred.'
                                    else say 'OK.'
                else say 'Why not?'
:exmp.
:p.
To include more than one instruction following :kw.then:ekw. or
:kw.else:ekw., use a grouping instruction (:kw.do:ekw., :kw.loop:ekw.,
or :kw.select:ekw.).
.cp 5
:p.:hp2.Example::ehp2.
:xmp.
if answer='Yes' then do
  say 'Line one of two'
  say 'Line two of two'
  end
:exmp.
:pc.In this instance, both :kw.say:ekw. instructions are executed when
the result of the :kw.if:ekw. expression is 1.
.cp 4
:p.
Multiple expressions, separated by commas, can be given on the
:kw.if:ekw. clause, which then has the syntax:
[%char
.bx left right
:xmp.
:hp2.if:ehp2. :i.expression:ei.&lbrk., :i.expression:ei.&rbrk.... &lbrk.;&rbrk.
:exmp.
.bx off
]]
[%smff
.synif2
]]
:pc.In this case, the expressions are evaluated in turn from left to
right, and if the result of any evaluation is 1 then the test has
succeeded and the instruction following the associated :kw.then:ekw.
clause is executed.
If all the expressions evaluate to 0 and an :kw.else:ekw. was given
then the instruction after the :kw.else:ekw. is executed.
:p.
Note that once an expression evaluation has resulted in 1, no further
expressions in the clause are evaluated.  So, for example, in:
:xmp.
-- assume 'name' is a string
if name=null, name='' then say 'Empty'
:exmp.
:pc.then if :m.name:em. does not refer to an object it will compare equal to
null and the :kw.say:ekw. instruction will be executed without
evaluating the second expression in the :kw.if:ekw. clause.
.cp 4
:p.:hp2.Notes::ehp2.
:ol.
:li.An :i.instruction:ei. may be any assignment, method call, or
keyword instruction, including any of the more complex constructions
such as :kw.do:ekw., :kw.loop:ekw., :kw.select:ekw., and the :kw.if:ekw.
instruction itself.
A null clause is not an instruction, however, so putting an extra
semicolon after the :kw.then:ekw. or :kw.else:ekw. is not equivalent to
putting a dummy instruction.
.* (as it would be in C or PL/I).
The :kw.nop:ekw. instruction is provided for this purpose.
:li.The keyword :kw.then:ekw. is treated specially, in that it need not start a
clause.
This allows the expression on the :kw.if:ekw. clause to be terminated by
the :kw.then:ekw., without a :q.:hp4.;:ehp4.:eq. being required &dash.
were this not so, people used to other computer languages would
be inconvenienced.
Hence the symbol :kw.then:ekw. cannot be used as a variable name within
the expression.
:fn.
Strictly speaking, :kw.then:ekw. should only be recognized if not
the name of a variable.  In this special case, however, NetRexx language
processors are permitted to treat :kw.then:ekw. as reserved in the
context of an :kw.if:ekw. clause, to provide better performance and
more useful error reporting.
:efn.
:eol.
.cp 25
