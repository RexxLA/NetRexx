.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refparse.Parse instruction
.pi /PARSE/instruction
.pi /Instructions/PARSE
.pi /Parsing templates/in PARSE instruction
.pi /Templates, parsing/in PARSE instruction
.pi /Rexx/class/use by PARSE
[%char
.bx left right
:xmp.
:hp2.parse:ehp2. :hp1.term:ehp1. :hp1.template:ehp1.;

where :hp1.template:ehp1. is one or more non-numeric :i.symbol:ei.s separated by blanks and/or :hp1.pattern:ehp1.s, and a :hp1.pattern:ehp1. is one of:

____:hp1.literalstring:ehp1.
____&lbrk.:hp1.indicator:ehp1.&rbrk. :hp1.number:ehp1.
____&lbrk.:hp1.indicator:ehp1.&rbrk. (:i.symbol:ei.)

and :hp1.indicator:ehp1. is one of :hp4.+:ehp4., :hp4.-:ehp4., or :hp4.=:ehp4..
:exmp.
.bx off
]]
[%smff
.synpar
]]
:p.The :kw.parse:ekw. instruction is used to assign characters (from a
string) to one or more variables according to the rules and templates
described in the section :a id=refparsing.:hp1.Parsing
templates:ehp1.:ea..
.pi /Variables/parsing of
.pi /Terms/parsing of
:p.
The value of the :hp1.term:ehp1. is expected to be a string; if it is
not a string, it will be converted to a string.
:p.
Any variables used in the :hp1.template:ehp1. are named by non-numeric
:hp1.symbol:ehp1.s (that is, they cannot be an array reference or other
term); they refer to a variable or property in the current class.
Any values that are used in patterns during the parse are converted to
strings before use.
:p.
Any variables set by the :kw.parse:ekw. instruction must have a known
string type, or are given the NetRexx string type, :hp4.Rexx:ehp4., if
they are new.
:p.
The term itself is not changed unless it is a variable which also
appears in the template and whose value is changed by being in the
template.
.cp 5
:p.:hp2.Example::ehp2.
:xmp.
parse wordlist word1 wordlist
:exmp.
:pc.In this idiomatic example, the first word is removed
from :hp4.wordlist:ehp4. and is assigned to the
variable :hp4.word1:ehp4., and the remainder is assigned back
to :hp4.wordlist:ehp4..
.*
:p.:hp2.Notes::ehp2.
:ol.
:li.
The special words :kw.ask:ekw., :kw.source:ekw., and :kw.version:ekw.,
as described in the section :a id=refspecial.:hp1.Special names and
methods:ehp1.:ea., allow:
:xmp.
parse ask x     -- parses a line from input stream
parse source x  -- parses 'Java method :hp1.filename:ehp1.'
parse version x -- parses 'NetRexx :hp1.version:ehp1. :hp1.date:ehp1.'
:exmp.
:pc.These special words may also be used within expressions.
:li.
Similarly, it is recommended that the initial (main) method in a
stand-alone application place the command string passed to it in a
variable called :hp4.arg:ehp4..
:fn.
:ri.In the reference implementation, this is automatic if
the :hp4.main:ehp4. method is generated by the NetRexx language
processor.:eri.
:efn.
.cp 3
:p.
If this is done, the instruction:
:xmp.
parse arg template
:exmp.
:pc.will work, in a stand-alone application, in the same way as in Rexx
(even though :hp4.arg:ehp4. is not a keyword in this case).
:fn.
Note, though, that the command string may have been edited by the
environment; certain characters may not be allowed, multiple blanks may
have been reduced to single blanks, &etc.
:efn.
:eol.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 25
