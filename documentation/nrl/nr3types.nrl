.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=reftypes.Types and Classes
.pi /Types
.pi /Datatypes
.pi /Data/types
.pi ref /Signature/Type
:p.
Programs written in the NetRexx language manipulate values, such as
names, numbers, and other representations of data.
All such values have an associated :i.type:ei. (also known as a
:i.signature:ei.).
:p.
The type of a value is a descriptor which identifies the nature of the
value and the operations that may be carried out on that value.
:p.
.pi /Class
.pi /Properties
.pi /Method
A type is normally defined by a :i.class:ei., which is a named
collection of values (called :i.properties:ei.) and procedures (called
:i.methods:ei.) for carrying out operations on the properties.
.* Classes, properties, and methods are described in detail later.
:p.
.pi /Rexx/class/NetRexx strings
For example, a character string in NetRexx is usually of
type :hp4.Rexx:ehp4., which will be implemented by the class
called :hp4.Rexx:ehp4..
The class :hp4.Rexx:ehp4. defines the properties of the string (a
sequence of characters) and the methods that work on strings.
This type of string may be the subject of arithmetic operations as well
as more conventional string operations such as concatenation, and so the
methods implement string arithmetic as well as other string operations.
:p.
.pi /Package
.pi /Qualified types
.pi /Types/qualified
The names of types can further be qualified by the name of a
:i.package:ei. where the class is held.  See the :kw.package:ekw.
instruction for details of packages; in summary, a package name is a
sequence of one or more non-numeric symbols, separated by periods.
Thus, if the :hp4.Rexx:ehp4. class was part of
the :hp4.netrexx.lang:ehp4. package,
:fn.
:ri.This is in fact where it may be found in the reference
implementation.:eri.
:efn.
then its :i.qualified type:ei. would be :hp4.netrexx.lang.Rexx:ehp4..
:p.
In general, only the class name need be specified to refer to a type.
However, if a class of the same name exists in more than one known
(imported) package, then the name should be qualified by the package
name.  That is, if the use of just the class name does not uniquely
identify the class then the reference is ambiguous and an error is
reported.
.* - - - - -
:h4 id=refprims.Primitive types
.pi /Primitive types
.pi /Types/primitive
:p.
Implementations may optionally provide :i.primitive types:ei. for
efficiency.
Primitive types are :q.built-in:eq. types that are not necessarily
implemented as classes.
They typically represent concepts native to the underlying environment
(such as 32-bit binary integer numbers) and may exhibit semantics that
are different from other types.  NetRexx, however, makes no syntax
distinction in the names of primitive types, and assumes
:a id=refbincon.:i.binary constructors:ei.:ea. exist for primitive
values.
:p.
Primitive types are necessary when performance is an overriding
consideration, and so this definition will assume that primitive types
corresponding to the common binary number formats are available and will
describe how they differ from other types, where appropriate.
.cp 3
:p.
:ri.In the reference implementation, the names of the primitive types
are::eri.
:xmp.
boolean char byte short int long float double
:exmp.
:pc.:ri.where the first two describe a single-bit value and Unicode
character respectively, and the remainder describe signed numbers of
various formats.
The main difference between these and other types is that the primitive
types are not a subclass of :hp4.Object:ehp4., so they cannot be
assigned to a variable of type :hp4.Object:ehp4. or passed to methods
:q.by reference:eq..  To use them in this way, an object must be created
to :q.wrap:eq. them; Java provides classes for this (for example, the
class :hp4.Long:ehp4.).
:eri.
.*
:h4 id=refdimtype.Dimensioned types
.pi /Dimensioned types
.pi /Dimension/of arrays
.pi /Dimension/of types
.pi /Types/dimensioned
:p.
Another feature that is provided for efficiency is the concept of
:i.dimensioned types:ei., which are types (normal or primitive) that
have an associated dimension (in the sense of the dimensions of an
array).  Dimensioned values are described in detail in the section on
:a id=refarray.:hp1.Arrays:ehp1.:ea..
:p.
The dimension of a dimensioned type is represented in NetRexx programs
by square brackets enclosing zero or more commas, where the dimension is
given by the number of commas, plus one.  A dimensioned type is distinct
from the type of the same name but with no dimensions.
.cp 9
:p.:hp2.Examples::ehp2.
:xmp.
Rexx
int
Rexx&lbrk.&rbrk.
int&lbrk.,,&rbrk.
:exmp.
:pc.
The examples show a normal type, a primitive type, and a dimensioned
version of each (of dimension 1 and 3 respectively).  The latter type
would result from constructing an array thus:
:xmp.
myarray=int&lbrk.10,10,10&rbrk.
:exmp.
:pc.That is, the dimension of the type matches the count of indexes
defined for the array.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:h4 id=refmindep.Minor and Dependent classes
:p.
.pi /Minor classes
.pi /Classes/minor
.pi /Classes/parent
A :i.minor class:ei. in NetRexx is a class whose name is qualified by
the name of another class, called its :i.parent:ei..
This qualification is indicated by the form of the name of the class:
the short name of the minor class is prefixed by the name of its parent
class (separated by a period).
For example, if the parent is called :m.Foo:em. then the full name of a
minor class :m.Bar:em. would be written :m.Foo.Bar:em..
:p.
.pi /Dependent classes
.pi /Classes/dependent
A :i.dependent class:ei. is a minor class that has a link to its
parent class that allows a child object simplified access to its
parent object and its properties.
:p.
These refinements of classes and are described in the
section :a id=refminor.:i.Minor and Dependent classes:ei.:ea..
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 40
