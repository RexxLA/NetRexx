.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2000.  All Rights Reserved.
.* ------------------------------------------------------------------
.* Converted 3 Sep 1996 10:36:11
.* 2000.08.23 Add 'select case', and catch/finally
:h2 id=refocontr.Control instructions
.pi /Overview/control instructions
.pi /Control instructions, overview
:p.
NetRexx provides a selection of :hp1.control:ehp1. instructions, whose form was
chosen for readability and similarity to natural languages.  The control
instructions include :kw.if:ekw.... :kw.then:ekw.... :kw.else:ekw. (as
in the :q.greet:eq. example) for simple conditional processing&colon.
:xmp.
if ask='Yes' then say "You answered Yes"
             else say "You didn't answer Yes"
:exmp.
.cp 8
:p.
:kw.select:ekw.... :kw.when:ekw.... :kw.otherwise:ekw.... :kw.end:ekw.
for selecting from a number of alternatives&colon.
:xmp.
select
  when a&gt.0 then say 'greater than zero'
  when a&lt.0 then say 'less than zero'
  otherwise say 'zero'
  end

select case i+1
  when 1 then say 'one'
  when 1+1 then say 'two'
  when 3, 4, 5 then say 'many'
  end
:exmp.
.cp 7
:p.
:kw.do:ekw.... :kw.end:ekw. for grouping&colon.
:xmp.
if a&gt.3 then do
  say 'A is greater than 3; it will be set to zero'
  a=0
  end
:exmp.
.cp 7
:p.
and :kw.loop:ekw.... :kw.end:ekw. for repetition&colon.
:xmp.
/&z. repeat 10 times; I changes from 1 to 10 &z./
loop i=1 to 10
  say i
  end i
:exmp.
:p.
The :kw.loop:ekw. instruction can be used to step a variable :kw.to:ekw.
some limit, :kw.by:ekw. some increment, :kw.for:ekw. a specified number of
iterations, and :kw.while:ekw. or :kw.until:ekw. some condition is
satisfied.  :kw.loop forever:ekw. is also provided, and
:kw.loop over:ekw. can be used to work through a collection of
variables.
:p.
Loop execution may be modified by :kw.leave:ekw. and :kw.iterate:ekw.
instructions that significantly reduce the complexity of many programs.
:p.
.pi /Exceptions/overview
The :kw.select:ekw., :kw.do:ekw., and :kw.loop:ekw. constructs also have
the ability to :a id=refoexcep.:q.catch:eq. exceptions:ea. that occur in
the body of the construct.  All three, too, can specify a
:kw.finally:ekw. instruction which introduces instructions which are to
be executed when control leaves the construct, regardless of how the
construct is ended.
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
