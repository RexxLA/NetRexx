.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2.Select instruction
.pi start /SELECT instruction
.pi /Instructions/SELECT
.pi /THEN/following WHEN clause
.pi ref /END clause/SELECT instruction
.pi ref /WHEN clause/SELECT instruction
.pi ref /OTHERWISE clause/SELECT instruction
.pi /Flow control/with SELECT construct
[%char
.bx left right
:xmp.
:hp2.select:ehp2. &lbrk.:hp2.label:ehp2. :hp1.name:ehp1.&rbrk. &lbrk.:hp2.protect:ehp2. :hp1.term:ehp1.&rbrk. &lbrk.:hp2.case:ehp2. :hp1.expression:ehp1.&rbrk.;
________:hp1.whenlist:ehp1.
________&lbrk.:hp2.otherwise:ehp2.&lbrk.;&rbrk. :hp1.instructionlist:ehp1.&rbrk.
____&lbrk.:hp2.catch:ehp2. &lbrk.:hp1.vare:ehp1. =&rbrk. :hp1.exception:ehp1.;
________:hp1.instructionlist:ehp1.&rbrk....
____&lbrk.:hp2.finally:ehp2.&lbrk.;&rbrk.
________:hp1.instructionlist:ehp1.&rbrk.
____:hp2.end:ehp2. &lbrk.:hp1.name:ehp1.&rbrk.;

where :hp1.name:ehp1. is a non-numeric :i.symbol:ei.

and :hp1.whenlist:ehp1. is one or more :hp1.whenconstruct:ehp1.s

and :hp1.whenconstruct:ehp1. is:

____:hp2.when:ehp2. :hp1.expression:ehp1.&lbrk., :i.expression:ei.&rbrk.... &lbrk.;&rbrk. :hp2.then:ehp2.&lbrk.;&rbrk. :hp1.instruction:ehp1.

and :hp1.instructionlist:ehp1. is zero or more :i.instruction:ei.s.
:exmp.
.bx off
]]
[%smff
.synsel
]]
.pi /Body/of select
:p.:kw.select:ekw. is used to conditionally execute one of several
alternatives.
The construct may optionally be given a label, and may protect an object
while the instructions in the construct are executed; exceptional
conditions can be handled with :kw.catch:ekw. and :kw.finally:ekw.,
which follow the body of the construct.
:p.
Starting with the first :kw.when:ekw. clause, each expression in
the clause is evaluated in turn from left to right, and if the
result of any evaluation is 1 (or equals the :kw.case:ekw.
expression, see below) then the test has succeeded and the
instruction following the associated :kw.then:ekw. (which may be
a complex instruction such as :kw.if:ekw., :kw.do:ekw.,
:kw.loop:ekw., or :kw.select:ekw.) is executed and control will
then pass directly to the :kw.end:ekw..
:p.
If the result of all the expressions in a :kw.when:ekw. clause
is 0, control will pass to the next :kw.when:ekw. clause.
:p.
Note that once an expression evaluation in a :kw.when:ekw.
clause has resulted in a successful test, no further expressions
in the clause are evaluated.
:p.
If none of the :kw.when:ekw. expressions result in 1, then control will
pass to the instruction list (if any) following :kw.otherwise:ekw..
In this situation, the absence of an :kw.otherwise:ekw. is a run-time
error.
:fn.
:ri.In the reference implementation, a :hp4.NoOtherwiseException:ehp4.
is raised.:eri.
:efn.
.* An :kw.otherwise:kw. with no following :hp1.instructionlist:ehp1. is
.* permitted; in this case, no action is taken if the :kw.otherwise:ekw. is
.* reached.
.* - - - - - - - - - -
.cp 4
:p.:hp2.Notes::ehp2.
:ol.
:li.An :i.instruction:ei. may be any assignment, method call, or keyword
instruction, including any of the more complex constructions such as
:kw.do:ekw., :kw.loop:ekw., :kw.if:ekw., and the :kw.select:ekw.
instruction itself.
A null clause is not an instruction, however, so putting an extra
semicolon after the :kw.then:ekw. is not equivalent to putting a dummy
instruction (as it would be in C or PL/I).
The :kw.nop:ekw. instruction is provided for this purpose.
:li.The keyword :kw.then:ekw. is treated specially, in that it need not
start a clause.
This allows the expression on the :kw.when:ekw. clause to be terminated
by the :kw.then:ekw., without a :q.:hp4.;:ehp4.:eq. being required
&dash. were this not so, people used to other computer languages would
be inconvenienced.
Hence the symbol :kw.then:ekw. cannot be used as a variable name within
the expression.
:fn.
Strictly speaking, :kw.then:ekw. should only be recognized if not
the name of a variable.  In this special case, however, NetRexx language
processors are permitted to treat :kw.then:ekw. as reserved in the
context of a :kw.when:ekw. clause, to provide better performance and
more useful error reporting.
:efn.
:eol.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 8
:h4.Label phrase
.pi /Select/label
.pi /Select/naming of
:p.
.pi /LABEL/on SELECT instruction
If :kw.label:ekw. is used to specify a :hp1.name:ehp1. for the select
group, then a :a id=refleave.:kw.leave:ekw. instruction:ea. which
specifies that name may be used to leave the group, and the :kw.end:ekw.
that ends the group may optionally specify the name of the group for
additional checking.
.cp 10
:p.:hp2.Example::ehp2.
:xmp.
select label roman
  when a=b then say 'same'
  when a<b then say 'lo'
  otherwise
    say 'hi'
    if a=0 then leave roman
    say 'a non-0'
  end roman
:exmp.
:pc.In this example, if the variable :hp4.a:ehp4. has the value 0
and :hp4.b:ehp4. is negative then just :q.:hp4.hi:ehp4.:eq. is
displayed.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 8
:h4.Protect phrase
:p.
.pi /PROTECT/on SELECT instruction
If :kw.protect:ekw. is given it must be followed by a :hp1.term:ehp1.
that evaluates to a value that is not just a type and is not of a
primitive type;
while the :kw.select:ekw. construct is being executed, the value
(object) is protected &dash. that is, all the instructions in the
:kw.select:ekw. construct have exclusive access to the object.
:p.
Both :kw.label:ekw. and :kw.protect:ekw. may be specified, in any order,
if required.
.*
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 8
:h4.Case phrase
:p.
.pi /CASE/on SELECT instruction
If :kw.case:ekw. is given it must follow any :kw.label:ekw. or
:kw.protect:ekw. phrase, and must be followed by an
:hp1.expression:ehp1..
.*
:p.
When :kw.case:ekw. is used, the expression following it is evaluated at
the start of the :kw.select:ekw. construct.
The result of the expression is then compared, using the strict equality
operator (:m.==:em.), to the result of evaluating the expression
or expressions in each of the :kw.when:ekw. clauses in turn until
a match is found.  As usual, if no match is found then control
will pass to the instruction list (if any) following
:kw.otherwise:ekw., and in this situation the absence of an
:kw.otherwise:ekw. is a run-time error.
.cp 8
:p.For example, in:
:xmp.
select case i+1
  when 1 then say 'one'
  when 1+1 then say 'two'
  when 3, 4, 5 then say 'many'
end
:exmp.
:pc.then if :m.i:em. had the value 1 then the message displayed would be
:q.:m.two:em.:eq..
:p.
The third :kw.when:ekw. clause in the example demonstrates the use of the
multiple expressions in a :kw.when:ekw. clause in this context.
Similar to a :kw.select:ekw. without :kw.case:ekw., each
expression is evaluated in turn from left to right and is then
compared to the result of the :kw.case:ekw. expression.
As soon as one matches that result, execution of the
:kw.when:ekw. clause stops (any further expressions are not
evaluated) and the instruction following the associated
:kw.then:ekw. clause is executed.
.* -----
.cp 4
:p.:hp2.Notes::ehp2.
:ol.
:li.When :kw.case:ekw. is used, the result of evaluating the expression
following each :kw.when:ekw. no longer has to be 0 or 1.  Instead, it
must be possible to compare each result to the result of the
:kw.case:ekw. expression.
:li.
The :kw.case:ekw. expression is evaluated only on entry to the
:kw.select:ekw. construct; it is not re-evaluated for each :kw.when:ekw.
clause.
:li.
An exception raised during evaluation of the :kw.case:ekw. expression
will be caught by a suitable :kw.catch:ekw. clause in the construct, if
one is present.
Similarly, evaluation of the :kw.case:ekw. expression is protected by
the :kw.protect:ekw. phrase, if one is present.
:li.
:ri.In the reference implementation, a :kw.select case:ekw. construct will
be translated into a Java :m.switch:em. construct provided that it
meets the following criteria::eri.
:ul.
:li.
:ri.The type of the :kw.case:ekw. expression
is :m.byte:em., :m.char:em., :m.int:em., or :m.short:em..:eri.
:li.
:ri.The value of all the expressions on the :kw.when:ekw. clauses are
primitive constants (that is, they consist of only constants of
primitive types and operators valid for them and so may be evaluated at
compile time).:eri.
:li.
:ri.No two expressions on the :kw.when:ekw. clauses evaluate to the same
value.:eri.
:li.
:ri.It is not subject to tracing.:eri.
:eul.
:pc.:ri.Under these conditions the semantics of the :m.switch:em. construct
match those defined for :kw.select:ekw..  The example shown above would
be translated to a :m.switch:em. construct if :m.i:em. had type :m.int:em.
and :kw.options binary:ekw. were in effect.:eri.
:eol.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 8
:h4.Exceptions in select constructs
:p.
.pi /CATCH/on SELECT instruction
.pi /FINALLY/on SELECT instruction
Exceptions that are raised by the instructions within the body of the
group, or during evaluation of the :kw.case:ekw. expression, may be
caught using one or more :kw.catch:ekw. clauses that name
the :i.exception:ei. that they will catch.
When an exception is caught, the exception object that holds the details
of the exception may optionally be assigned to a variable,
:hp1.vare:ehp1..
:p.
Similarly, a :kw.finally:ekw. clause may be used to introduce
instructions that will always be executed at the end of the select
group, even if an exception is raised (whether caught or not).
:p.
The :a id=refexcep.:hp1.Exceptions:ehp1. section:ea. has details and
examples of :kw.catch:ekw. and :kw.finally:ekw..
.pi end /SELECT instruction
.cp 25
