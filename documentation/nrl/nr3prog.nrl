.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refpstruct.Program structure
.pi /Programs
.pi /Programs/structure
.pi /Program/structure
:p.A NetRexx :i.program:ei. is a collection of
:a id=refclau.clauses:ea. derived from a single implementation-defined
source stream (such as a file).
When a program is processed by a language processor
:fn.
Such as a compiler or interpreter.
:efn.
it defines one or more classes.
Classes are usually introduced by the :a id=refclass.:kw.class:ekw.
instruction:ea., but if the first is a standard class, intended to be
run as a stand-alone application, then the :kw.class:ekw. instruction
can be omitted.  In this case, NetRexx defines an implied class
and initialization method that will be used.
:p.
The implied class and method permits the writing of :q.low
boilerplate:eq. programs, with a minimum of syntax.
The simplest, documented, NetRexx program that has an effect might
therefore be:
.cp 5
:p.:hp2.Example::ehp2.
.pi /Example/Hello World
:xmp.
/&z. This is a very simple NetRexx program &z./
say 'Hello World!'
:exmp.
.* - - - -
:p.
In more detail, a NetRexx program consists of:
.pi /Program/prolog
.pi /Prolog, of a program
:ol.
:li.An optional :i.prolog:ei. (:kw.package:ekw., :kw.import:ekw., and
:kw.options:ekw. instructions).  Only one :kw.package:ekw. instruction
is permitted per program.
:li. One or more class definitions, each introduced by a :kw.class:ekw.
instruction.
:eol.
:p.
.pi /Class/definition
A :i.class definition:ei. comprises:
:ol.
:li.The :kw.class:ekw. instruction which introduces the class (which may
be inferred, see below).
:li.
Zero or more property variable assignments,
.pi /Properties/initialization
.pi /Assignment/property initialization
along with optional :kw.properties:ekw.
instructions that can alter their attributes, and optional
:kw.numeric:ekw. and :kw.trace:ekw. instructions.
Property variable assignments take the form of an
:a id=refassign.:i.assignment:ei.:ea., with an optional
:q.:hp4.=:ehp4.:eq. and expression, which may:
:ul.
:li.just name a property (by omitting the :q.:hp4.=:ehp4.:eq.
and expression of the assignment), in which case it refers to a string of
type :hp4.Rexx:ehp4.
:li.assign a type to the property (when the expression evaluates to just
a type)
:li.
assign a type and initial value to the property (when the expression
returns a value).
:eul.
:li.Zero or more method definitions, each introduced by a
:kw.method:ekw. instruction (which may be inferred if the :kw.class:ekw.
instruction is inferred, see below).
:eol.
:p.
.pi /Method/definition
A :i.method definition:ei. comprises:
:ul.
:li.
Any NetRexx instructions, except the :kw.class:ekw., :kw.method:ekw.,
and :kw.properties:ekw. instructions and those allowed in the prolog
(the :kw.package:ekw., :kw.import:ekw., and :kw.options:ekw.
instructions).
:eul.
.cp 31
:p.:hp2.Example::ehp2.
.pi /Example/of two classes
:xmp.
/&z. A program with two classes &z./
import java.applet.   -- for example

class testclass extends Applet
  properties public
    state             -- property of type 'Rexx'
    i=int             -- property of type 'int'
  properties constant
    j=int 3           -- property initialized to '3'

  method start
    say 'I started'
    state='start'

  method stop
    say 'I stopped'
    state='stop'

class anotherclass
  method testing
    loop i=1 to 10
      say '1, 2, 3, 4...'
      if i=7 then return
     end
    return

  method anothertest
    say '1, 2, 3, 4'
:exmp.
:pc.This example shows a prolog (with just an :kw.import:ekw.
instruction) followed by two classes.  The first class includes
two public properties, one constant property, and two methods.
The second class includes no properties, but also has two methods.
:p.
Note that a :kw.return:ekw. instruction implies no static scoping; the
content of a method is ended by a :kw.method:ekw. (or :kw.class:ekw.)
instruction, or by the end of the source stream.
The :kw.return:ekw. instruction at the end of the :hp4.testing:ehp4.
method is, therefore, unnecessary.
.*
.* - - - - -
.cp 10
:h3.Program defaults
:p.
The following defaults are provided for NetRexx programs:
:ol.
:li.If, while parsing prolog instructions, some instruction that is not
valid for the prolog and is not a :kw.class:ekw. instruction is
encountered, then a default :kw.class:ekw. instruction (with an
implementation-provided short name, typically derived from the name of
the source stream) is inserted.  If the instruction was not a
:kw.method:ekw. instruction, then a default :kw.method:ekw. instruction
(with a name and attributes appropriate for the environment, such
as :hp4.main:ehp4.) is also inserted.
:p.
In this latter case, it is assumed that execution of the program will
begin by invocation of the default method.
In other words, a :q.stand-alone:eq. application can be written without
explicitly providing the class and method instructions for the first
method to be executed.
[%book
An example of such a program is given in :a id=refappa.Appendix A:ea..
]]
[%odt
An example of such a program is given in :a id=refappa.Appendix A:ea..
]]
:p.
:ri.In the reference implementation, the :hp4.main:ehp4. method in a
stand-alone application is passed the words forming the command string
as an array of strings of type :hp4.java.lang.String:ehp4. (one word to
each element of the array).
When the NetRexx reference implementation provides the :hp4.main:ehp4.
method instruction by default, it also constructs a NetRexx string of
type :hp4.Rexx:ehp4. from this array of words, with a blank added
between words, and assigns the string to the variable
:hp4.arg:ehp4..:eri.
:p.
:ri.The command string may also have been edited by the underlying
operating system environment; certain characters may not be
allowed, multiple blanks or whitespace may have been reduced to
single blanks, etc.
:eri.
:li.If a method ends and the last instruction at the outer level of the
method scope is not :kw.return:ekw. then a :kw.return:ekw. instruction
is added if it could be reached.
In this case, if a value is expected to be returned by the method (due
to other :kw.return:ekw. instructions returning values, or there being a
:kw.returns:ekw. keyword on the :kw.method:ekw. instruction), an error
is reported.
:eol.
:p.
Language processors may provide options to prevent, or warn of, these
defaults being applied, as desired.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 40
