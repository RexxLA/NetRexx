.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2000.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refoeprs.Expressions and variables
.pi /Overview/expressions
.pi /Overview/variables
.pi /Expressions/overview
.pi /Variables/overview
.* Converted 3 Sep 1996 10:36:11
:p.
Like :kw.say:ekw. in the :q.toast:eq. example, many instructions in NetRexx
include :hp1.expressions:ehp1. that will be evaluated.  NetRexx provides
arithmetic operators (including integer division, remainder, and power
operators), several concatenation operators, comparison operators, and
logical operators.  These can be used in any combination within a
NetRexx expression (provided, of course, that the data values are valid
for those operations).
:p.
All the operators act upon strings of characters (known as :hp1.NetRexx
strings:ehp1.), which may be of any length (typically limited only by the
amount of storage available).  Quotes (either single or double) are used
to indicate literal strings, and are optional if the literal string is
just a number.  For example, the expressions&colon.
:xmp.
'2' + '3'
'2' + 3
  2 + 3
:exmp.
:p.
would all result in :hp4.'5':ehp4..
:p.
The results of expressions are often assigned to :hp1.variables:ehp1., using a
conventional assignment syntax&colon.
:xmp.
var1=5            /&z. sets var1 to '5'    &z./
var2=(var1+2)&z.10  /&z. sets var2 to '70' &z./
:exmp.
:p.
You can write the names of variables (and keywords) in whatever mixture
of uppercase and lowercase that you prefer; the language is not
case-sensitive.
.cp 10
:p.
This next sample program, :q.greet:eq., shows expressions used in
various ways&colon.
.pi /Example/program
:xmp.
/&z. greet.nrx -- a short program to greet you.        &z./
/&z. First display a prompt&colon.                           &z./
say 'Please type your name and then press Enter&colon.'
answer=ask            /&z. Get the reply into 'answer' &z./

/&z. If no name was entered, then use a fixed          &z./
/&z. greeting, otherwise echo the name politely.       &z./
if answer='' then say 'Hello Stranger!'
             else say 'Hello' answer'!'
:exmp.
:p.
After displaying a prompt, the program reads a line of text from the
user (:q.:hp4.ask:ehp4.:eq. is a keyword provided by NetRexx) and
assigns it to the variable :hp4.answer:ehp4..  This is then tested to
see if any characters were entered, and different actions are taken
accordingly; for example, if the user typed :q.:hp4.Fred:ehp4.:eq. in
response to the prompt, then the program would display&colon.
:xmp.
Hello Fred!
:exmp.
:p.
As you see, the expression on the last :kw.say:ekw. (display)
instruction concatenated the string :q.:hp4.Hello:ehp4.:eq. to the value
of variable :hp4.answer:ehp4. with a blank in between them (the blank is
here a valid operator, meaning :q.concatenate with blank:eq.).  The
string :q.:hp4.!:ehp4.:eq. is then directly concatenated to the result
built up so far.  These unobtrusive operators (the :hp1.blank
operator:ehp1. and abuttal) for concatenation are very natural and easy
to use, and make building text strings simple and clear.
:p.
The layout of instructions is very flexible.  In the :q.greet:eq.
example, for instance, the :kw.if:ekw. instruction could be laid out in
a number of ways, according to personal preference.  Line breaks can be
added at either side of the :kw.then:ekw. (or following the
:kw.else:ekw.).
[%odt
:p._
]]
.cp 5
:p.
In general, instructions are ended by the end of a line.  To continue a
instruction to a following line, you can use a hyphen (minus sign) just as
in English&colon.
:xmp.
say 'Here we have an expression that is quite long,' -
    'so it is split over two lines'
:exmp.
:p.
This acts as though the two lines were all on one line, with the hyphen
and any blanks around it being replaced by a single blank.  The net
result is two strings concatenated together (with a blank in between)
and then displayed.
:p.
When desired, multiple instructions can be placed on one line with the
aid of the semicolon separator&colon.
:xmp.
if answer='Yes' then do; say 'OK!'; exit; end
:exmp.
:p.
(many people find multiple instructions on one line hard to read, but
sometimes it is convenient).
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
