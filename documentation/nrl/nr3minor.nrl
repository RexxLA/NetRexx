.* ------------------------------------------------------------------
.* NetRexx Language Definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1998, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
.* February-April 1998
.* 2000.02.09 -- allow parent to qualify super() calls, where OK
.cp 40
:h2 id=refminor.Minor and Dependent classes
:p.
A :i.minor class:ei. in NetRexx is a class whose name is qualified by
the name of another class, called its :i.parent:ei., and a
:i.dependent class:ei. is a minor class that has a link to its parent
class that allows a child object simplified access to its parent
object and its properties.
.*
[%www
:p.The sections here are:
:ul.
:li.:a id=refsminorc.Minor classes
:li.:a id=refsdepen.Dependent classes
:li.:a id=refsminres.Restrictions
:eul.
]]
.cp 7
.* - - - - -
:h3 id=refsminorc.Minor classes
.pi start /Minor classes
.pi ref /Minor classes/Dependent classes
.pi ref /Inner classes/Minor classes
.pi ref /Nested classes/Minor classes
.pi /Classes/minor
.pi /Classes/parent
.pi /Parent class
.pi /Full name/of classes
.pi /Short name/of classes
.pi /Constructors/in minor classes
:p.
A :i.minor class:ei. in NetRexx is a class whose name is qualified by
the name of another class, called its :i.parent:ei..
This qualification is indicated by the form of the name of the class:
the short name of the minor class is prefixed by the name of its parent
class (separated by a period).
For example, if the parent is called :m.Foo:em. then the full name of a
minor class :m.Bar:em. would be written :m.Foo.Bar:em..
The short name, :m.Bar:em., is used for the name of any constructor
method for the class; outside the class it can only be used to identify
the class in the context of the parent class (or from children of the
minor class, see below).
:p.
The names of minor classes may be used in exactly the same way as
other class names (types) in programs.  For example, a property might be
declared and initialized thus:
:xmp.
abar=Foo.Bar null   -- this has type Foo.Bar
:exmp.
:pc.or, if the class has a constructor, perhaps:
:xmp.
abar=Foo.Bar()      -- constructs a Foo.Bar object
:exmp.
:p.
.pi /Minor classes/naming of
Minor classes must be in the same program (and hence in the same
package) as their parent.  They are introduced by a :kw.class:ekw.
instruction that specifies their full name, for example:
:xmp.
class Foo.Bar extends SomeClass
:exmp.
:p.
Minor classes must immediately follow their parent class.
:fn.
This allows compilers that generate Java source code to preserve line
numbering.
:efn.
:p.
.pi /Minor classes/nesting of
Minor classes may have a parent which is itself a minor class,
to any depth; the name and the positioning rules are extended as
necessary.  For example, the following classes might exist in a program:
:xmp.
class Foo
  class Foo.Bar
    class Foo.Bar.Nod
    class Foo.Bar.Pod
  class Foo.Car
:exmp.
:p.
As before, the children of :m.Foo.Bar:em. immediately follow their
parent.  The list of children of :m.Foo:em. can be continued after
the children of :m.Foo.Bar:em. have all been specified.
:p.
Note that the short name (last part of the name) of a minor class may
not be the same as the short name of any of its parents (a
class :m.Foo.Bar.Foo:em. or a class :m.Foo.Bar.Bar:em. would be in
error, for example).  This allows minor classes to refer to their parent
classes by their short name without ambiguity.
.*
.cp 7
:h4.Constructing objects in minor classes
.pi /Minor classes/constructing
.pi /Constructors/of minor classes
:p.
A parent class can construct an object of a child class in the usual
manner, by simply specifying its constructor (identified by its short
name, full name, or qualified name).
For example, a method in the :m.Foo.Bar:em. class above could construct
an object of type :m.Foo.Bar.Nod:em. using:
:xmp.
anod=Nod()
:exmp.
:pc.(assuming the :m.Foo.Bar.Nod:em. class has a constructor that takes no
arguments).
:p.
Similarly, minor classes can refer to the types and constructors of any
of its parents by simply using their short names.
Hence, the :m.Foo.Bar.Nod:em. class could construct objects of its
parents' types thus:
:xmp.
abar=Bar()
afoo=Foo()
:exmp.
:pc.(again assuming the parent classes have constructors that take no
arguments).
:p.
Classes other than the parent or an immediate child must use the full
name (if necessary, qualified by the package name) to refer to a minor
class or its constructor.
.*
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.cp 7
:h3 id=refsdepen.Dependent classes
.pi start /Dependent classes
.pi /Classes/dependent
.pi /DEPENDENT/on CLASS instruction
.pi ref /Dependent classes/Minor classes
.pi ref /Member classes/Dependent classes
:p.
As described in the last section, minor classes provide an enhanced
packaging (naming) mechanism for classes, allowing classes to be
structured within packages.  A stronger link between a child class and
its parent is indicated by the modifier keyword :kw.dependent:ekw. on the
child class, which indicates that the child is a :i.dependent class:ei..
For example:
:xmp.
class Foo.Dep dependent extends SomeClass
  method Dep   -- this is the constructor
:exmp.
:p.
.pi /Dependent object
.pi /Parent object
An object constructed from a dependent class (a :i.dependent
object:ei.) is linked to the context of an object of its parent
type (its :i.parent object:ei.).
The linkage thus provided allows the child object simplified access to
the parent object and its properties.
:p.
In the example, an object of type :m.Foo.Dep:em. can only be constructed
in the context of a parent object, which must be of type :m.Foo:em..
.* - - - -
.cp 7
:h4.Constructing dependent objects
.pi /Dependent object/constructing
.pi /Constructors/of dependent objects
.pi /Parent/of dependent object
:p.
A parent class can construct a dependent object in the same way as when
constructing objects of other child types; that is, by simply specifying
its constructor.  In this case, however, the current object
(:m.this:em.) becomes the parent object of the newly constructed object.
For example, a method in the :m.Foo:em. class above could construct a
dependent object of type :m.Foo.Dep:em. using:
:xmp.
adep=Dep()
:exmp.
:pc.(assuming the :m.Dep:em. class has a constructor that takes no
arguments).
:p.
.pi /Constructors/qualified
In general, for a class to construct an object from a dependent class,
it must have a reference to an object of the parent class (which will
become the parent of the new object), and the constructor must be called
(by its short name) in the context of that parent object.  For example:
:xmp.
parentObject=Foo()
adep=parentObject.Dep()
:exmp.
:pc.(In the same way, the first example could have been written:
:xmp.
adep=this.Dep()
:exmp.
:pc.within the parent class the :m.this.:em. is implied.)
.*
:p.
.pi /Special methods/super
.pi /SUPER/special method
In order to subclass a dependent class, the constructor of the dependent
class must be invoked by the subclass constructor in a similar manner.
In this case, a qualified call to the usual special
constructor :m.super:em. is used, for example:
:xmp.
class ASub extends Foo.Dep
  method Asub(afoo=Foo)
    afoo.super()
:exmp.
:p.The qualifier (:m.afoo:em. in the example) must be either the name of
an argument to the constructor, or the special word :m.parent:em. (if
the classes share a common parent class), or the short name of a parent
class followed by :m..this:em. (see below).
The call to :m.super:em. must be the first instruction in the method, as
usual, and it must be present (it will not be generated automatically by
the compiler).
.*
.cp 7
:h4.Access to parent objects and their properties
:p.
Dependent classes have simplified access to their parent objects and
their properties.
.* just as subclasses have simplified access to the properties and
.* methods of their superclasses.
In particular:
:ul.
.pi /Special words/parent
.pi /PARENT/special word
:li.The special word :m.parent:em. may be used to refer to the
parent object of the current object.  It may appear alone in a term, or
at the start of a compound term.
It can only be used in non-static contexts in a dependent class.
:li.
.pi /Special words/this
.pi /THIS/special word
In general, any of the objects in the chain of parents of a dependent
object may be referred to by qualifying the special word :m.this:em.
with the short name of the parent class.
For example, extending the previous example, if the
class :m.Foo.Dep.Ent:em. was a dependent class it could contain
references to :m.Foo.this:em. (the parent of its parent)
or :m.Dep.this:em. (the latter being the same as
specifying :m.parent:em.).  If preferred, the full name or the fully
qualified name of the parent class may be used instead of the short
name.
:p.
Like :m.parent:em., this construct can only be used at the start of a
term in non-static contexts in a dependent class.
:li.
.pi /Properties/in minor classes
.pi /Properties/in dependent classes
As usual, properties external to the current class must always be
qualified in some way (for example, the prefix :m.parent.:em. can be
used in a term such as :m.parent.aprop:em.).
:eul.
.*
.cp 7
:h3 id=refsminres.Restrictions
.pi /Minor classes/restrictions
.pi /Dependent classes/restrictions
:p.
Minor classes may have any of the attributes (:kw.public:ekw.,
:kw.interface:ekw., &etc.) of other classes, and behave in every way
like other classes, with the following restrictions:
:ul.
:li.
If a class is a static class (that is, it contains only static or
constant properties and methods) then any children cannot be dependent
classes (because no object of the parent class can be constructed).
Similarly, interface classes and abstract classes cannot have dependent
classes.
:li.
Dependent classes may not be interfaces.
.* they could compile, but..
:li.
.pi /Properties/in dependent classes
Dependent classes may not contain static or constant properties (or
methods).
:fn.
This restriction allows compilation for the Java platform.
:efn.
These must be placed in a parent which is not a dependent class.
:li.
Minor classes may be public only if their parent is also public.
(Note that this is the only case where more than one public class is
permitted in a program.)  In general: a minor class cannot be more
visible than its parent.
:eul.
.*
.* note: no extensions to Import at present
.* note: private properties and methods remain private
.*       we could add a 'dependent' visibility later.
.pi end /Dependent classes
.pi end /Minor classes
