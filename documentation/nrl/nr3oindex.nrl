.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2000.  All Rights Reserved.
.* ------------------------------------------------------------------
.* Converted 3 Sep 1996 10:36:11
.* 2000.08.23 Extend example
:h2 id=refoindex.Indexed strings
.pi /Overview/indexed strings
.pi /Indexed strings/overview
:p.
NetRexx provides indexed strings, adapted from the compound variables of
Rexx.  Indexed strings form a powerful :q.associative lookup:eq.,
or :hp1.dictionary:ehp1., mechanism which can be used with a
convenient and simple syntax.
:p.
NetRexx string variables can be referred to simply by name, or also by
their name qualified by another string (the :hp1.index:ehp1.).  When an
index is used, a value associated with that index is either set:
:xmp.
fred=0         -- initial value
fred&lbrk.3&rbrk.='abc'  -- indexed value
:exmp.
:pc.
or retrieved:
:xmp.
say fred&lbrk.3&rbrk.    -- would say "abc"
:exmp.
:pc.in the latter case, the simple (initial) value of the variable is
returned if the index has not been used to set a value.  For example,
the program&colon.
.pi /Example/program
:xmp.
bark='woof'
bark&lbrk.'pup'&rbrk.='yap'
bark&lbrk.'bulldog'&rbrk.='grrrrr'
say bark&lbrk.'pup'&rbrk. bark&lbrk.'terrier'&rbrk. bark&lbrk.'bulldog'&rbrk.
:exmp.
:pc.would display
:xmp.
yap woof grrrrr
:exmp.
:p.
Note that it is not necessary to use a number as the index; any
expression may be used inside the brackets; the resulting string is
used as the index.  Multiple dimensions may be used, if required&colon.
.pi /Example/program
:xmp.
bark='woof'
bark['spaniel', 'brown']='ruff'
bark['bulldog']='grrrrr'
animal='dog'
say bark['spaniel', 'brown'] bark['terrier'] bark['bull'animal]
:exmp.
:p.
which would display
:xmp.
ruff woof grrrrr
:exmp.
.cp 21
:p.
.pi /Programs/examples
.pi /Example/program
.pi /Example/indexed strings
.pi /Indexed strings/example
.* Special-case spot reference
.* .se refjust1 = &
Here's a more complex example using indexed strings, a test program with
a function (called a :hp1.static method:ehp1. in NetRexx) that removes
all duplicate words from a string of words&colon.
:xmp.
/&z. justonetest.nrx -- test the justone function.      &z./
say justone('to be or not to be')  /&z. simple testcase &z./
exit

/&z. This removes duplicate words from a string, and    &z./
/&z. shows the use of a variable (HADWORD) which is     &z./
/&z. indexed by arbitrary data (words).                 &z./
method justone(wordlist) static
  hadword=0         /&z. show all possible words as new &z./
  outlist=''            /&z. initialize the output list &z./
  loop while wordlist&bslash.=''  /&z. loop while we have data &z./
    /&z. split WORDLIST into first word and residue     &z./
    parse wordlist word wordlist
    if hadword&lbrk.word&rbrk. then iterate /&z. loop if had word &z./
    hadword&lbrk.word&rbrk.=1 /&z. remember we have had this word &z./
    outlist=outlist word   /&z. add word to output list &z./
    end
  return outlist         /&z. finally return the result &z./
:exmp.
:p.
Running this program would display just the four words
:q.:hp4.to:ehp4.:eq., :q.:hp4.be:ehp4.:eq., :q.:hp4.or:ehp4.:eq., and
:q.:hp4.not:ehp4.:eq..
.* :p.
.* This also shows another example of the built-in :hp1.string
.* parsing:ehp1. provided by the :kw.parse:ekw. instruction.  In this
.* instance, the value of :hp4.wordlist:ehp4. is parsed, with the first
.* word of the value being assigned to the variable :hp4.word:ehp4. and the
.* remainder being assigned back to :hp4.wordlist:ehp4. (replacing the
.* original value).
.* ------
.* :p.
.* &lbrk.Author's note&colon. since the notation for indexed variables
.* looks just like arrays (see the next section), but does not not suffer
.* the restrictions of arrays, I like to call them
.* :hp1.disarrays:ehp1..&rbrk.
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
