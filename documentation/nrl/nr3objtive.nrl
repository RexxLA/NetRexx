.* ------------------------------------------------------------------
.* NetRexx Part 1 Objectives                                      mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 nopage id=reflangob.Language objectives
.pi /Objectives of the NetRexx language
.pi /NetRexx/objectives
.pi /Philosophy of NetRexx
:p.
This
[%book
book
]]
[%odt
document
]]
describes a programming language, called NetRexx, which
is derived from both Rexx and Java.  NetRexx is intended as a dialect of
Rexx that can be as efficient and portable as languages such as Java,
while preserving the low threshold to learning and the ease of use of
the original Rexx language.
.*
:h4.Features of Rexx
.pi /Influence/of Rexx
.pi /Rexx/influence of
.pi /Rexx/features of
:p.
The Rexx programming language
:fn.
Cowlishaw, M. F., :hp2.The REXX Language:ehp2.
(second edition), ISBN 0-13-780651-5, Prentice-Hall, 1990.
:efn.
was designed with just one objective: to make programming easier than it
was before.  The design achieved this by emphasizing readability and
usability, with a minimum of special notations and restrictions.  It was
consciously designed to make life easier for its users, rather than for
its implementers.
:p.
.pi /Keyword safety
One important feature of Rexx syntax is :hp1.keyword safety:ehp1..
Programming languages invariably need to evolve over time as the needs
and expectations of their users change, so this is an essential
requirement for languages that are intended to be executed from source.
:p.
Keywords in Rexx are not globally reserved but are recognized only in
context.  This language attribute has allowed the language to be
extended substantially over the years without invalidating existing
programs.
Even so, some areas of Rexx have proved difficult to extend &dash. for
example, keywords are reserved within instructions such as :kw.do:ekw..
Therefore, the design for NetRexx takes the concept of keyword safety
even further than in Rexx, and also improves extensibility in other
areas.
.* For instance, a Rexx extension that allowed a binary literal
.* notation did, in fact, invalidate a few existing programs, so that style
.* of notation has been removed.
:p.
The great strengths of Rexx are its human-oriented features, including
:ul.
:li.simplicity
:li.coherent and uncluttered syntax
:li.comprehensive string handling
:li.case-insensitivity
:li.arbitrary precision decimal arithmetic.
:eul.
:pc.Care has been taken to preserve these.
Conversely, its interpretive nature has always entailed a lack of
efficiency: excellent Rexx compilers do exist, from IBM and other
companies, but cannot offer the full speed of statically-scoped
languages such as C
.pi /C, programming language
:fn.
Kernighan, B. W., and Ritchie, D. M., :hp2.The C Programming
Language:ehp2. (second edition), ISBN 0-13-110362-8, Prentice-Hall,
1988.
:efn.
or Java.
.pi /Java/programming language
:fn.
Gosling, J. A., :hp1.et al.:ehp1. :hp2.The Java Language
Specification:ehp2., ISBN 0-201-63451-1, Addison-Wesley, 1996.
:efn.
.*
:h4.Influence of Java
.pi /Influence/of Java
.pi /Influence/of C
.pi /Java/influence of
.pi /Java/features of
:p.
The system-independent design of Rexx makes it an obvious and natural
fit to a system-independent execution environment such as that provided
by the Java Virtual Machine (JVM).  The JVM, especially when enhanced
with :q.just-in-time:eq. bytecode compilers that compile bytecodes into
native code just before execution, offers an effective and attractive
target environment for a language like Rexx.
:p.
Choosing the JVM as a target environment does, however, place
significant constraints on the design of a language suitable for that
environment.  For example, the semantics of method invocation are in
several ways determined by the environment rather than by the source
language, and, to a large extent, the object model (class structure,
&etc.) of the Java environment is imposed on languages that use it.
:p.
Also, Java maintains the C concept of primitive datatypes; types
(such as :hp4.int:ehp4., a 32-bit signed integer) which allow efficient
use of the underlying hardware yet do not describe true objects.
These types are pervasive in classes and interfaces written in the Java
language; any language intending to use Java classes effectively must
provide access to these types.
:p.
Equally, the :hp1.exception:ehp1. (error handling) model of Java is
pervasive, to the extent that methods must check certain exceptions and
declare those that are not handled within the method.  This makes it
difficult to fit an alternative exception model.
.*
:p.
The constraints of safety, efficiency, and environment necessitated that
NetRexx would have to differ in some details of syntax and semantics
from Rexx; unlike Object Rexx, it could not be a fully
upwards-compatible extension of the language.
.pi /Object Rexx, programming language
:fn.
Nash, S. C., :hp2.Object-Oriented REXX:ehp2. :hp1.in:ehp1. Goldberg, G,
and Smith, P. H. III, :hp2.The Rexx Handbook:ehp2., pp115-125, ISBN
0-07-023682-8, McGraw-Hill, Inc., New York, 1992.
:efn.
The need for changes, however, offered the opportunity to make some
significant simplifications and enhancements to the language, both to
improve its keyword safety and to strengthen other features of
the original Rexx design.
:fn.
See Cowlishaw, M. F., :hp2.The Early History of REXX:ehp2., :hp1.IEEE
Annals of the History of Computing:ehp1., ISSN 1058-6180, Vol 16, No. 4,
Winter 1994, pp15-24, and Cowlishaw, M. F., :hp2.The Future of
Rexx:ehp2., :hp1.Proceedings of Winter 1993 Meeting/SHARE 80:ehp1.,
Volume II, p.2709, SHARE Inc., Chicago, 1993.
:efn.
Some additions from Object Rexx and ANSI Rexx
.pi /ANSI standard/for REXX
:fn.
See :hp2.American National Standard for Information Technology &dash.
Programming Language REXX:ehp2., X3.274-1996, American National
Standards Institute, New York, 1996.
:efn.
are also included.
:p.
Similarly, the concepts and philosophy of the Rexx design can profitably
be applied to avoid many of the minor irregularities that characterize
the C and Java language family, by providing suitable simplifications
in the programming model.  For example, the NetRexx looping construct
has only one form, rather than three, and exception handling can be
applied to all blocks rather than requiring an extra construct.
Also, as in Rexx, all NetRexx storage allocation and de-allocation
is implicit &dash. an explicit :hp4.new:ehp4. operator is not required.
:p.
Further, the human-oriented design features of Rexx (case-insensitivity
for identifiers, type deduction from context, automatic conversions
where safe, tracing, and a strong emphasis on string representations of
common values and numbers) make programming for the Java environment
especially easy in NetRexx.
.*
:h4.A hybrid or a whole?
:p.
As in other mixtures, not all blends are a success; when first designing
NetRexx, it was not at all obvious whether the new language would be an
improvement on its parents, or would simply reflect the worst features
of both.
:p.
The fulcrum of the design is perhaps the way in which datatyping is
automated without losing the static typing supported by Java.  Typing in
NetRexx is most apparent at interfaces &dash. where it provides most
value &dash. but within methods it is subservient and does not obscure
algorithms.  A simple concept, :hp1.binary classes:ehp1., also lets the
programmer choose between robust decimal arithmetic and less safe (but
faster) binary arithmetic for advanced programming where performance is
a primary consideration.
:p.
The :q.seamless:eq. integration of types into what was previously an
essentially typeless language does seem to have been a success,
offering the advantages of strong typing while preserving the ease of
use and speed of development that Rexx programmers have enjoyed.
:p.
The end result of adding Java typing capabilities to the Rexx language
is a single language that has both the Rexx strengths for scripting
and for writing macros for applications and the Java strengths of
robustness, good efficiency, portability, and security for application
development.
.*
