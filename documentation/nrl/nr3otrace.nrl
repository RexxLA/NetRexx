.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2000.  All Rights Reserved.
.* ------------------------------------------------------------------
.* Converted 3 Sep 1996 10:36:11
.* 2000.08.23 Correct example's formatting, add new context trace line
.*            Add trace var
:h2 id=refotrace.Tracing
.pi /Overview/tracing
.pi /Tracing/overview
:p.
NetRexx tracing is defined as part of the language.
The flow of execution of programs may be traced, and this trace can be
viewed as it occurs (or captured in a file).  The trace can show each
clause as it is executed, and optionally show the results of
expressions, &etc.  For example, the :kw.trace results:ekw. in the
program :q.:m.trace1.nrx:em.:eq.&colon.
.pi /Example/trace
.pi /Example/program
:xmp.
trace results
number=1/7
parse number before '.' after
say after'.'before
:exmp.
:p.
would result in&colon.
:xmp.
   --- trace1.nrx
 2 &z.=&z. number=1/7
   &gt.v&gt. number "0.142857143"
 3 &z.=&z. parse number before '.' after
   &gt.v&gt. before "0"
   &gt.v&gt. after "142857143"
 4 &z.=&z. say after'.'before
   &gt.&gt.&gt. "142857143.0"
142857143.0
:exmp.
:pc.
where the line marked with :q.:m.---:em.:eq. indicates the context
of the trace, lines marked with :q.:m.&z.=&z.:em.:eq. are the
instructions in the program, lines with :q.:m.&gt.v&gt.:em.:eq.
show results assigned to local variables, and lines with
:q.:m.&gt.&gt.&gt.:em.:eq. show results of un-named expressions.
:p.
Further, :kw.trace methods:ekw. lets you trace the use of all methods in
a class, along with the values of the arguments passed to each method.
Here's the result of adding :m.trace methods:em. to the Oblong class
shown earlier and then running :m.tryOblong:em.:
:xmp.
    --- Oblong.nrx
  8 &z.=&z.     method Oblong(newwidth, newheight)
    &gt.a&gt. newwidth "5"
    &gt.a&gt. newheight "3"
 26 &z.=&z.     method print
Oblong 5 x 3
 20 &z.=&z.     method relsize(relwidth, relheight)-
 21 &z.-&z.                   returns Oblong
    &gt.a&gt. relwidth "1"
    &gt.a&gt. relheight "1"
 26 &z.=&z.     method print
Oblong 6 x 4
 10 &z.=&z.     method Oblong(newwidth, newheight)
    &gt.a&gt. newwidth "1"
    &gt.a&gt. newheight "2"
 26 &z.=&z.     method print
Oblong 1 x 2
:exmp.
:pc.where
lines with :q.:m.&gt.a&gt.:em.:eq. show the names and values of the
arguments.
.* - - - - - -
.cp 5
:p.It's often useful to be able to find out when (and where) a
variable's value is changed.  The :kw.trace var:ekw. instruction does
just that; it adds names to or removes names from a list of monitored
variables. If the name of a variable in the current class or method is
in the list, then :kw.trace results:ekw. is turned on for any
assignment, :kw.loop:ekw., or :kw.parse:ekw. instruction that assigns a
new value to the named variable.
:p.
Variable names to be added to the list are specified by listing them
after the :kw.var:ekw. keyword.
Any name may be optionally prefixed by a :m.-:em. sign., which indicates
that the variable is to be removed from the list.
.cp 7
:p.For example, the program :q.:m.trace2.nrx:em.:eq.&colon.
.pi /Example/trace
.pi /Example/program
:xmp.
trace var a b
-- now variables a and b will be traced
a=3
b=4
c=5
trace var -b c
-- now variables a and c will be traced
a=a+1
b=b+1
c=c+1
say a b c
:exmp.
:pc.
would result in&colon.
:xmp.
    --- trace2.nrx
  3 &z.=&z. a=3
    &gt.v&gt. a "3"
  4 &z.=&z. b=4
    &gt.v&gt. b "4"
  8 &z.=&z. a=a+1
    &gt.v&gt. a "4"
 10 &z.=&z. c=c+1
    &gt.v&gt. c "6"
4 5 6
:exmp.
.*
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
