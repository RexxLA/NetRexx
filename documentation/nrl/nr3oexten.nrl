.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2000.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refoexten.Extending classes
.pi /Overview/extending classes
.pi /Extending classes/overview
.pi /Classes/overview
.* Converted 3 Sep 1996 10:36:11
:p.
It's common, when dealing with objects, to take an existing class and
extend it.  One way to do this is to modify the source code of the
original class &dash. but this isn't always available, and with many
different people modifying a class, classes could rapidly get
over-complicated.
:p.
Languages that deal with objects, like NetRexx, therefore allow new
classes of objects to be set up which are derived from existing classes.
For example, if you wanted a different kind of Oblong in which the
Oblong had a new property that would be used when printing the Oblong as
a rectangle, you might define it thus&colon.
.pi /Programs/examples
.pi /Example/program
:xmp.
/&z. charOblong.nrx -- an oblong class with character &z./
class charOblong extends Oblong
  printchar       -- the character for display

  /&z. Constructor to make a new oblong with character &z./
  method charOblong(newwidth, newheight, newprintchar)
    super(newwidth, newheight) -- make an oblong
    printchar=newprintchar     -- and set the character

  /&z. 'Print' the oblong &z./
  method print
    loop for super.height
      say printchar.copies(super.width)
      end
:exmp.
:p.
There are several things worth noting about this example&colon.
:ol.
:li.
The :q.:m.extends Oblong:em.:eq. on the class instruction means that
this class is an extension of the Oblong class.  The properties and
methods of the Oblong class are :hp1.inherited:ehp1. by this class (that
is, appear as though they were part of this class).
:p.
Another common way of saying this is that :q.:m.charOblong:em.:eq.
is a :hp1.subclass:ehp1. of :q.:m.Oblong:em.:eq. (and
:q.:m.Oblong:em.:eq. is the :hp1.superclass:ehp1. of
:q.:m.charOblong:em.:eq.).
:li.
This class adds the :m.printchar:em. property to the properties
already defined for Oblong.
:li.
The constructor for this class takes a width and height (just like
Oblong) and adds a third argument to specify a print character.  It
first invokes the constructor of its superclass (Oblong) to build
an Oblong, and finally sets the printchar for the new object.
:li.
The new charOblong object also prints differently, as a rectangle
of characters, according to its dimension.  The :m.print:em. method
(as it has the same name and arguments &dash. none &dash. as that of the
superclass) replaces (overrides) the :m.print:em. method of Oblong.
:li.
The other methods of Oblong are not overridden, and therefore can
be used on charOblong objects.
:eol.
:p.
The :m.charOblong.nrx:em. file is compiled just
like :m.Oblong.nrx:em. was, and should create a file
called :m.charOblong.class:em..
.cp 10
:p.
Here's a program to try it out&colon.
:xmp.
/&z. trycharOblong.nrx -- try the charOblong class &z./

first=charOblong(5,3,'#')  -- make an oblong
first.print                -- show it
first.relsize(1,1).print   -- enlarge and print again

second=charOblong(1,2,'&z.') -- make another oblong
second.print               -- and print it
:exmp.
:p.
This should create the two charOblong objects, and print them out in a
simple :q.character graphics:eq. form.
Note the use of the method :m.relsize:em. from Oblong to resize
the charOblong object.
.* - - -
:h4.Optional arguments
:p.
All methods in NetRexx may have optional arguments (omitted from the
right) if desired.  For an argument to be optional, you must supply a
default value.  For example, if the charOblong constructor was to have a
default value for :m.printchar:em., its method instruction could
have been written&colon.
:xmp.
method charOblong(newwidth, newheight, newprintchar='X')
:exmp.
:p.
which indicates that if no third argument is supplied
then :m.'X':em. should be used.  A program creating a charOblong
could then simply write&colon.
:xmp.
first=charOblong(5,3)       -- make an oblong
:exmp.
:p.
which would have exactly the same effect as if :m.'X':em. were
specified as the third argument.
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
