.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refoptions.Options instruction
.pi /OPTIONS/instruction
.pi /Instructions/OPTIONS
[%char
.bx left right
:xmp.
:hp2.options:ehp2. :hp1.wordlist:ehp1.;

where :hp1.wordlist:ehp1. is one or more :i.symbol:ei.s separated by blanks.
:exmp.
.bx off
]]
[%smff
.synopt
]]
.pi /System-dependent options
.pi /Compiler options
.pi /Interpreter options
.pi /Language processor options
:p.
The :kw.options:ekw. instruction is used to pass special requests to
the language processor (for example, an interpreter or compiler).
:p.
.pi /Option words
Individual words, known as :i.option words:ei., in the
:hp1.wordlist:ehp1. which are meaningful to the language processor will
be obeyed (these might control optimizations, enforce standards, enable
implementation-dependent features, &etc.); those which are not
recognized will be ignored (they are assumed to be instructions to a
different language processor).
Option words in the list that are known will be recognized independently
of case.
:p.
There may be zero or more :kw.options:ekw. instructions in a program.
They apply to the whole program, and must come before the first
:kw.class:ekw. instruction (or any instruction that starts a class).
.*
.* - - - - - - - - - -
.*
.cp 7
:p.
:ri.In the reference implementation, the known option words are::eri.
.pi /Option words
:dl tsize=25mm termhi=5.
.cp 4
:dt.binary
.pi /BINARY/in OPTIONS instruction
.pi /NOBINARY option
:dd.:ri.All classes in this program will be :a id=refbincla.binary
classes:ea..
In binary classes, literals are assigned binary (primitive) or native
string types, rather than NetRexx types, and native binary operations
are used to implement operators where appropriate, as described in
:a id=refbinary.:q.:hp1.Binary values and operations:ehp1.:eq.:ea..
In classes that are not binary, terms in expressions are converted to
the NetRexx string type, :hp4.Rexx:ehp4., before use by operators.:eri.
.cp 4
.* --- new
:dt.comments
.pi /COMMENTS option
.pi /NOCOMMENTS option
:dd.
:ri.Comments from the NetRexx source program will be passed through to the
the Java output file (which may be saved with a :hp4..java.keep:ehp4.
extension by using the :kw.-keep:ekw. command option).:eri.
:p.
:ri.Line comments become Java line comments (introduced by
:q.:hp4.//:ehp4.:eq.).
Block comments become Java block comments (delimited by
:q.:hp4./*:ehp4.:eq. and :q.:hp4.*/:ehp4.:eq.), with nested block
comments having their delimiters changed to :q.:hp4.(-:ehp4.:eq. and
:q.:hp4.-):ehp4.:eq.).:eri.
.* - - - -
.cp 4
.* --- new
:dt.compact
.pi /COMPACT option
.pi /NOCOMPACT option
:dd.
:ri.Requests that warnings and error messages be displayed in compact
form.  This format is more easily parsed than the default format, and
is intended for use by editing environments.:eri.
:p.
:ri.Each error message is presented as a single line, prefixed with the
error token identification enclosed in square brackets.
The error token identification comprises three words, with one blank
separating the words.  The words are: the source file specification, the
line number of the error token, the column in which it starts, and its
length.  For example (all on one line)::eri.
:xmp.
[D:\test\test.nrx 3 8 5] Error: The external name
'class' is a Java reserved word, so would not be
usable from Java programs
:exmp.
:pc.:ri.Any blanks in the file specification are replaced by a null
(:m.'\0':em.) character.  Additional words could be added to the error
token identification later.:eri.
.* - - - -
.cp 4
.* --- new
:dt.console
.pi /CONSOLE option
.pi /NOCONSOLE option
:dd.
:ri.Requests that compiler messages be written to console (the default).
Use :kw.-noconsole:ekw. to prevent messages being written to the
console.:eri.
:p.
:ri.This option only has an effect as a compiler option, and applies to all
programs being compiled.:eri.
.cp 4
:dt.crossref
.pi /CROSSREF option
.pi /NOCROSSREF option
:dd.:ri.Requests that cross-reference listings of variables be prepared,
by class.:eri.
.*
.cp 4
.* --- new
:dt.decimal
.pi /DECIMAL option
.pi /NODECIMAL option
:dd.
:ri.Decimal arithmetic may be used in the program.  If :kw.nodecimal:ekw. is
specified, the language processor will report operations that use (or,
like normal string comparison, might use) decimal arithmetic as an
error.  This option is intended for performance-critical programs where
the overhead of inadvertent use of decimal arithmetic is
unacceptable.:eri.
.*
.cp 4
:dt.diag
.pi /DIAG option
.pi /NODIAG option
:dd.:ri.Requests that diagnostic information (for experimental use only)
be displayed.
The :kw.diag:ekw. option word may also have side-effects.:eri.
.cp 4
.* --- new
:dt.explicit
.pi /EXPLICIT option
.pi /NOEXPLICIT option
:dd.
:ri.Requires that all local variables must be explicitly declared (by
assigning them a type but no value) before assigning any value to them.
This option is intended to permit the enforcement of :q.house styles:eq.
(but note that the NetRexx compiler always checks for variables which
are referenced before their first assignment, and warns of variables
which are set but not used).:eri.
.cp 4
:dt.format
.pi /FORMAT/option
.pi /NOFORMAT option
:dd.:ri.Requests that the translator output file (Java source code) be
formatted for improved readability.
Note that if this option is in effect, line numbers from the input file
will not be preserved (so run-time errors and exception trace-backs may
show incorrect line numbers).:eri.
.cp 4
.* --- new
:dt.java
.pi /JAVA option
.pi /NOJAVA option
:dd.
:ri.Requests that Java source code be produced by the translator.
If :kw.nojava:ekw. is specified, no Java source code will be produced;
this can be used to save a little time when checking of a program is
required without any compilation or Java code resulting.:eri.
.*
.cp 4
:dt.logo
.pi /LOGO option
.pi /NOLOGO option
:dd.:ri.Requests that the language processor display an introductory
logotype sequence (name and version of the compiler or interpreter,
&etc.).:eri.
.*
.cp 4
:dt.replace
.pi /REPLACE option
.pi /NOREPLACE option
:dd.:ri.Requests that replacement of the translator output
(:hp4..java:ehp4.) file be allowed.
The default, :kw.noreplace:ekw., prevents an existing :hp4..java:ehp4.
file being accidentally overwritten.:eri.
.cp 4
.* --- new
:dt.savelog
.pi /SAVELOG option
.pi /NOSAVELOG option
:dd.
:ri.Requests that compiler messages be written to the file NetRexxC.log in
the current directory.
The messages are also displayed on the console, unless
:kw.-noconsole:ekw. is specified.:eri.
:p.
:ri.This option only has an effect as a compiler option, and applies to all
programs being compiled.:eri.
.cp 4
.* --- new
:dt.sourcedir
.pi /SOURCEDIR option
.pi /NOSOURCEDIR option
:dd.
:ri.Requests that all :hp4..class:ehp4. files be placed in the same
directory as the source file from which they are compiled.  Other output
files are already placed in that directory.
Note that using this option will prevent the :kw.-run:ekw. command
option from working unless the source directory is the current
directory.:eri.
.*
.cp 4
:dt.strictargs
.pi /STRICTARGS option
.pi /NOSTRICTARGS option
:dd.
:ri.Requires that method invocations always specify parentheses, even
when no arguments are supplied.  Also, if :kw.strictargs:ekw. is in
effect, method arguments are checked for usage &dash. a warning is given
if no reference to the argument is made in the method.:eri.
.*
.cp 4
:dt.strictassign
.pi /STRICTASSIGN option
.pi /NOSTRICTASSIGN option
:dd.:ri.Requires that only exact type matches be allowed in assignments
(this is stronger than Java requirements).
This also applies to the matching of arguments in method calls.:eri.
.cp 4
:dt.strictcase
.pi /STRICTCASE option
.pi /NOSTRICTCASE option
:dd.:ri.Requires that local and external name comparisons for variables,
properties, methods, classes, and special words match in case (that is,
names must be identical to match).:eri.
.cp 4
.* --- New
:dt.strictimport
.pi /STRICTIMPORT option
.pi /NOSTRICTIMPORT option
:dd.
:ri.Requires that all imported packages and classes be imported
explicitly using :kw.import:ekw. instructions.  That is, if in effect,
there will be no :a id=refimport.automatic imports:ea., except those
related to the :kw.package:ekw. instruction.:eri.
:p.
:ri.This option only has an effect as a compiler option, and applies to all
programs being compiled.:eri.
.cp 4
.* --- New
:dt.strictprops
.pi /STRICTPROPS option
.pi /NOSTRICTPROPS option
:dd.
:ri.Requires that all properties, including those local to the
current class, be qualified in references.
That is, if in effect, local properties cannot appear as simple names
but must be qualified by :m.this.:em. (or equivalent) or the class name
(for static properties).:eri.
.cp 4
:dt.strictsignal
.pi /STRICTSIGNAL option
.pi /NOSTRICTSIGNAL option
:dd.:ri.Requires that all :a id=refchecked.checked exceptions:ea.
signalled within a method but not caught by a :kw.catch:ekw. clause be
listed in the :kw.signals:ekw. phrase of the method instruction.:eri.
.cp 4
.* --- new
:dt.symbols
.pi /SYMBOLS option
.pi /NOSYMBOLS option
:dd.
:ri.Symbol table information (names of local variables, &etc.)
will be included in any generated :hp4..class:ehp4. file.
This option is provided to aid the production of classes that are easy
to analyse with tools that can understand the symbol table information.
The use of this option increases the size of :hp4..class:ehp4.
files.:eri.
.cp 4
:dt.trace, traceX
.pi /TRACE/option
.pi /NOTRACE option
:dd.
:ri.If given as :kw.trace:ekw., :kw.trace1:ekw., or :kw.trace2:ekw.,
then :kw.trace:ekw. instructions are accepted.  The trace output is
directed according to the option word: :kw.trace1:ekw. requests
that trace output is written to the standard output stream,
:kw.trace:ekw. or :kw.trace2:ekw. imply that the output should be
written to the standard error stream (the default).:eri.
:p.
:ri.If :kw.notrace:ekw. is given, then trace instructions are ignored.
The latter can be useful to prevent tracing overheads while leaving
:kw.trace:ekw. instructions in a program.:eri.
.cp 4
:dt.utf8
.pi /Unicode/UTF-8 encoding
.pi /UTF-8 encoding
.pi /UTF8 option
.pi /NOUTF8 option
:dd.:ri.If given, clauses following the :kw.options:ekw. instruction are
expected to be encoded using UTF-8, so all Unicode characters may be
used in the source of the program.:eri.
:p.
:ri.In UTF-8 encoding, Unicode characters less than :hp4.'\u0080':ehp4. are
represented using one byte (whose most-significant bit is 0), characters
in the range :hp4.'\u0080':ehp4. through :hp4.'\u07FF':ehp4. are encoded
as two bytes, in the sequence of bits::eri.
:xmp.
110xxxxx 10xxxxxx
:exmp.
:pc.:ri.where the eleven digits shown as :hp4.x:ehp4. are the least
significant eleven bits of the character, and characters in the
range :hp4.'\u0800':ehp4. through :hp4.'\uFFFF':ehp4. are encoded as
three bytes, in the sequence of bits::eri.
:xmp.
1110xxxx 10xxxxxx 10xxxxxx
:exmp.
:pc.:ri.where the sixteen digits shown as :hp4.x:ehp4. are the
sixteen bits of the character.:eri.
:p.
:ri.If :kw.noutf8:ekw. is given, following clauses are assumed to comprise
only Unicode characters in the range :hp4.'\x00':ehp4.
through :hp4.'\xFF':ehp4., with the more significant byte of the
encoding of each character being 0.:eri.
:p.
:ri.:b.Note::eb.
this option only has an effect as a compiler option, and applies to
all programs being compiled.  If present on an :kw.options:ekw.
instruction, it is checked and must match the compiler option (this
allows processing with or without :kw.utf8:ekw. to be
enforced).:eri.
.cp 6
:dt.verbose, verboseX
.pi /VERBOSE option
.pi /VERBOSEn option
.pi /NOVERBOSE option
:dd.:ri.Sets the :q.noisiness:eq. of the language processor.
The digit :hp4.:hp1.X:ehp1.:ehp4. may be any of the digits :hp4.0:ehp4.
through :hp4.5:ehp4.; if omitted, a value of :hp4.3:ehp4. is used.
The options :kw.noverbose:ekw. and :kw.verbose0:ekw. both suppress all
messages except errors and warnings.:eri.
:edl.
:p.
:ri.Prefixing any of the above with :q.:kw.no:ekw.:eq. turns the selected
option off.:eri.
.cp 5
:p.:hp3.Example::ehp3.
:xmp.
options binary nocrossref nostrictassign strictargs
:exmp.
.cp 5
:p.
:ri.The default settings of the various options are::eri.
:xmp.
nobinary nocomments nocompact console crossref decimal nodiag noexplicit
noformat java logo noreplace nosavelog nosourcedir nostrictargs
nostrictassign nostrictcase nostrictimport nostrictprops nostrictsignal
nosymbols trace2 noutf8 verbose3
:exmp.
:p.
:ri.When an option word is repeated (in the same :kw.options:ekw.
instruction or not), or conflicting option words are specified, then the
last use determines the state of the option.:eri.
.cp 7
:p.
.pi /Command line options
.pi /Options/on command line
:ri.All option words may also be set as command line options when invoking
the processor, by prefixing them with :q.:hp4.-:ehp4.:eq.::eri.
.cp 5
:p.:hp3.Example::ehp3.
:xmp.
java COM.ibm.netrexx.process.NetRexxC -format foo.nrx
:exmp.
:pc.:ri.In this case, any options may come before, after, or between
file specifications.:eri.
:p.
:ri.With the except of the :kw.utf8:ekw. option (see above),
options set with the :kw.options:ekw. instruction override command-line
settings, following the :q.last use:eq. rule.:eri.
:p.
:ri.For more information, see the installation and user documentation for
your implementation.
:eri.
.*
.cp 45
