.* ------------------------------------------------------------------
.* NetRexx qtime.nrx sample program                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
.*  Change History
.*
.*  1996.09.08 -- initial (based on RexxAppA and qtime.nrx)
.*  2009.05.06 -- include in NRL2 book (based on nrlappb)
.*
:h1 id=refappa.Appendix A &ndash. A Sample NetRexx Program
.* .ty Page &refappa.: Appendix B - Sample program qtime
:p.
This appendix includes a short program, called :hp4.qtime:ehp4., which
is an example of a :q.real:eq. NetRexx program.  The programs included
elsewhere in this
[%book
book
]]
[%odt
document
]]
have been contrived to illustrate specific
points.  By contrast, :hp4.qtime:ehp4. is a simple but useful tool that
genuinely improves the human factors of computer systems.  People
frequently wish to know the time of day, and this program presents this
information in a natural way.
:p.
The style used for this example is the same as that used throughout
the
[%book
book,
]]
[%odt
document,
]]
with all symbols except those describing classes being written
in lower case.  Other NetRexx programming styles are possible, of
course; NetRexx syntax is designed to permit a wide variety of styles
with a minimum of punctuation.
:p.
The :hp4.qtime:ehp4. program is a modification of one of the first Rexx
programs ever written (much of the program is identical).  The main
changes are:
:ul.
:li.Indexed variables (brackets notation) are used instead of Rexx
stems.
:li.The :hp4.word:ehp4. method from the :hp4.Rexx:ehp4. class is used
instead of the :hp4.word:ehp4. Rexx built-in function.
:li.The Java :hp4.Date:ehp4. class is used to determine the current
time.
:eul.
.cp 12
:p.
.pi ref /Sample programs/Examples
.pi /Programs/examples
.pi /Example/program
.pi /qtime example program
:hp2.qtime.nrx &dash. Query Time:ehp2.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.* Quick fix to avoid XMP indention
.* .se saveappb = &@in@x    ;.* save current
.* .se @in@x    = 0         ;.* set new
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
:xmp.
.*
.* NB: change * to &z., and [] to symbols, too.
[%book
.* NB: blank line below here.

]]
/&z.--------------------------------------------------------&z./
/&z. qtime.nrx.  This program displays the time in English. &z./
/&z. If "?" is given as the first argument word then the    &z./
/&z. program displays a description of itself.              &z./
/&z.--------------------------------------------------------&z./

/&z.--------- First process any argument words -------------&z./
parse arg parm .           /&z. get the first argument word &z./
select
  when parm='?' then tell               /&z. say what we do &z./
  when parm=''  then nop        /&z. OK (no first argument) &z./
  otherwise
    say 'The only valid argument to QTIME is "?".  The word'
    say 'that you supplied ("'parm'") has been ignored.'
    tell       /&z. usually helpful to describe the program &z./
  end

/&z.-------- Now start processing in earnest ---------------&z./
/&z. Nearness phrases - using associative array lookup      &z./
near=''                                        /&z. default &z./
near&lbrk.0&rbrk.=''                                       /&z. exact &z./
near&lbrk.1&rbrk.=' just gone';  near&lbrk.2&rbrk.=' just after'     /&z. after &z./
near&lbrk.3&rbrk.=' nearly';     near&lbrk.4&rbrk.=' almost'        /&z. before &z./

/&z. Extract the hours, minutes, and seconds from the time. &z./
/&z. Use the Java Date class to get the time-of-day.        &z./
parse Date() . . . now .       /&z. time is the fourth word &z./
parse now hour':'min':'sec

if sec>29 then min=min+1              /&z. round up minutes &z./
mod=min//5            /&z. where we are in 5-minute bracket &z./
out="It's"near&lbrk.mod&rbrk.          /&z. start building the result &z./
if min>32 then hour=hour+1       /&z. we are TO the hour... &z./
min=min+2   /&z. shift minutes to straddle a 5-minute point &z./

/&z. Now special-case the result for Noon and Midnight.     &z./
if hour//12=0 & min//60<=4 then do
  if hour=12 then say out 'Noon.'
             else say out 'Midnight.'
  exit                            /&z. we are finished here &z./
  end

/&z. Find five-minute segment and convert to 12-hour clock. &z./
min=min-(min//5)                   /&z. find nearest 5 mins &z./
if hour>12
 then hour=hour-12            /&z. get rid of 24-hour clock &z./
 else if hour=0 then hour=12 /&z. .. and allow for midnight &z./
[%book
:exmp.
.fo right
:hp1.continued&ellipsis.:ehp1.
.fo on
:xmp.
.sp 1
]]
[%odt
:exmp.
:p keep.
:hp1.continued&ellipsis.:ehp1.
:xmp.
]]
/&z. Determine the phrase to use for each 5-minute segment. &z./
select
  when min= 0 then nop             /&z. add "o'clock" later &z./
  when min=60 then min=0                         /&z. ditto &z./
  when min= 5 then out=out 'five past'
  when min=10 then out=out 'ten past'
  when min=15 then out=out 'a quarter past'
  when min=20 then out=out 'twenty past'
  when min=25 then out=out 'twenty-five past'
  when min=30 then out=out 'half past'
  when min=35 then out=out 'twenty-five to'
  when min=40 then out=out 'twenty to'
  when min=45 then out=out 'a quarter to'
  when min=50 then out=out 'ten to'
  when min=55 then out=out 'five to'
  end

numbers='one two three four five six'-  /&z. (continuation) &z./
  'seven eight nine ten eleven twelve '
out=out numbers.word(hour)         /&z. add the hour number &z./
if min=0 then out=out "o'clock"   /&z. and o'clock if exact &z./

say out'.'                    /&z. display the final result &z./
exit

/&z.--------------------------------------------------------&z./
/&z. Tell: function that describes the use of the program.  &z./
/&z.--------------------------------------------------------&z./
method tell static
 say 'QTIME displays the current time in natural English.'
 say 'Call without any arguments to display the time, or'
 say 'with "?" to display this information.'
 say 'British English idioms are used in this program.'
 say /&z. space -- we are about to continue and show time.  &z./
 return

/&z. Mike Cowlishaw,  December 1979 - January 1985          &z./
/&z. NetRexx version March 1996                             &z./
:exmp.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.* .se @in@x    = &saveappb ;.* restore xmp indent
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.* = = = = = = = = = = = = = = = =
