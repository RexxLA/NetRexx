.* ------------------------------------------------------------------
.* NetRexx overview                                               mfc
.* Copyright (c) Mike Cowlishaw 1996, 2000.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refoobjec.Things that aren't strings
.pi /Overview/objects
.pi /Objects/overview
.* Converted 3 Sep 1996 10:36:11
:p.
In all the examples so far, the data being manipulated (numbers, words,
and so on) were expressed as a string of characters.  Many things,
however, can be expressed more easily in some other way, so NetRexx
allows variables to refer to other collections of data, which are known
as :hp1.objects:ehp1..
:p.
Objects are defined by a name that lets NetRexx determine the data
and methods that are associated with the object.  This name identifies
the type of the object, and is usually called the :hp1.class:ehp1. of
the object.
:p.
For example, an object of class Oblong might represent an oblong to be
manipulated and displayed.  The oblong could be defined by two
values&colon. its width and its height.  These values are called the
:hp1.properties:ehp1. of the Oblong class.
:p.
Most methods associated with an object perform operations on the object;
for example a :hp4.size:ehp4. method might be provided to change the
size of an Oblong object.  Other methods are used to construct objects
(just as for arrays, an object must be constructed before it can
be used).  In NetRexx and Java, these :hp1.constructor:ehp1. methods
always have the same name as the class of object that they build
(:q.Oblong:eq., in this case).
:p.
Here's how an Oblong class might be written in NetRexx (by convention,
this would be written in a file called :hp4.Oblong.nrx:ehp4.;
implementations often expect the name of the file to match the name of
the class inside it)&colon.
.pi /Programs/examples
.pi /Example/program
:xmp.
/&z. Oblong.nrx -- simple oblong class &z./
class Oblong
  width       -- size (X dimension)
  height      -- size (Y dimension)

  /&z. Constructor method to make a new oblong &z./
  method Oblong(newwidth, newheight)
    -- when we get here, a new (uninitialized) object
    -- has been created.  Copy the parameters we have
    -- been given to the properties of the object&colon.
    width=newwidth; height=newheight

  /&z. Change the size of an Oblong &z./
  method size(newwidth, newheight) returns Oblong
    width=newwidth; height=newheight
    return this   -- return the resized object

  /&z. Change the size of an Oblong, relatively &z./
  method relsize(relwidth, relheight)-
                returns Oblong
    width=width+relwidth; height=height+relheight
    return this

  /&z. 'Print' what we know about the oblong &z./
  method print
    say 'Oblong' width 'x' height
:exmp.
:p.
To summarize&colon.
:ol.
:li.
A class is started by the :kw.class:ekw. instruction, which names the
class.
:li.
The :kw.class:ekw. instruction is followed by a list of the properties
of the object.  These can be assigned initial values, if required.
:li.
The properties are followed by the methods of the object.  Each
method is introduced by a :kw.method:ekw. instruction which names the
method and describes the arguments that must be supplied to the method.
The body of the method is ended by the next method instruction (or
by the end of the file).
:eol.
.cp 12
:p.
The :hp4.Oblong.nrx:ehp4. file is compiled just like any other NetRexx
program, and should create a :hp1.class file:ehp1.
called :hp4.Oblong.class:ehp4..
Here's a program to try out the Oblong class&colon.
:xmp.
/&z. tryOblong.nrx -- try the Oblong class &z./

first=Oblong(5,3)        -- make an oblong
first.print              -- show it
first.relsize(1,1).print -- enlarge and print again

second=Oblong(1,2)       -- make another oblong
second.print             -- and print it
:exmp.
:p.
when :hp4.tryOblong.nrx:ehp4. is compiled, you'll notice (if your
compiler makes a cross-reference listing available) that the
variables :hp4.first:ehp4. and :hp4.second:ehp4. have
type :hp4.Oblong:ehp4..
These variables refer to Oblongs, just as the variables in earlier
examples referred to NetRexx strings.
:p.
Once a variable has been assigned a type, it can only refer to objects
of that type.  This helps avoid errors where a variable refers to an
object that it wasn't meant to.
.* - - - - -
:h4.Programs are classes, too
:p.
It's worth pointing out, here, that all the example programs in this
overview are in fact classes (you may have noticed that compiling them
with the reference implementation creates :hp4.:hp1.xxx:ehp1..class:ehp4.
files, where :hp4.:hp1.xxx:ehp1.:ehp4. is the name of the source file).
The environment underlying the implementation will allow a class to run
as a stand-alone :hp1.application:ehp1. if it has a static method
called :hp4.main:ehp4. which takes an array of strings as its argument.
:p.
If necessary (that is, if there is no class instruction) NetRexx
automatically adds the necessary class and method instructions for a
stand-alone application, and also an instruction to convert the array of
strings (each of which holds one word from the command string) to a
single NetRexx string.
:p.
The automatic additions can also be included explicitly; the
:q.toast:eq. example could therefore have been written&colon.
:xmp.
/&z. This wishes you the best of health. &z./
class toast
  method main(argwords=String&lbrk.&rbrk.) static
    arg=Rexx(argwords)
    say 'Cheers!'
:exmp.
:pc.though in this program the argument string, :hp4.arg:ehp4., is not
used.
.* ------
.cp 20
.* From "nrover.doc", version 0.79.
