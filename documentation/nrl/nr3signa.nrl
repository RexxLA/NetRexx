.* ------------------------------------------------------------------
.* NetRexx language definition                                    mfc
.* Copyright (c) Mike Cowlishaw 1996, 2009.  All Rights Reserved.
.* ------------------------------------------------------------------
:h2 id=refsignal.Signal instruction
.pi /SIGNAL instruction
.pi /Instructions/SIGNAL
.pi /Flow control/abnormal, with SIGNAL
.pi ref /Trapping of exceptions/SIGNAL
.pi ref /Raising exceptions/SIGNAL
.pi /Trapping of exceptions
.pi /Raising exceptions
.pi /Exceptions/raising
.pi /Exceptions/signalling
.pi /Exceptions/throwing
.* .pi /Term/on SIGNAL instruction
[%char
.bx left right
:xmp.
:hp2.signal:ehp2. :hp1.term:ehp1.;
:exmp.
.bx off
]]
[%smff
.synsig
]]
.*.......
:p.The :kw.signal:ekw. instruction causes an :q.abnormal:eq. change
in the flow of control, by raising an :i.exception:ei..
:p.
The exception :hp1.term:ehp1. may be a term that constructs or evaluates
to an exception object, or it may be expressed as the name of an
exception type (in which case the default constructor, with no
arguments, for that type is used to construct an exception object).
The exception object then represents the exception and is available, if
required, when the exception is handled.
:p.
The handling of exceptions is detailed in the
:a id=refexcep.:hp1.Exceptions:ehp1.
section:ea..
In summary, when an exception is signalled, all active pending
:kw.do:ekw. groups, :kw.loop:ekw. loops, :kw.if:ekw. constructs, and
:kw.select:ekw. constructs may be ended.
For each one in turn, from the innermost:
:ol.
:li.No further clauses within the body of the construct will be executed
(in this respect, :kw.signal:ekw. acts like a :kw.leave:ekw. for the
construct).
:li.The :hp1.instructionlist:ehp1. following the first :kw.catch:ekw.
clause that matches the exception, if any, is executed.
:li.The :hp1.instructionlist:ehp1. following the :kw.finally:ekw.
clause for the construct, if any, is executed.
:eol.
:pc.If a :kw.catch:ekw. matched the exception the exception is deemed
handled, and execution resumes as though the construct ended normally
(unless a new exception was signalled in the :kw.catch:ekw. or
:kw.finally:ekw. instruction lists, in which case it is processed).
Otherwise, any enclosing construct is ended in the same manner.
If there is no enclosing construct, then the current method is ended and
the exception is signalled in the caller.
.cp 5;
:p.:hp2.Examples::ehp2.
:xmp.
signal RxErrorTrace
signal DivideException('Divide by zero')
:exmp.
:pc.
:ri.In the reference implementation, the :hp1.term:ehp1. must
either:eri.
:ul.
:li.
:ri.evaluate to an object that is assignable to the
type :hp4.Throwable:ehp4. (for example, a subclass
of :hp4.Exception:ehp4. or :hp4.RuntimeException:ehp4.).:eri.
:li.
:ri.be a type that is a subclass of :hp4.Throwable:ehp4., in which case
the default constructor (with no arguments) for the given type is used
to construct the exception object.:eri.
:eul.
.* - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
.* .pi end /SIGNAL/instruction
.cp 25
