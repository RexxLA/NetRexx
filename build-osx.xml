<?xml version="1.0" ?>

<project name="netrexx" basedir="." default="dist">

  <!-- =================================================================== -->
  <!-- NetRexx default settings                                            -->
  <!-- =================================================================== -->

  <property name="ant.netrexxc.binary"                         value="yes"/>
  <property name="ant.netrexxc.comments"                       value="true"/>
  <property name="ant.netrexxc.compact"                        value="true"/>
  <property name="ant.netrexxc.crossref"                       value="no"/>
  <property name="ant.netrexxc.format"                         value="false"/>
  <property name="ant.netrexxc.keep"                           value="true"/>
  <property name="ant.netrexxc.logo"                           value="true"/>
  <property name="ant.netrexxc.removeKeepExtension"            value="yes"/>
  <property name="ant.netrexxc.replace"                        value="yes"/>
  <property name="ant.netrexxc.strictargs"                     value="yes"/>
  <property name="ant.netrexxc.strictcase"                     value="yes"/>
  <property name="ant.netrexxc.strictsignal"                   value="yes"/>
  <property name="ant.netrexxc.suppressDeprecation"            value="true"/>
  <property name="ant.netrexxc.suppressExceptionNotSignalled"  value="false"/>
  <property name="ant.netrexxc.suppressMethodArgumentNotUsed"  value="true"/>
  <property name="ant.netrexxc.suppressPrivatePropertyNotUsed" value="true"/>
  <property name="ant.netrexxc.suppressVariableNotUsed"        value="false"/>
  <property name="ant.netrexxc.verbose"                        value="verbose0"/>


  <!-- =================================================================== -->
  <!-- Project properties                                                  -->
  <!-- =================================================================== -->

  <property name="name"         value="NetRexx"/>
  <property name="version"      value="3.0"/>

  <property name="root"          location="."/>
  <property name="sources"       value="${root}/src"/>
  <property name="build"         value="${root}/build"/>
  <property name="build.lib"     value="${build}/lib"/>
  <property name="build.classes" value="${build}/classes"/>

  <property name="runtimeDir"  value="netrexx/lang"/>
  <property name="compilerDir" value="COM/ibm/netrexx/process"/>
  <property name="testsDir"    value="COM/ibm/netrexx/diag"/>


  <!-- =================================================================== -->
  <!-- Preparation / creating build directories                            -->
  <!-- =================================================================== -->

  <target name="prepare">
    <mkdir dir="${build}"/>
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.classes}"/>

    <!-- Common Classpath -->
    <path id="common.class.path">
      <fileset dir="${java.home}/lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${java.home}/bundle/Classes">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${root}/ant">
        <include name="**/*.jar"/>
      </fileset>
    </path>

    <!-- Build Classpath has build.classes appended, all libs included -->
    <path id="build.class.path">
      <path refid="common.class.path"/>
      <fileset dir="${root}/lib">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement path="${build.classes}"/>
    </path>
    <property name="build.classpath" refid="build.class.path"/>

    <!-- Test Classpath has build.classes prepended, but NetRexxC.jar excluded, we don't want to pollute the fresh compiler -->
    <path id="test.class.path">
      <path refid="common.class.path"/>
      <pathelement path="${build.classes}"/>
      <fileset dir="${root}/lib">
        <include name="**/*.jar"/>
        <exclude name="NetRexxC.jar"/>
      </fileset>
    </path>
    <property name="test.classpath" refid="test.class.path"/>

    <!-- two netrexx compilers, one for building, later the built one for testing -->
    <taskdef name="buildnrc" classname="org.apache.tools.ant.taskdefs.optional.NetRexxC" classpathref="build.class.path"/>
    <taskdef name="testnrc"  classname="org.apache.tools.ant.taskdefs.optional.NetRexxC" classpathref="test.class.path"/>

  </target>


  <target name="compile.runtime" depends="prepare" description="compile runtime">
    <buildnrc srcDir="${sources}/${runtimeDir}" destDir="${build.classes}/${runtimeDir}" classpath="${test.classpath}"
      includes="*.nrx" excludes="RexxDictionary.nrx"/>
  </target>

  <target name="clean.runtime" depends="prepare" description="delete built runtime files">
    <delete dir="${build.classes}/netrexx/lang"/>
  </target>

  <target name="compile.process" depends="compile.runtime" description="compile translator">
    <!-- There's an outstanding issue with the compiler regarding the order of the files given and the dependency
         resolution. The best way to fix that is to break the build into smaller chunks and avoiding circular
         dependencies. As the latter will be fixed in the future, I hope, this two-step compile get's things up
         and running for the moment.
    -->
    <buildnrc srcDir="${sources}/${compilerDir}" destDir="${build.classes}/${compilerDir}" classpath="${test.classpath}"
      includes="RxChunk.nrx RxConvert.nrx RxFixup.nrx RxProcessor.nrx RxSource.nrx RxToken.nrx
                RxSignalPend.nrx RxType.nrx RxMessageOutput.nrx RxMessage.nrx"/>
    <buildnrc srcDir="${sources}/${compilerDir}" destDir="${build.classes}/${compilerDir}" classpath="${test.classpath}"
      includes="*.nrx" excludes="NetRexxS.nrx"/>
    <copy file="${sources}/${compilerDir}/NetRexxC.properties" todir="${build.classes}/${compilerDir}"/>
  </target>

  <target name="clean.process" depends="prepare" description="delete built translator files">
    <delete dir="${build.classes}/${compilerDir}"/>
  </target>

  <target name="compile" depends="compile.process" description="compile all (except tests)"/>


  <target name="compile.tests" depends="compile" description="compile tests">
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no"
      includes="DiagX.nrx"/>
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no"
      includes="*.nrx" excludes="DiagUTF8.nrx DiagAll.nrx"/>
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no" utf8="true"
      includes="DiagUTF8.nrx"/>
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no"
      includes="DiagAll.nrx"/>
  </target>

  <target name="-checkRunTestsRequired" depends="compile.tests">
    <uptodate property="noRunTestsRequired" targetfile="${build.classes}/${testsDir}/lastTestRun.ts">
      <srcfiles dir="${sources}/${runtimeDir}" includes="**/*"/>
      <srcfiles dir="${sources}/${compilerDir}" includes="**/*"/>
      <srcfiles dir="${sources}/${testsDir}" includes="**/*"/>
    </uptodate>
  </target>

  <target name="run.tests" depends="-checkRunTestsRequired" unless="noRunTestsRequired">
    <java classname="COM.ibm.netrexx.diag.DiagAll" classpath="${test.classpath}"/>
    <touch file="${build.classes}/${testsDir}/lastTestRun.ts"/>
  </target>

  <target name="clean.tests" depends="prepare" description="delete test files">
    <delete dir="${build.classes}/${testsDir}"/>
  </target>

  <target name="tests" depends="run.tests" description="compile and run tests"/>


  <target name="jars" depends="compile" description="create jars">
    <jar jarfile="${build.lib}/NetRexxR.jar" compress="yes" filesonly="true">
      <fileset dir="${build.classes}">
        <include name="${runtimeDir}/*.class"/>
      </fileset>
      <fileset dir="${root}">
        <include name="LICENSE"/>
      </fileset>
    </jar>
    <jar jarfile="${build.lib}/NetRexxC.jar" compress="yes" filesonly="true">
      <fileset dir="${build.classes}">
        <include name="${runtimeDir}/*.class"/>
        <include name="${compilerDir}/*.class"/>
        <include name="${compilerDir}/*.properties"/>
      </fileset>
      <fileset dir="${root}">
        <include name="LICENSE"/>
      </fileset>
    </jar>
  </target>

  <target name="clean.jar" description="delete built jars">
    <delete dir="${build.lib}"/>
  </target>

  <target name="apidocs" depends="compile" description="create API documentation">
  </target>

  <target name="clean" depends="clean.runtime, clean.process, clean.tests, clean.jar" description="delete all built files"/>

  <target name="dist" depends="compile, tests, jars, apidocs" description="build distribution"/>


</project>
