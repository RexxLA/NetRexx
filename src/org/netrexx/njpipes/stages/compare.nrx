-- compare.nrx Pipeline stage
/*
 *  Copyright (C) 1998, 2020  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

/*
   23/ 2/18  Documentation; givehelp(). Jeff Hennick
   20/ 9/18  Make input records type Rexx.  Jeff Hennick
   20/ 8/ 3  Add ECHO. Jeff Hennick
   20/ 8/ 1  Fix for blanks on both.  Jeff Hennick
   20/ 7/13  Fix reporting for null input.  Jeff Hennick
   19/11/22  Fix for null input.
             Add toString() on inputs.
             Add catch nulls.
             Fix for null/null input as equal.
             Fix output for first stream shorter; pad; control charactor transliteration. Jeff Hennick
   98/ 9/22  Added catch to selectInput(0).  JHennick
   98/ 8/24  JHennick
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class compare extends stage

   aany = boolean 0
   atrinary = boolean 0
   abinary = boolean 0
   aequal = boolean 0
   aless = boolean 0
   amore = boolean 0
   anotequal = boolean 0
   apad = rexx ' '
   echo = boolean 0

   o = rexx ''  -- output
   sany = rexx ''
   sless = rexx ''
   smore = rexx ''
   sequal = rexx ''
   snotequal = rexx ''

method run()

   arg = arg()

   if arg = '' then arg = 'TRINARY'

   loop while arg \= ''
      parse arg key ds

      select
         when key = 'TRINARY' then do
            atrinary = 1
            arg = ds
         end
         when key = 'BINARY' then do
            abinary = 1
            arg = ds
         end
         when key = 'EQUAL' then do
            aequal = 1
            dss = DString(ds)
            sequal = dss.string
            arg = dss.residue
         end
         when key = 'LESS' then do
            aless = 1
            dss = DString(ds)
            sless = dss.string
            arg = dss.residue
         end
         when key = 'MORE' then do
            amore = 1
            dss = DString(ds)
            smore = dss.string
            arg = dss.residue
         end
         when key = 'NOTEQUAL' then do
            anotequal = 1
            dss = DString(ds)
            snotequal = dss.string
            arg = dss.residue
         end
         when key = 'ANY' then do
            aany = 1
            dss = DString(ds)
            sany = dss.string
            arg = dss.residue
         end
         when key = 'PAD' then do
            parse arg . ds arg
            apad = GetXorc(ds)
         end
         when key = 'ECHO' then do
            parse arg . arg
            echo = 1
         end
         otherwise
            arg = ds
            leave
      end
   end

diff()

rc = mrc()
if rc=4 then rc=12

exit(rc*(rc<>12))

method diff() Signals ThreadQ
   r0 = rexx ''
   r1 = rexx ''
   o0 = rexx ''
   o1 = rexx ''
   echofirst = rexx ''
   o = rexx ''  -- prepare output record

   less = -1 -- short stream

   colno = 0 -- nonequal column number

   recno = Rexx 1
   loop recno = 1  -- non-equal record number
      do
         do
            i0 = peekto()
            o0 = Rexx i0
         catch nullPointerException
            o0 = ''
         end
         if echo then o = o recno.right(5) o0'\n'
      catch StageError
         less = 0
         r0 = ''
         do
            selectInput(1)
            i1 = peekto()
            o1 = Rexx i1
            if o1 = null then o1 = ''
            r1 = rexx o1.toString()
         catch StageError
            r1 = ''
         end
         leave
      end

      do
         r0 = rexx o0.toString()
      catch nullPointerException
         r0 = ''
      end

      do
         selectInput(1)
         i1 = peekto()
         o1 = Rexx i1
      catch StageError
         o1 = ''
         r1 = ''
         less = 1
         leave
      end
      do
         r1 = rexx o1.toString()
      catch nullPointerException
         r1 = ''
      end

      if r0 = null then r0 = ''
      if r1 = null then r1 = ''

      colno = r1.compare(r0, apad)
      if colno > 0 then leave

      readto()

      do
         selectInput(0)
      catch StageError
         less = 0
         leave
      end

      readto()

   catch StageError
   end

   if less = 0 then do  -- are we at the end of both?
      selectInput(1)
      i1 = peekto()
      o1 = Rexx i1
      if o1 = null then do
         less = -1 -- one last null, ignore
         r1 = ''
      end
   catch StageError
      less = -1         -- yes!
   end

   eq = 0

   if r0 = r1 then eq = 1

   leastStream = Rexx less
   mostStream = Rexx

   if less \= -1 then mostStream = \ less
   else mostStream = -1

   select
      when less < 0 & colno = 0 then eq = 1
      when less < 0 then less = r0.substr(colno, 1) > r1.substr(colno, 1)
      otherwise nop
   end

   if abinary then less = 1
   else if less \= -1 then less = less + less - 1 -- make it -1 or +1

   if eq then less = 0


   if aany then o = sany''o

   select
      when atrinary then o = less
      when abinary then o = less
      otherwise
         if eq & aequal then o = o sequal
         if \eq & anotequal then o = o snotequal
         if less < 0 & aless then o = o sless
         if less > 0 & amore then o = o smore
         if o.left(1) = '\n' then o = o.substr(2)
   end

   if o = '' then o = less

   if echo then do
      o = echofirst''o
      selectInput(0)
      readto()
      loop recno = recno + 1
         i0 = peekto()
         o0 = Rexx i0
         o = o recno.right(3) o0'\n'
         readto()
      catch StageError
      end
   catch StageError
   end
       -- clean up control chars
   nona = '\0'.sequence('\x1f')
   if r0 \= '' then r0 = r0.translate('',nona,219.d2c())
   if r1 \= '' then r1 = r1.translate('',nona,219.d2c())

   o = o.changestr('\\P',r0)
   o = o.changestr('\\p',r0)
   o = o.changestr('\\S',r1)
   o = o.changestr('\\s',r1)
   o = o.changestr('\\B',colno)
   o = o.changestr('\\b',colno)
   o = o.changestr('\\C',recno)
   o = o.changestr('\\c',recno)
   o = o.changestr('\\L',leastStream)
   o = o.changestr('\\l',leastStream)
   o = o.changestr('\\M',mostStream)
   o = o.changestr('\\m',mostStream)

   do
      selectOutput(0)
      output(o)
   catch StageError
   end
   do
      selectOutput(1)
      output(r0)
   catch StageError
   end
   do
      selectOutput(2)
      output(r1)
   catch StageError
   end

method givehelp() static
return -
"/** compare (6) -- Compare Primary and Secondary streams for equality\n" -
"\n" -
"               +-TRINARY-+  (1)           +-PAD SPACE-+\n" -
"  >>--COMPARE--+---------+------------+---+-----------+---+------+---------><\n" -
"               +-BINARY--+  (2)       |   +-PAD-Xorc--+   +-ECHO-+  (8)\n" -
"               |                      |\n" -
"               | <-----------------+  |\n" -
"               +--ANY DString------+--+   (4) (5)\n" -
"               +--EQUAL DString----+      (4)\n" -
"               +--LESS DString-----+  (3) (4)\n" -
"               +--MORE DString-----+  (3) (4)\n" -
"               +--NOTEQUAL DString-+      (4)\n" -
"\n" -
"     (1) -1 = Primary is shorter/less, 0 = equal, 1 = Secondary is shorter/less\n" -
"     (2) 0 = equal, 1 = not equal\n" -
"     (3) Primary is LESS/shorter (or MORE/longer) than secondary\n" -
"     (4) DStrings can use any of the following escapes (or the lowercase) for\n" -
"         the unequal situation: (Your shell program may require doubled backslashes.)\n" -
"                 \\C (count) for the record number,\n" -
"                 \\B (byte) for column number\n" -
"                 \\P (primary) for the primary stream record (7)\n" -
"                 \\S (secondary) for the secondary stream record (7)\n" -
"                 \\L (Least) for then stream number that is shortest, -1 if equal\n" -
"                 \\M (Most) for the stream number that is longest, -1 if equal\n" -
"                 \\N (New line) Line break\n" -
"     (5) Equal or not, this DString precedes any of the others\n" -
"     (6) This is njpipes only, not included in CMS\n" -
"     (7) In reporting \\P & \\S, control charactors, except new line, \\n, are transliterated to [blob, 219.d2c()]\n" -
"     (8) Without ECHO, this stops and reports at first non-compare. With ECHO, each primary input is reported;\n" -
"         after first non-compare primary input stream records continue to be read and reported, but no testing is done.\n" -
"     (9) Options work in any order\n" -
"\n" -
"     Input streams:\n" -
"        0: Data 1\n" -
"        1: Data 2\n" -
"\n" -
"     Output streams:\n" -
"        0: Result (single record, possibly multiple lines\n" -
"        1: Last primary record read at first no match, or end of stream\n" -
"        2: Last secondary record read at first no match, or end of stream\n" -
"\n" -
"*/\n"
