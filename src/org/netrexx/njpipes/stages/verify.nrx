-- verify.nrx  Pipeline stage
/*
 *  Copyright (C) 2020 Jeffrey Hennick Jeff (at) Jeff (dash) H (dot) com
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */


/*
  23/02/26 Documentation; givehelp(). Jeff Hennick
  20/ 7/ 4 Use xorc in code and documentation.  Jeff Hennick
  20/ 7/ 3 Broke into 4 loops for speed; Added character-range and multiples. Jeff Hennick
  20/ 7/ 2 Jeff Hennick
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class verify extends stage uses IRange

method run()

  args = arg()

  anycase = 0                          /* ANYCASE */
  if 'ANYCASE CASEANY CASEIGNORE IGNORECASE CASELESS'.wordpos(arg.word(1).upper) > 0 then do
    anycase = 1
    args = args.subword(2)
  end

                                       /* input RANGE */
  r = GetIRanges(args)
  args = r[0].Residue
  isRange = r[0].Number > 0

                                      /* delimited string / character-range loop */
  if args = '' then
    Emsg(11, 'No characters specified.')

  chars = Rexx ''

  loop while args <> ''
    loop while args <> ''
                          /* look for character-range */
      w1 = args.word(1)
      parse w1 fp '-' lp
      if lp = '' then leave
                               /* hex translate and validity checks */
      fc = GetXorc(fp)
      if fc = null then
          Emsg(11, 'Bad character "'fp'" in' args)
      lc = GetXorc(lp)
      if lc = null then
          Emsg(11, 'Bad character "'lp'" in' args)

      if lc < fc then
        Emsg(11, 'Bad character range:' args)

      loop i = fc.c2d to lc.c2d
        chars = chars || i.d2c
      end
      args = args.subword(2)
    end

    ds = DString(args)
    if ds.String() = '' then leave
    chars = chars || ds.String()
    args = ds.Residue()
  end

                                    /* extra? */
  if args <> '' then
    Emsg(11, 'Unrecognized as character-range or deliminted string:' ds.Residue())

                                    /* secondary output? */
  sec = 0
  do
    selectOutput(1)
    sec = 1
  catch stageError
  finally
    do
      selectOutput(0)
    catch stageError
      Emsg(11, 'No output stream connected')
    end
  end

                               /* copying the loop saves option testing inside the loop */
  select
    when isRange & anycase then do
      chars = chars.upper
      loop forever
        line = Rexx peekto()
        lc = r[1].SelIRange(line," ")
        lc = lc.upper
        if lc.verify(chars) = 0 then  /* Verifies */
          output(line)
        else if sec then do         /* No verify */
          selectOutput(1)
          output(line)
        catch stageError
          sec = 0
        finally
          selectOutput(0)
        end
        readto()
      catch StageError
        rc = rc()
      end
    end
    when isRange then
      loop forever
        line = Rexx peekto()
        lc = r[1].SelIRange(line," ")
        if lc.verify(chars) = 0 then  /* Verifies */
          output(line)
        else if sec then do         /* No verify */
          selectOutput(1)
          output(line)
        catch stageError
          sec = 0
        finally
          selectOutput(0)
        end
        readto()
      catch StageError
        rc = rc()
      end
    when anycase then do
      chars = chars.upper
      loop forever
        line = Rexx peekto()
        lc = line.upper
        if lc.verify(chars) = 0 then  /* Verifies */
          output(line)
        else if sec then do         /* No verify */
          selectOutput(1)
          output(line)
        catch stageError
          sec = 0
        finally
          selectOutput(0)
        end
        readto()
      catch StageError
        rc = rc()
      end
    end
    otherwise
      loop forever
        line = Rexx peekto()
        if line.verify(chars) = 0 then  /* Verifies */
          output(line)
        else if sec then do         /* No verify */
          selectOutput(1)
          output(line)
        catch stageError
          sec = 0
        finally
          selectOutput(0)
        end
        readto()
      catch StageError
        rc = rc()
      end
  end

exit(rc*(rc<>12))

Method givehelp() static
return -
"/** verify\n" -
"                                           v-------------------------+ (1)\n" -
">>--VERIFY--+------------+-+------------+--+--+--delimitedString--+--+--><\n" -
"            +-ANYCASE----+ +-inputRange-+     +--xorc-xorc--------+ (1)\n" -
"            +-CASEANY----+\n" -
"            +-CASEIGNORE-+\n" -
"            +-IGNORECASE-+\n" -
"            +-CASELESS---+\n" -
"\n" -
"  (1) NetRexx Pipelines only\n" -
"  (1) Examples:  A-Z 0-9 c-g a4-ba; 16-bit Unicode characters or hex numbers\n" -
"  (1) Any number greater than zero, any order, of delimitdStrings and xorc-xorc are allowed.\n" -
"\n" -
"*/\n"
