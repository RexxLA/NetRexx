/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

/** sort

This sort routine is very basic.  It uses sortRexx class, which implements
the sortClass interface.  To sort objects of classes other than Rexx requires
that you implement another sortClass with a name begining with 'sort'.

I implemented this class using an Java array for the objects to be sorted as
opposed to a Rexx stem.  Using an array is about 50% faster.  I choose a quick/
Bose Norman sort since I had the code, in Rexx, for it from a time before I
had pipes on CMS!

*/
-- 98/ 7/23 factored out of sort so the algorthym can be selected.  ejt
-- 98/ 7/20 exploit IRange.  ejt
-- 98/ 7/17 fix alg. problems when long strings of the same key. EJT

package org.netrexx.njpipes.stages

options binary nostrictcase nostrictargs nostrictsignal

import org.netrexx.njpipes.pipes.

class qsort extends object public uses IRange

properties constant private

/* Bose/Norman exchange pairs generated by the os2 rexx program bng.cmd */

c = [int 16, 0, 2, 4, 8, 11, 15, 18, 26, 31, 37, 41, 49, 54, 60, 64]

f = [[int 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 0, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 0, 3, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 4, 3, 3, 0, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 3, 5, 3, 4, 4, 0, 0, 1, 2, 2, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 0, 2, 0, 1, 1, 4, 6, 4, 5, 5, 0, 1, 1, 2, 3, 3, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 0, 2, 0, 1, 1, 4, 7, 6, 6, 4, 4, 5, 5, 5, 0, 0, 1, 1, 1, 2, 3, 3, 2, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 0, 3, 2, 2, 0, 0, 1, 1, 1, 5, 8, 7, 7, 5, 5, 6, 6, 6, 0, 1, 1, 2, 3, 4, 4, 3, 4, 2, 3, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 0, 3, 2, 2, 0, 0, 1, 1, 1, 6, 5, 5, 9, 8, 8, 5, 6, 7, 7, 6, 7, 0, 0, 1, 1, 1, 2, 3, 4, 4, 3, 4, 2, 3, 4, 4, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 4, 3, 3, 0, 1, 2, 2, 1, 2, 7, 6, 6, 10, 9, 9, 6, 7, 8, 8, 7, 8, 0, 1, 2, 2, 1, 2, 3, 4, 5, 5, 4, 5, 3, 4, 5, 5, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 4, 3, 3, 0, 1, 2, 2, 1, 2, 7, 6, 6, 9, 11, 9, 10, 10, 6, 6, 7, 8, 8, 7, 8, 8, 0, 0, 1, 2, 2, 1, 2, 2, 3, 4, 5, 5, 4, 5, 3, 3, 4, 5, 5, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 3, 5, 3, 4, 4, 0, 0, 1, 2, 2, 1, 2, 2, 8, 7, 7, 10, 12, 10, 11, 11, 7, 7, 8, 9, 9, 8, 9, 9, 0, 1, 2, 2, 1, 2, 3, 4, 4, 5, 6, 6, 5, 6, 6, 3, 4, 4, 5, 6, 5, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 3, 5, 3, 4, 4, 0, 0, 1, 2, 2, 1, 2, 2, 7, 9, 7, 8, 8, 11, 13, 11, 12, 12, 7, 8, 8, 9, 10, 10, 9, 10, 10, 0, 0, 1, 2, 2, 1, 2, 2, 3, 4, 4, 5, 6, 6, 5, 6, 6, 3, 4, 4, 5, 6, 6, 5, 6, 6, 0, 0, 0, 0], -
     [int 0, 2, 0, 1, 1, 4, 6, 4, 5, 5, 0, 1, 1, 2, 3, 3, 2, 3, 3, 8, 10, 8, 9, 9, 12, 14, 12, 13, 13, 8, 9, 9, 10, 11, 11, 10, 11, 11, 0, 1, 1, 2, 3, 3, 2, 3, 3, 4, 5, 5, 6, 7, 7, 6, 7, 7, 4, 5, 5, 6, 7, 7, 6, 7, 7]  -
    ]

t = [[int 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 3, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 4, 4, 3, 3, 2, 4, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 2, 2, 1, 5, 5, 4, 3, 4, 5, 4, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 2, 2, 1, 4, 6, 5, 6, 5, 4, 3, 5, 6, 5, 3, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 3, 2, 3, 2, 5, 7, 6, 7, 6, 4, 5, 4, 6, 7, 6, 4, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 3, 2, 3, 2, 5, 8, 8, 7, 7, 6, 8, 7, 6, 5, 4, 6, 5, 4, 7, 8, 7, 5, 4, 6, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 4, 4, 3, 3, 2, 4, 3, 2, 6, 9, 9, 8, 8, 7, 9, 8, 7, 5, 6, 5, 7, 8, 9, 8, 7, 7, 5, 6, 6, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 1, 4, 4, 3, 3, 2, 4, 3, 2, 7, 7, 6, 10, 10, 9, 8, 9, 10, 9, 8, 8, 6, 5, 7, 6, 5, 8, 9, 10, 9, 8, 8, 5, 6, 7, 6, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 2, 2, 1, 5, 5, 4, 3, 4, 5, 4, 3, 3, 8, 8, 7, 11, 11, 10, 9, 10, 11, 10, 9, 9, 6, 7, 8, 7, 6, 6, 9, 10, 11, 10, 9, 9, 6, 7, 8, 7, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 2, 2, 1, 5, 5, 4, 3, 4, 5, 4, 3, 3, 8, 8, 7, 10, 12, 11, 12, 11, 10, 9, 11, 12, 11, 9, 10, 9, 7, 6, 8, 9, 8, 6, 7, 6, 10, 11, 12, 11, 10, 10, 7, 6, 8, 9, 8, 6, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 2, 2, 1, 4, 6, 5, 6, 5, 4, 3, 5, 6, 5, 3, 4, 3, 9, 9, 8, 11, 13, 12, 13, 12, 11, 10, 12, 13, 12, 10, 11, 10, 7, 8, 9, 8, 7, 7, 10, 11, 10, 12, 13, 12, 10, 11, 10, 7, 8, 7, 9, 9, 7, 8, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], -
     [int 2, 2, 1, 4, 6, 5, 6, 5, 4, 3, 5, 6, 5, 3, 4, 3, 8, 10, 9, 10, 9, 12, 14, 13, 14, 13, 11, 12, 11, 13, 14, 13, 11, 12, 11, 8, 7, 9, 10, 9, 7, 8, 7, 11, 12, 11, 13, 14, 13, 11, 12, 11, 7, 8, 7, 9, 10, 9, 7, 8, 7, 0, 0, 0, 0], -
     [int 1, 3, 2, 3, 2, 5, 7, 6, 7, 6, 4, 5, 4, 6, 7, 6, 4, 5, 4, 9, 11, 10, 11, 10, 13, 15, 14, 15, 14, 12, 13, 12, 14, 15, 14, 12, 13, 12, 8, 9, 8, 10, 11, 10, 8, 9, 8, 12, 13, 12, 14, 15, 14, 12, 13, 12, 8, 9, 8, 10, 11, 10, 8, 9, 8]  -
    ]

properties private

K = sortClass[]

method qsort(KK=sortClass[])
K = KK

method quicksort(m=int, n=int)

i = int
j = int
w = int

loop while m < n
   a = n-m
   if a<c[0] then                  /* use bose/norman sort */
      do
         bn(m,a)
         return
      end
   else                            /* use quicksort to do sort */
      do
         i = m
         j = n
         w = (m+n)%2
         median(w,m,n)
         temp = K[m]
         loop while i < j
            loop while temp.compGT(K[j])
               j = j-1
            end
            K[i] = K[j]
            loop while (i < j) & temp.compLE(K[i])
               i = i+1
            end
            K[j] = K[i]
         end
         K[i] = temp
         quicksort(m,i-1)
         m = i+1
      end
end
return


method median(x=int, y=int, z=int)        /* bose norman/sort, three items */

if K[y].compLT(K[z]) then      /* 1 2 */
   do
      temp = K[y]
      K[y] = K[z]
      K[z] = temp
   end
if K[x].compLT(K[z]) then      /* 0 2 */
   do
      temp = K[x]
      K[x] = K[z]
      K[z] = temp
   end
if K[x].compLT(K[y]) then      /* 0 1 */
   do
      temp = K[x]
      K[x] = K[y]
      K[y] = temp
   end

-- say 'median' K[x].k K[y].k K[z]

return


method bn(b=int, o=int)           /* bose/norman sort */

i    = int
ff   = int
tt   = int

-- say 'bn' b o c[o]

loop i = 0 to c[o]
   ff = b+f[o,i]
   tt = b+t[o,i]
   if K[ff].compLT(K[tt]) then do
      temp  = K[ff]
      K[ff] = K[tt]
      K[tt] = temp
   end
end i

return

