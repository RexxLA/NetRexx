-- buffer.nrx NJPipe Stage
/*
 *  Copyright (C) 1998  Jeffrey Hennick, JHennick@Delphi.Com
 *Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program. 
 */
-- 98/ 6/12 DString.  Added count and delimited string to bring up to full CMS documentation. JHennick
-- 98/ 7/11 Fixed buffering of null records and output when count/pattern active

/** buffer


   >>--BUFFER--+-----------------------------+----------------------------><
               +-number--+-----------------+-+
                         +-delimitedString-+

*/

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class buffer extends stage

method run()

count   = rexx    1
between = rexx    ''
sub     = boolean 0

   parse arg() count pattern

   if pattern<>null then between = DString(pattern).String

   if count = '' then count = 0

   if \count.datatype('W') then do
       Emsg(11,'Error - 'getName()' number 'count' must be numeric')
   end

   if count < 0 then do
       Emsg(11,'Error - 'getName()' number 'count' must be positive')
   end

   sub = (count > 0)
   if count = 0 then count = 1

   buf = Vector(500,1000)

   loop forever
      if sub then loop forever
         line = peekto()
         if line=null then do
            readto()
            leave
         end
         if line.toString()='' then do
            readto()
            leave
         end
         buf.addElement(line)
         readto()
      catch StageError
         rc = rc()
         if rc<>12 then
            signal StageError
      end
      else loop forever
         line = peekto()
         buf.addElement(line)
         readto()
      catch StageError
         rc = rc()
         if rc<>12 then
            signal StageError
      end
      loop i = 1 for count
         loop j = int 0 to buf.size() - 1
            obj = buf.elementAt(j)
            output(obj)
         catch StageError
            rc = rc()
         end
         if i<count                then output(between)
         if i=count & rc<>12 & sub then output(line)
      catch StageError
         rc = rc()
      end
      buf.removeAllElements()

      if rc = 12 then leave

   catch StageError
      rc = rc()
   end

exit(rc*(rc<>12))
