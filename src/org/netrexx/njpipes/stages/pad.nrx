-- pad.nrx Pipeline stage
/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */


/*
  23/02/22 Documentation; givehelp(). Jeff Hennick
  20/ 5/28 Documentation. Jeff Hennick
  97/  /   New. Ed Tomlinson
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class pad extends stage

method run()
   offset = 0
   mod = 0

   a = arg()

   left = boolean 0

   if 'RIGHT'.abbrev(a.word(1).upper,1) then do
      a = a.subword(2)
   end

   if 'LEFT'.abbrev(a.word(1).upper,1) then do
      left = 1
      a = a.subword(2)
   end

   if a.word(1).datatype('W') then do
      if a.word(2).upper = 'MODULO' then do
        offset = a.word(1)
        mod = a.word(3)
        a = a.subword(4)
      end
      else do
        len = a.word(1)
        a = a.subword(2)
      end
   end
   else if a.word(1).upper = 'MODULO' then do
     mod = a.word(2)
     a = a.subword(3)
   end
   else do
     if \a.word(1).datatype('W') | a.word(1) < 0 then
        Emsg(11,'Error - 'getName() a.word(1)' should be a whole non-negative number')
     else do
        len = a.word(1)
        a = a.subword(2)
     end
   end

   if a<>'' then
      ch = GetXorc(a)
   else
      ch = ' '

   if mod \= 0 then if offset \< mod then
      Emsg(11, 'Error - 'getName()' number1,' offset', must be less than number2,' mod'.')

   do
      if left then
         loop forever
            line = rexx peekto()
            if mod > 0 then do
              len1 = line.length - offset
              n = (len1 % mod + 1) * (len1 // mod > 0)
              len = n * mod + offset
            end
            if line.length()<len then
               output(line.right(len,ch))
            else
               output(line)
            readto()
         end
      else
         loop forever
            line = rexx peekto()
            if mod > 0 then do
              len1 = line.length - offset
              n = (len1 % mod + 1) * (len1 // mod > 0)
              len = n * mod + offset
            end
            if line.length()<len then
               output(line.left(len,ch))
            else
               output(line)
            readto()
         end
   catch StageError
      rc = rc()
   end

exit(rc*(rc<>12))

method givehelp() static
return -
"/** pad -- Expand Short Records\n" -
"\n" -
"       +-Right-+                                 +-BLANK-+\n" -
">>-PAD-+-------+--+-------------------+--number--+-------+--><\n" -
"       +-Left--+  +-+--------+-MODULO-+          +-xorc--+\n" -
"                    +-number-+\n" -
"*/\n"
