/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */
options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages
-- 99/11/15 wait for the reader threads to start.  ejt
-- 98/09/20 fixed command.writter exit logic.  ejt
-- 98/09/20 improved external wait logic.  ejt
-- 98/08/23 startThread no longer uses a name.  ejt
-- 98/08/14 used a different object for output serialization.  ejt
-- 98/07/31 modified for ThreadPool.  ejt
-- 98/07/29 Threads started correctly...  ejt
-- 98/07/18 make severs kill the writer threads

import org.netrexx.njpipes.pipes.

-- input stream 0 is for commands
-- input stream 1 is stdin
-- output stream 0 is stdout
-- output stream 1 is the return code
-- output stream 2 is stderr


options binary

class command extends stage public

lock = Object()
rc   = int 0

properties volatile
act  = int 0

-- run a command

method runCommand(a=rexx) private signals StageError

   do
      do
         r = Runtime.getRuntime()
         p = r.exec(a)
      catch IOException
         Emsg(11,'Error - Cannot create Runtime process')
	 signal StageError
      end
   
      act = 0
   
      out = command.writer()    -- logic to ensure thread really starts
      do protect lock
         act = act+1
      end
      out.go(this,BufferedReader(InputStreamReader(p.getInputStream())),0,lock)
   
      err = command.writer()
      do protect lock
         act = act+1
      end
      err.go(this,BufferedReader(InputStreamReader(p.getErrorStream())),2,lock)
   
      in = PrintWriter(p.getOutputStream())
      if in<>null then do
            selectinput(1)                         -- pass stdin to command
            loop forever
               in.println(Rexx peekto())
               readto()
            end
         catch StageError
         finally
            in.close()
         end
   
      do
         p.waitfor()
   --    say p.exitValue()
         do protect lock
            Selectoutput(1)
            output(Rexx p.exitValue())
         catch StageError
            rc = rc()
         end
         loop protect this while act>0
            wait()
         end
      end
   
   catch InterruptedException
      rc = 16
   end
 
   p.destroy()


-- process the stage

method run() public

   cmd = arg()
   do
      if cmd<>'' then
         runCommand(cmd)
      selectInput(0)
      loop forever
         cmd = Rexx peekto()
         if cmd<>'' then
            runCommand(cmd)
         selectInput(0)
         readto()
      end
   catch StageError
      rc = rc()
   end

exit(rc*(rc<>12))


-- read lines from a command's output

class command.writer private implements RunnablePool uses ThreadPool

l  = object
r  = command
s  = int
f  = BufferedReader
ok = boolean 1

method run()

   do
      if f<>null then
         loop forever
            z = r.counter(1)
            d = f.readLine()
            z = r.counter(z)
            if d=null then
               leave
            do protect l
               r.selectOutput(s)
               r.output(d)
            catch StageError
               leave
            end
         end
   catch java.io.IOException
   finally
      r.counter(z)
      if f<>null then do
         f.close()
      catch java.io.IOException
      end
      do protect r
         r.act = r.act-1
         r.notifyAll()
      end
   end

method go(rr=command,ff=BufferedReader,ss=int,ll=object) 

r = rr
f = ff
s = ss
l = ll
startThread(this)

