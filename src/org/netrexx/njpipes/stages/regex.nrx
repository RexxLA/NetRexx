/*
 *  Copyright (C) 2020  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

/** regex

>>--+--REGEX--+--+--------------------------+--regex_Dstring-(1)---><
    +--GREP---+  +-(--| options_string |--)-+

options_string:
   +----------------------------+
|--v-+------------------------+-+--|
     +-Numbers----------------+ (2)
     +-Before-+-1------+------+ (3)
     |        +-number-+      |
     +-After-+-1------+-------+ (3)
     |       +-number-+       |
     +-Context-+-1------+-----+ (4)
     |         +-number-+     |
     +-NOSeparator------------+ (5)
     +-Separator-+-/--/----+--+ (5)
     |           +-DString-+  |
     +-Tertiary---------------+ (6)
     +-COUnt------------------+ (7)

 NetRexx Pipelines only.
 Records matching the RegEx are put out on primary output.
 Records not matching are put out on secondary, if connected, or discarded.

(1) Regex_Dstring is a Java RegEx expresion. Null string passes all records.
(2) Records are prefaced with records number, 10 characters, right justified.
(3) Number of records put out after a matching record.
(4) Number of records put out before and after a matching record.
(5) Inserted before a group of "before records" or the found record with "after records."
(6) Send all matching records (no numbers) to tertiary output stream, if connected.
(7) Only a count of matches is put out on the primary output stream. (Other options
    probably should not be used with this.)

*/

/*
 20/ 8/ 3 Changed to Dstring for regex string. Add COUNT option. Jeff Hennick
 20/ 7/ 1 Fix default number proc; change default from 0 to 1; abbreviations for options;
          before number fix; Tertiary. Jeff Hennick
 20/ 6/30 BEFORE, AFTER, CONTEXT, SEPARATOR, NOSEPARATOR added. Jeff Hennick
 20/ 6/28 Jeff Hennick
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.
import java.util.regex.

class regex extends stage
--trace results

options = Rexx
optionsup = Rexx
before = Rexx 0
before_ring = Rexx 1.d2c
before_count = Rexx -1
before_count_set = Rexx 0
after = Rexx 0
aftercount = Rexx 0
sepdefault = "--"
usesep = 1 /* by default there is a separator before groups */

method run()

     /* Do we have options?  What Regular Expresion are we looking for? */

  parse arg() '(' options ')' regex
  if options = '' then regex = arg()
  regex = regex.strip

    /* Process options */
                          /* NUMBERS */
  optionsup = options.upper
  numbers = getOpt('numbers', 1)

                             /* BEFORE n */
  before_count_set = getOpt('before', 1, 1)
  before = before_count_set > 0

                              /* AFTER n */
  after = getOpt('after', 1, 1)

                               /* CONTEXT */
  context_set = getOpt('context', 1, 1)
  if context_set > 0 then do
    before = 1
    before_count_set = context_set
    after = context_set
  end

                         /* SEPARATOR string */
  separator = getOpt('separator', 1, 2)
  if separator <> '' then do
    sep = separator
    usesep = 1
  end
  else sep = sepdefault

                        /* NOSEPARATOR */
  noseparator = getOpt('noseparator', 3)
  if noseparator = 1 then usesep = 0

                        /* Tertiary  */
  tertiary  = getOpt('tertiary', 1)

                        /* Count  */
  countopt  = getOpt('count', 3)

  if options <> '' then
    Emsg(11, 'Regex -- Unknown or duplicate option:' options)

  rx = Dstring(regex)

  if rx.Residue() <> '' then
    Emsg(11, 'Regex -- Unrecognized:' regex)

  regex = rx.String()
     /* One time compile */
  pat = Pattern.compile(regex);

    /* do we have a secondary output connection? */
  do
    sec = 1
    selectOutput(1)
  catch StageError
    sec = 0
  end

    /* do we want and have a tertiary output connection? */
  if tertiary then do
    tri = 1
    selectOutput(2)
  catch StageError
    tri = 0
  end
  else tri = 0

     /* back to the primary output */
  do
    pri = 1
    selectOutput(0)
  catch StageError
    pri = 0
  end

  if \sec & \pri & \tri then
    Emsg(11, 'No output is connected.')

  li = Rexx ''  -- line number
  aftercount = 0

  matchcount = 0

  loop i = 1
    if numbers then do
      li = i
      li = li.right(10)
    end
       /* See what input we have. */
    line = peekto().toString

    if before > 0 then beforeAdd(line)

        /* Do we have a match? */
    match = pat.matcher(line)

    if  match.find() then do       /* We have a match */
      usesep  =usesep  ; aftercount =aftercount ; before =before ; after = after
      if usesep & aftercount = 0 & (before > 0 | after > 0) then
        output(sep)
      if before then do
        st = before_count + 1
        if st > before_count_set then st = st - before_count_set - 1
        if numbers then lim = i - before_count_set
        else lim = ''
        one = 1.d2c
        loop j = st for before_count_set
          if before_ring[j] <> one then do
            if numbers then lim = lim.right(10)
            output(lim'-'before_ring[j])
          end
          if j = before_count_set then j = -1
          if numbers then lim = lim + 1
        end
      end
      if countopt then
        matchcount = matchcount + 1
      else
        output(li':'line)
      if tri then do
        selectOutput(2)
        output(line)
      catch StageError
        tri = 0
      finally
        selectOutput(0)
      end
      aftercount = after
    end -- match
    else do -- no match
       if aftercount > 0 then do
         output(li'-'line)
         aftercount = aftercount - 1
       end
       if sec then
         do
           selectOutput(1)
           output(li':'line)
         catch StageError
           sec = 0
         finally
           selectOutput(0)
         end
       end

       /* Go on to the next one. */
    readto()
  catch StageError  /* Most likely end of input */
    rc = rc()
  end

  if countopt then do
    selectOutput(0)
    output(Rexx matchcount)
  catch StageError
    rc = rc()
  end

  exit(rc*(rc<>12))

method getOpt(opt, len, val = 0)
 /* val: 0: boolean exists; 1: return next word; 2: return DString */
  ret = Rexx
  retw = Rexx ''
  del2 = 1
 -- wp = optionsup.wordpos(opt.upper)

  optup = opt.upper
  loop wp = 1 to optionsup.words()
    if optup.abbrev(optionsup.word(wp), len) then leave
  end
  if wp > optionsup.words() then wp = 0

  ret = wp > 0
  if val = 1 & ret then do
    retw = options.word(wp + 1)
    if \ retw.datatype('N') then
      do
        retw = 1 /* Default number */
        del2 = 0
      end
  end
  select
  when val = 2 & ret then do
    opt = options.subword(wp + 1)
    ds = DString(opt)
    retw = ds.String()
    if retw = '' then retw = sepdefault
    options = options.subword(1, wp - 1) ds.Residue
    optionsup = options.upper
  end
  when val = 2 then
    ret = ''
  when ret > 0 then do
    w = 1
    if val > 0 & del2 then w = 2
    options = options.delword(wp,w)
    optionsup = optionsup.delword(wp,w)
  end
  otherwise
    nop
  end
  if val > 0 & retw <> '' then ret = retw
  return ret

method beforeAdd(line)
  before_count = before_count + 1
  if before_count >= before_count_set + 1 then before_count = 0
  before_ring[before_count] = line
