-- dup.nrx Pipeline stage
/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

/*
  23/ 2/20 Documentation; givehelp(). Jeff Hennick
  20/ 4/21 Removed multiple classes for abbreviations.  Jeff Hennick
  19/11/18 Documentation; fix for snumber = ''; multiple classes for abbreviations, Jeff Hennick
           Original Ed Tomlinson
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class dup extends stage

method run()

   n = arg()
   if n = '' then n = 1

   do
      select
         when n='*' then do                -- infinite coppies here
            l = peekto()
            loop forever
               output(l)
            end
         end
         when \n.datatype('W') then
            exit(14)
         when n=-1 then                    -- just consume, no coppies
            loop forever
               l = readto()
            end
         when n=0 then                     -- just copy the stream
            loop forever
               l = peekto()
               output(l)
               readto()
            end
         when n>0 then                     -- pass thru and make n coppies
            loop forever
               l = peekto()
               output(l)
               loop for (int n)
                  output(l)
               end
               readto()
            end
         otherwise
            Emsg(11,'Error - unexpected argument 'n)
      end
   catch StageError
      rc = rc()
   end

exit(rc*(rc<>12))

Method givehelp() static
return -
"/** duplicate -- Copy Records\n" -
"\n" -
"                      +-1-------+\n" -
">>--DUPlicate (1)-----+---------+---------><\n" -
"                      +-snumber-+\n" -
"                      +-*-------+\n" -
"\n" -
" (1) CMS is DUPlicat due to 8-character name limitation\n" -
"\n" -
"Duplicate the input object.  If snumber is an asterix the initial input is output\n" -
"forever and is never consumed.  If snumber is zero or more, the object is output and\n" -
"along with snumber copies of it.  If snumber is -1 then dup acts like hole and just\n" -
"consumes its input.\n" -
"\n" -
"*/\n"
