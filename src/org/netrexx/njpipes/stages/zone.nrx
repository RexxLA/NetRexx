/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

-- 98/ 8/26 support reseting the stage.  ejt
-- 98/ 7/30 use StageError(13,... in stageExit.  ejt
-- 98/ 7/18 modified to use BuildIRangeExit to optimize speed.  ejt

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class zone extends stage uses IRange

method run()
   Emsg(11,'Error - Should be overridden via a stageExit')

method stageArg(a=rexx) returns rexx
   parse a delim +1 . ')' w
   if delim<>'(' then
      w = a.subword(2)
   m = w.subword(1,2)
   return w.subword(1+(m.wordpos('CASEI')>0)+(m.wordpos('REVERSE')>0))

method stageExit(pInfo=Rexx,o=Rexx) returns boolean signals StageError

pid  = pInfo            -- pipe name
name = pInfo[3]         -- stage name
args = pInfo[4]         -- arguement

ri = GetIRanges(args)
nranges = ri[0].Number()
args = ri[0].Residue()

if nranges=0 then
   signal StageError(13,'Error - 'pInfo' - ZONE expects a range, found: 'pInfo[4])

if ri[0].Prefix<>'' then
   signal StageError(13,'Error - 'pInfo' - ZONE expects the range first, found: 'pInfo[4])

range = pInfo[4].left(pInfo[4].pos(args)-1)

c = args.upper().wordpos('CASEI')
if c=1 | c=2 then
   args = args.delword(c,1)
else
   c=0

r = args.upper().wordpos('REVERSE')
if (r=1 & (c=2 | c=0)) | (r=2 & c=1) then
   args = args.delword(r,1)
else
   r=0

if c=2 & r=0 then
   signal StageError(13,'Error - 'pInfo' - Invalid use of CASEI or REVERSE at: 'pInfo[4])

parse args stg rest

if stg='' then
   signal StageError(13,'Error - 'pInfo' - ZONE expects a selection stage: 'pInfo[4])

if stg.upper()='CASEI' then
   signal StageError(13,'Error - 'pInfo' - the CASEI stage and ZONE cannot be used together')

n = o[0]

cname = stageName(name'_'stg,pid,pInfo[1])
o[n+1] ='class 'cname' extends 'stg' uses IRange private'
o[n+2] ='_o_  = rexx'       -- current object
o[n+3] ='_c_  = rexx'       -- converted object
o[n+4] ='_f_  = boolean 0'  -- recursion safety flag
o[n+5] ='_ri_ = IRange[]'
o[n+6] ='_nr_ = rexx'
n = n+7

o[n+1] ='method stage_reset()'
o[n+2] ='   super.stage_reset()'
o[n+3] ='   _f_ = 0'
n = n+4

-- The technique of saving one object ONLY works if the stage does
-- peekto/readto on only one stream at a time.

o[n+1] ='method peekto() returns Object protect signals StageError'
o[n+2] ='   if _f_ then'
o[n+3] ='      return super.peekto()'
o[n+4] ='   _f_ = 1'
o[n+5] ='   _d_ = super.peekto()'
o[n+6] ='   if _d_\\=_o_ then do'
o[n+7] ='      _o_ = rexx _d_'
o[n+8] ='      _c_ = 'ri[0].BuildIRangeExit(rexx '_ri_',rexx '_o_')
if c>0 then
   o[n+9]='      _c_ = _c_.upper()'
if r>0 then
   o[n+10]='      _c_ = _c_.reverse()'
o[n+11]='   end'
o[n+12]='   _f_ = 0'
o[n+13]='   return _c_'
n = n+14

o[n+1] ='method readto() returns Object protect signals StageError'
o[n+2] ='   if _f_ then'
o[n+3] ='      return super.readto()'
o[n+4] ='   _f_ = 1'
o[n+5] ='   _d_ = super.readto()'
o[n+6] ='   if _d_\\=_o_ then do'
o[n+7] ='      _o_ = rexx _d_'
o[n+8] ='      _c_ = 'ri[0].BuildIRangeExit(rexx '_ri_',rexx '_o_')
if c>0 then
   o[n+9]='      _c_ = _c_.upper()'
if r>0 then
   o[n+10]='      _c_ = _c_.reverse()'
o[n+11]='   end'
o[n+12]='   _f_ = 0'
o[n+13]='   return _c_'
n = n+14

o[n+1]='method output(d=object) signals StageError'
o[n+2]='   super.output(_o_)'
n = n+3

o[n+1]='method setArg(a=rexx)'             -- this needs to be smarter...
o[n+2]='   _ri_ = GetIRanges(a)'
o[n+3]='   _nr_ = _ri_[0].Number()'
if c>0 then
   o[n+4]='   super.setArg(_ri_[0].Residue().strip("L").upper())'
else
   o[n+4]='   super.setArg(_ri_[0].Residue().strip("L"))'
n = n+5

o[0] = n
pInfo[3]  = cname                          -- call this stage instead
pInfo[4]  = range' 'rest

return 1


