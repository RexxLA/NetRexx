-- sql.nrx Pipeline stage
/*
 *  Copyright (C) 1997,1998,1999  R.V. Jansen. 2020 Jeff Hennick
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

/*
 23/02/23 Documentation; givehelp(). Jeff Hennick
 20/ 8/16 COUNT2SECondary; MySQL test. Jeff Hennick
 20/ 8/15 New from sqlselect. Jeff Hennick
*/

options nostrictcase nostrictargs nostrictsignal nobinary
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.
import java.sql.
import java.util.

class sql extends stage
--trace results

options = Rexx
optionsup = Rexx
default_properties = "sqlselect.properties"

method run()

  a = arg()

  parse a '(' options ')' sqlstatement
                                              /* SQL Statement */
  if options = '' then sqlstatement = a

                                         /* OPTIONS ? */
                                         /* user & password defaults */
  user = ''
  pass = ''

  optionsup = options.upper
                                          /* headers or noheaders ? */
  headers = 0 -- default off
  if getOpt('noheaders', 9) then headers = 0
  if getOpt('headers', 7) then headers = 1
                                          /* properties file ? */
  prop_file = getOpt('properties', 10, 3)
  if prop_file = '' | prop_file = 1 then prop_file = default_properties

                                         /* URL & JDBCdriver */
  urlcmd = getOpt('url', 3, 3)

  jdbcdrivercmd = getOpt('jdbcdriver ', 10, 3)

                                         /* DBMS & File DB_NAME */
  dbms = getOpt('dbms', 4, 3)
  select case dbms.lower
    when '' then nop
    when 'sqlite' then  jdbcdrivercmd = "org.sqlite.JDBC"
    when 'mysql' then   jdbcdrivercmd = "com.mysql.jdbc.Driver"
    otherwise jdbcdrivercmd = "org."dbms".JDBC"  -- might work
  end

  db_name = getOpt('db_name', 7, 3)
  if db_name \= '' then
    select  case dbms.lower
      when '' then nop
      when 'sqlite' then  urlcmd = "jdbc:sqlite:"db_name
      when 'mysql' then   urlcmd = "jdbc:mysql:"db_name
      otherwise urlcmd = "jdbc:"dbms":"db_name  -- might work
    end

                                          /* User & Password */
  usercmd = getOpt('user', 4, 3)
  passcmd = getOpt('pass', 4, 3)

                                       /* count2 sec */
  count2sec = getOpt('count2secondary', 9, 1)

                                           /* extra options ? */
  if options \= '' then
    Emsg(11, 'sql: extra options:' options)

      /* read from properties file and get url and jdbcdriver values */
  name = Rexx ''
  if prop_file \= '' then do
    fi = BufferedReader(FileReader(prop_file))

    loop forever
      textLine = Rexx fi.readLine()
      if textline = null then leave
      if textline.left(3).lower = 'url' then parse textline name '=' url
      if textline.left(10).lower = 'jdbcdriver' then parse textline name '=' jdbcdriver
    end

    catch IOException
      -- if the properties file is not found, these are the DEFAULT jdbc driver name and url
      jdbcdriver = "COM.ibm.db2.jdbc.app.DB2Driver"
      url = "jdbc:db2:sample"
  end

                                /* check and process secondary input stream */
  do
    selectInput(1)
    loop
      textLine = Rexx peekto()
      if textline.left(3).lower = 'url' then parse textline name '=' url
      if textline.left(10).lower = 'jdbcdriver' then parse textline name '=' jdbcdriver
      readto()
    end
  catch stageError
  end
  do
    selectInput(0)
  catch stageError
  end
  name = name -- dummy clause to lose compiler warning

                                  /* command line options are king */
  if urlcmd \= '' then url = urlcmd
  if jdbcdrivercmd \= '' then jdbcdriver = jdbcdrivercmd
  if usercmd \= '' then user = usercmd
  if passcmd \= '' then pass = passcmd

                                         /* Connect to the database */
  -- force loading of jdbc driver
  do
    Class.forName(jdbcdriver).newInstance()

  catch e1 = Exception
    say 'JDBC driver' prop_file 'could not be loaded.'
    say 'aException (' e1 ') caught : \n' e1.getMessage()
    exit 1
  end

  do
  -- make the connection
    jdbcCon = Connection DriverManager.getConnection(url, user, pass)

  catch e2 = SQLException
    say 'bSQLException(s) caught while connecting !'
    loop while (e2 \= null)
       say 'SQLState:' e2.getSQLState()
       say 'Message: ' e2.getMessage()
       say 'Vendor:  ' e2.getErrorCode()
       say
       e2 = e2.getNextException()
     end
     exit 1
  end

  backto0 = 0

  loop
    if sqlstatement = '' then sqlstatement = Rexx peekto()
  -- the query
    query = sqlstatement.space()

    stmt = Statement jdbcCon.createStatement()
                                             /* kind */
    key = query.word(1).lower
    select case key
      when 'create' then res = Rexx stmt.execute(query)
      when 'insert', 'update', 'delete' then res = Rexx stmt.executeUpdate(query)
      when 'select' then rs = stmt.executeQuery(query)
      otherwise
       res = Rexx stmt.executeUpdate(query)

    catch e3 = SQLException
      say 'eSQLException(s) caught !' e3
      loop while (e3 \= null)
        if e3.getSQLState() \= null then say 'SQLState:' e3.getSQLState()
        if e3.getMessage() \= null then say 'Message: ' e3.getMessage()
        say 'Statement: ' query
        say 'Vendor error code:  ' e3.getErrorCode()
        say
        e3 = e3.getNextException()
      end
    end

    if key = 'select' then do
      meta = ResultSetMetaData rs.getMetaData();
      cols = meta.getColumnCount();
      helpline=Rexx

    -- get the column names
      outputline = ''
      width = ''
      loop i=1 to cols
        if meta.getColumnDisplaySize(int i) > meta.getColumnName(int i).length()
          then width[i] = meta.getColumnDisplaySize(int i)
        else width[i] = meta.getColumnName(int i).length()+2
        if width[i] > 9999 then width[i] = meta.getColumnName(int i).length()+2
        columnline = meta.getColumnName(int i).toUppercase()
        helpline = columnline
        helpline = helpline.left(width[i], '-')
        outputline = outputline||helpline
      catch NullPointerException
      end
      if headers then do
        output(outputline)
      catch StageError
        rc = rc()
      end

      -- get the data rows
      selectOutput(0)
      loop i=1 while rs.next()
        outputline = ''
        loop j=1 to cols
          columnline = rs.getObject(int j).toString()
          helpline = columnline
          if columnline.length > width[j] then width[j] = columnline.length+2
          helpline = helpline.left(width[j])
          outputline = outputline||helpline
        catch NullPointerException
        end
        output(outputline)
      catch StageError
        rc = rc()
      end
    end /* select */

    else do
      if count2sec then do
        selectOutput(1)
        output(res)
        backto0 = 1
      catch StageError
      end
      else output(res)
      if backto0 then do
        selectOutput(0)
        backto0 = 0
      catch StageError
      end
    catch StageError
      rc = rc()
    end
    readto()
    sqlstatement = ''

  catch e3 = SQLException
    say 'cSQLException(s) caught !'
    loop while (e3 \= null)
      if e3.getSQLState() \= null then say 'SQLState:' e3.getSQLState()
      if e3.getMessage() \= null then say 'Message: ' e3.getMessage()
      say 'Vendor:  ' e3.getErrorCode()
      say
      e3 = e3.getNextException()
    end
  catch StageError

  end

  do
  --  rs.close()
    stmt.close()
    jdbcCon.close()
  catch e3 = SQLException
    say 'dSQLException(s) caught !'
    loop while (e3 \= null)
      if e3.getSQLState() \= null then say 'SQLState:' e3.getSQLState()
      if e3.getMessage() \= null then say 'Message: ' e3.getMessage()
      say 'Vendor:  ' e3.getErrorCode()
      say
      e3 = e3.getNextException()
    end
  end

  exit(rc*(rc<>12))

method getOpt(opt, len, kind = 0)
trace off
 /* searches for the opt's abbriviation at len.  Returns depending on kind:
    kind: 0: boolean exists; 1: return next word; 2: return DString 3: return QWord
    removes opt and Dstring/QWord from options
    QWord has optional single or double quotes, must have quotes for multi-word */
  ret = Rexx
  retw = Rexx ''
  del2 = 1

  optup = opt.upper
  loop wp = 1 to optionsup.words()
    if optup.abbrev(optionsup.word(wp), len) then leave
  end
  if wp > optionsup.words() then wp = 0

  ret = wp > 0
  if kind = 1 & ret then do
    retw = options.word(wp + 1)
    if \ retw.datatype('N') then
      do
        retw = 1 /* Default number */
        del2 = 0
      end
  end

  select
  when kind = 2 & ret then do
    opt = options.subword(wp + 1)
    ds = DString(opt)
    retw = ds.String()
    options = options.subword(1, wp - 1) ds.Residue
    optionsup = options.upper
  end
  when kind = 3 & ret then do  /* possibly quoted "word" */
    opt = options.subword(wp + 1)
    fc = opt.left(1)
    if fc = '"' | fc = "'" then do
      ds = DString(opt)
      retw = ds.String()
      options = options.subword(1, wp - 1) ds.Residue
    end
    else do
      retw = options.word(wp + 1)
      options = options.delword(wp, 2)
    end
    optionsup = options.upper
  end
  when kind = 2 | kind = 3 then
    ret = ''
  when ret > 0 then do
    w = 1
    if kind > 0 & del2 then w = 2
    options = options.delword(wp,w)
    optionsup = optionsup.delword(wp,w)
  end
  otherwise
    nop
  end
  if kind > 0 & retw <> '' then ret = retw
  return ret

method givehelp() static
return -
"/** sql -- Interface to SQL Data Base\n" -
"\n" -
"                                                          +-;-+\n" -
">>--SQL--+-----------------+--+-------------------------+-+---+--><\n" -
"         +-(-| options |-)-+  +-sql_statement_string-(3)+\n" -
"\n" -
"OPTIONS:\n" -
"   +------------------------------------------------+\n" -
" |-v-+--------------------------------------------+-+-|\n" -
"     |            +-/sqlselect.properties/-+      |\n" -
"     +-PROPERTIES-+-filename_Qword-(7)-----+-(5)+-+\n" -
"     | +-NOHEADERS-+                            |\n" -
"     +-+           +-(5)(6)(9)------------------+\n" -
"     | +-HEADERS---+                            |\n" -
"     +-COUNT2SECondary-(5)(11)------------------+\n" -
"     +-URL-Qword-(7)----------------------------+\n" -
"     +-JDBCDRIVER-Qword-(7)---------------------+\n" -
"     +-DBMS-Qword-(7)(8)------------------------+\n" -
"     +-DB_NAME-Qword-(7)(8)---------------------+\n" -
"     +-USER-Qword-(7)(8)(10)--------------------+\n" -
"     +-PASS-Qword-(7)(8)(10)--------------------+\n" -
"\n" -
"\n" -
" uses jdbc to select from any jdbc enabled dbms\n" -
"\n" -
" properties file (\"sqlselect.properties\" default) is read from the secondary input stream to find jdbcdriver name and url\n" -
" sample properties file:\n" -
"\n" -
" #JDBC driver name\n" -
" #Tue Feb 03 23:29:43 GMT+01:00 1998\n" -
" jdbcdriver=com.imaginary.sql.msql.MsqlDriver\n" -
" url=jdbc:msql://localhost:1114/TESTDB\n" -
" # the following are not needed for some DBMS, ex: SQLite\n" -
" user=db_user_name\n" -
" pass=password_for_db\n" -
"\n" -
" if this file is not found default (compiled in) values are used\n" -
"\n" -
" (1) when using a sql select * (all columns) from the commandline, quote the query\n" -
" as in java pipes.compiler (query) \"sql select * from dept | console\"\n" -
" (2) the netrexx/jdbc combination is extremely case sensitive for column and table names\n" -
" (3) this sql_select_string executed, then statements are read from the primary input stream.\n" -
"     this is optional in NetRexx Pipelines only.\n" -
" (4) CMS does not use the stream input\n" -
" (5) NetRexx Pipelines only\n" -
" (6) CMS Pipelines is implied HEADERS only.\n" -
" (7) A Qword is an optionally quoted word. If it contains spaces, it must be quoted.\n" -
" (8) EXPERIMENTAL Subject to change. DBMS is the kind of database, e.g. SQLite.\n" -
"     DB_name is the file name.  These are used in place of URL and JDBCDRIVER.\n" -
"     SQLite is the only one tested as of 8/15/20. MySQL may also work.\n" -
" (9) the SQLSELECT stage uses HEADERS as the default.\n" -
" (10) USER & PASS are needed for some DBMSs and not others, ex. SQLite.\n" -
" (11) the count or other output from non-select statements goes to the secondary\n" -
"      output stream if connected, or is discarded.  Otherwise it goes to the primary.\n" -
"\n" -
" Priority order for URL, JDBCDRIVER, DBMS, DB_NAME, USER, & PASS (first one found rules):\n" -
"   1. option in the SQL command string\n" -
"   2. from secondary input stream\n" -
"   3. from \"sqlselect.properties\" file\n" -
"      or from file specified by PROPERTIES option\n" -
"   4. Builtin\n" -
"*/\n"
