-- delay.nrx Pipeline stage
/*
 *  Copyright (C) 2023  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

/*
  23/ 3/18 New. CMS Stage From changeregex. Jeff Hennick
*/

options nostrictcase nostrictargs nostrictsignal nobinary

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.
import java.time.

class delay extends stage

method run() public

   args = Rexx arg()

   each = 1 -- default
   t = getKeyWord(args, 'EACH')
   if t[2] then do
     args = t[1]
   end

   t = getKeyWord(args, 'ONCE')
   if t[2] then do
     args = t[1]
     each = 0
   end

   parse args fc + 1 1 hr ':' min ':' sec rest

   if rest <> '' then
     Emsg(11, 'Extra arguments:' rest)

   if fc = '+' then do
     rel = 1
     parse hr 2 hr
   end
   else rel = 0

   if \ (hr''min''sec).datatype('N') then
     Emsg(11, 'Bad arguments. Must be "hr:min:sec". Found' args)

   if rel then do

     if sec = '' then do
      sec = min
      min = hr
      hr = 0
     end

     if sec = '' then do
      sec = min
      min = 0
     end

     if sec = '' then
      sec = 0

     ms = long (sec + 60 * min + 3600 * hr) * 1000

     if ms > 0 then loop -- We have an argument time

       Thread.sleep(ms)

       -- Time is up, let the record(s) through

       if each then do
         rec = peekto()
         output(rec)
         readto()
         rec = peekto()  -- to get us out of loop pause at end
       end
       else do
         shortStreams()
         leave
       end
     catch StageError
     end
   catch java.lang.InterruptedException
   end   -- rel
   else do -- not rel, real clock time specified
    if sec = '' then sec = 0
    if min = '' then min = 0
    if hr = '' then hr = 0

    now = LocalDateTime.now()
    nowr = Rexx now.toString
    parse nowr nyr '-' nmo '-' nday 'T'

    release =  LocalDateTime.of(nyr, nmo, nday, hr, min, sec)
    sleepDuration = long Duration.between(now, release).toMillis()

    do -- We have an argument time

      Thread.sleep(sleepDuration)

      -- Time is up, let the records through

      shortStreams()
    catch StageError
    end
   catch java.lang.InterruptedException
   end -- not rel

   rc = mrc()

exit(rc*(rc<>12))

Method givehelp() static
return -
"/** delay -- Delay the stream for a specified time \n" -
"\n" -
"  >>--DELAY--+-------------------------------------------+-----------------+---><\n" -
"             |  +--+--+                                  |  +--EACH-(2)-+  | (1)\n" -
"             +--+-----+--+--numberHr:numberMin:numberSec-+--+-----------+--+ (1)\n" -
"                         +--numberMin:numberSec----------+  +--ONCE-(2)-+ (1)\n" -
"                         +--numberSec--------------------+ (1)\n" -
"\n" -
" Notes:\n" -
"  (1) Arguments are NetRexx Pipelines only, not CMS." -
"      CMS (and NetRexx when there is no argument) reads" -
"      delays as the first word of each record." -
"      When present, they follow the CMS conventions" -
"      for the delay time in records. The + indicates a" -
"      duration, no + means time of day. The records do NOT" -
"      have the delay as the first word\n" -
"      Clock hours are 24h, so 2pm is 14.\n" -
"      Seconds can have decimal point and milliseconds.\n" -
"  (2) Used only for ""releative time.""\n" -
"\n" -
"*/\n"
