-- take.nrx NJPipe Stage
/*
 *  Copyright (C) 1998  Jeffrey Hennick, JHennick@Delphi.Com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

-- 2019/09/03 Major fixes in LAST and BYTES. Needs SECONDARY for BYTES. JH
-- 1998/09/20 support secondary output streams.  ejt
-- 1998/06/12 Up to CMS Documentation. JHennick

/** take


             +-FIRST-+  +-1------+
   >>--TAKE--+-------+--+--------+--+-------+-----------------------------><
             +-LAST--+  +-number-+  +-BYTES-+
                        +-*------+

*/
options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.RingBuf
import org.netrexx.njpipes.pipes.

class take extends stage

method run()
   first = boolean 1
   n = rexx 1

   args = rexx arg().upper()

   parse args type .

   bytes = boolean (args.pos('BYTES') > 0)
   last = boolean (args.pos('LAST') > 0)
   if last then do
      first = 0
      parse args . type .
   end

   select
      when type = 'FIRST' then nop
      when type = 'LAST' then first = 0
      when type = '*' then n = 9.copies(digits)
      when type.datatype('W') then n = type
      otherwise
        args = args '.'
   end

   if n = '*' then n = 9.copies(digits)
   if \n.datatype('W') then n = 1

select
   when first & bytes then                                     -- FIRST BYTES
      do
         loop i = rexx 0 to n - 1
            line = rexx peekto()
            i = i + line.length()
            if i > n then line = line.left(i - n)
            output(line)
            i = i - 1
            readto()
         catch StageError
            rc = rc()
         end
      end
   when first then                                             -- FIRST records
      do
         loop for n
            aobj = peekto()
            output(aobj)
            readto()
         catch StageError
            rc = rc()
         end
         do
            selectoutput(1)
            shortStreams()
         catch StageError
            if rc()=4 then
               rc(12)
         end
      end
   when bytes then                                            -- LAST BYTES
      do
         buf = Vector()
         do
            loop forever
               buf.addElement(readto())
            end
         catch StageError
            rc = rc()
            if rc<>12 then
                signal StageError
         end

         size = buf.size() - 1
         line = Rexx ''
         loop i = size by -1 to 0
            rec = Rexx buf.get(i)
            line = line || rec
            if line.length() >= n then leave
         end
         n = n.min(line.length)
         i = i.max(0)
         if line.length = n then
            do
               loop i = i to size
                  output(buf.get(i))
               end
            catch StageError
               rc = rc()
            end
          else do
            rec = Rexx buf.get(i)
            rec = rec.right(line.length - n)
            output(rec)
            loop i = i + 1 to size
               output(buf.get(i))
            end
          catch StageError
               rc = rc()
          end
         end
   otherwise                                                 -- LAST records
      do
         buf = Vector()
         do
            loop forever
               buf.addElement(readto())
            end
         catch StageError
            rc = rc()
            if rc<>12 then
                signal StageError
         end

         size = buf.size()
         n = n.min(size)
         cut = size - n
         do
            selectOutput(0)
            loop i = cut to size - 1
               aobj = rexx buf.get(i)
               output(aobj)
            end
         catch StageError
            rc = mrc()
         end
         selectOutput(1)
         loop i = 0 to cut - 1
            aobj = buf.get(i)
            output(aobj)
         end
      catch StageError
         rc = mrc()
      end
   catch StageError
      rc = mrc()
   end
exit(rc*(rc<>12))
