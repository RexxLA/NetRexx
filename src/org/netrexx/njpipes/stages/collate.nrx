-- collate.nrx Pipeline stage
/*
 *  Copyright (C) 2020  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

/*
  23/ 2/18 Documentation; givehelp(). Jeff Hennick
  20/11/15 Specify Rexx type on some variables.  Jeff Hennick
  20/11/14 New.  Jeff Hennick
*/


options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class collate extends stage  uses IRange

test = 0
last_master = ''
end_master = 0

method run()

args = arg()

stop = 0
stopa = getKeyWord(args, 'stop', 0, 'K')
if stopa[2] then do
  if stopa[1].word(1) \= 'anyof' then
    Emsg(11, 'Keyword "STOP" found without "ANYOF":' args)
  stop = 1
  args = args.subword(3)
end

pad = Rexx null
pada = getKeyWord(args, 'NOPAD', 0, 'K')
if pada[2] then args = pada[1]
else do
  pada = getKeyWord(args, 'PAD', 0, 'S')
  pad = pada[2]
  if pad = 'space' then pad = ' '
  args = pada[1]
end

anyc = getAnycase(args)
if anyc \= 0 then args = args.subword(2)
if anyc = -1 then anyc = 0

rangema = IRange[]
rangem = IRange null
rangeda = IRange[]
ranged = IRange null

rangema = getIRanges(args)
rangem = rangema[1]
args = rangema[0].residue

rangeda = getIRanges(args)
ranged = rangeda[1]
if rangeda[0].number = 0 then
  ranged = rangem
args = rangeda[0].residue

order = Rexx ''
mastera = args.word(1) = 'master'
if mastera then do
 order = 'master'
 args = args.subword(2)
 detaila = args.word(1) = 'detail'
 if detaila then do
   order = 'master detail'
   args = args.subword(2)
 end
end

detaila = args.word(1) = 'detail'
if detaila then do
 order = 'detail'
 args = args.subword(2)
 detaila = args.word(1) = 'master'
 if detaila then do
   order = 'detail master'
   args = args.subword(2)
 end
end

if order = '' then order = 'master detail'
o1 = order.word(1)
o2 = order.word(2)

sepa = getKeyword(args, 'separator', 3, 'D')
if sepa[4] = '' then separator = Rexx null
else do
  separator = sepa[2]
  args = sepa[1]
end

if args \= '' then
  Emsg(11, 'Extra unrecognized argument:' args)

have_detail = 0
drec = Rexx ''
mrec = Rexx ''
mrange = Rexx
drange = Rexx

loop label master
  selectInput(0)
  mrec = Rexx peekTo()
  if rangem = null then
    mrange = mrec
  else
    mrange = rangem.SelIRange(mrec)

  -- now for detail record(s)
  done_master = 0
  loop label detail
    if \have_detail then do
      selectInput(1)
      drec = Rexx peekTo()
      if ranged = null then
        drange = drec
      else
        drange = ranged.SelIRange(drec)
      have_detail = 1
    end

    if pad \= null then do
      mrange = mrange.strip
      drange = drange.strip
      dlen = drange.length
      mlen = mrange.length
                            -- -- I don't know if CMS does a STRIP or not
                               -- I don't know how to get unequal lengths
                               -- with out it.  Jeff Hennick 11/20
      if dlen < mlen then
        drange = pad.copies(mlen).overlay(drange)
      else if dlen > mlen then
        mrange = pad.copies(dlen).overlay(mrange)
    end

    if anyc then
      dmm = drange = mrange
    else
      dmm = drange == mrange

    if dmm then do
      have_detail = 1
      if \done_master & (o1 = 'master' | (o1 = 'detail' & o2 = '')) & separator \== null then
        out(0, separator)
      if o1 = 'master' then do
        last_master = mrec
        if \done_master then do
          out(0, mrec)
        end
      end
      done_master = 1
      if o1 = 'detail' then
        out(0, drec)
      if o2 = 'detail' then
        out(0, drec)
      have_detail = 0
    end
    else do  -- do not match
      if \have_detail then do
        out(1, mrec)
        have_detail = 1
      end
      else if drange < mrange then do
        out(2, drec)
        have_detail = 0
      end
      else if \done_master then do  -- detail > master, a master with no detail
        if o2 = 'master' then do
          last_master = mrec
          out(0, mrec)
          if separator \== null then
            out(0, separator)
        end
        else
          out(1, mrec)
        leave detail
      end
      else do    -- detail > master, time for a new master
        if o2 = 'master' then do
          last_master = mrec
          out(0, mrec)
          if separator \== null then
            out(0, separator)
        end
        selectInput(0)
        readto()
        iterate master
      end
    end
    selectInput(1)
    drec = Rexx peekTo()
    drec = Rexx readTo()
  catch stageError
    rc = rc()
    end_master = 1
    if stop then leave master
    selectinput(0)
    selectoutput(1)
    readTo()
    loop label mmasters
      mrec = Rexx peekTo()
      output(mrec)
      last_master = mrec
      readTo()
    catch stageError
      end_master = 1
      if o2 = 'master' & mrec \= last_master then do
        last_master = mrec
        out(0, mrec)
        if separator \== null then
          out(0, separator)
      end
      leave master
    end mmasters
  end detail
  selectInput(0) -- master
  readTo()
catch stageError
  if \stop then loop -- while drange = drangeo | end_master
    selectInput(1)
    drec = Rexx readTo()
    selectOutput(2)
    output(drec)
    drec = Rexx peekto()
    if ranged = null then
      drange = drec
    else
      drange = ranged.SelIRange(drec)

  catch stageError
    if o2 = 'master' & mrec \= last_master then do
      last_master = mrec
      out(0, mrec)
      if separator \== null then
        out(0, separator)
    end
  end
end master

rc = rc()
exit(rc * (rc \= 12))

method out(stream, data) signals ThreadQ
do
  selectOutput(stream)
  output(data)
catch stageError
end

method givehelp() static
return -
"/** collate -- Collate Streams\n" -
"\n" -
"                           +-NOPAD----+ +-RESPECTCASE-+\n" -
">>-COLLATE--+------------+-+----------+-+-------------+-->\n" -
"            +-STOP-ANYOF-+ +-PAD-xorc-+ +-| anycase |-+\n" -
"\n" -
"                                  +-MASTER-DETAIL---+\n" -
">--+---------------------------+--+-----------------+-->\n" -
"   +-inputRange-+------------+-+  +-MASTER----------+\n" -
"                +-inputRange-+    +-DETAIL-+--------+\n" -
"                                           +-MASTER-+\n" -
"\n" -
">--+------------------------------+--><\n" -
"   +-SEParator-delimitedString-(1)+\n" -
"\n" -
"(1) NetRexx Pipelines only.\n" -
"    delimitedString record is put before each Master Record\n" -
"    (or after if DETAIL MASTER order) on the primary output stream.\n" -
"\n" -
"*/\n"
