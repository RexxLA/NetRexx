-- hostbyname.nrx Pipeline stage
/*
 *  Copyright (C) 2020 RexxLA
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

  /*  Change History:
   *
   *      2023/02/21 Documentation; givehelp(). Jeff Hennick
   *      2020-04-05   CK        - Initial kick
   *      2020-09-16   CK, JeffH - Sort results of getAllByName prior to output.  Because DNS does not guarantee the same order
   *                               of a multi-homed hostname our unit test results could produce a false negative response.  Forcing
   *                               the order to be consistent should resolve this issue.
   *      2020-09-18   CK        - Convert output to be of type Rexx instead of String
   */

options decimal
options binary
import org.netrexx.njpipes.pipes.
import java.net.

package org.netrexx.njpipes.stages

class hostbyname extends stage

  method run() signals ThreadQ

    a           = Rexx             /* arguments passed to filter                               */
    addr_all    = InetAddress[]    /* holds all IP addresses returned by Java getAllByName     */
    data        = Rexx             /* Rexxified output from stringified output of getAllByName */
    addr_out    = Rexx ""          /* output string passed on to next filter                   */
    rec_num     = 0                /* current record number being processed                    */
    includename = 0                /* flag for optional inclusion of hostname on output        */
    i           = Rexx             /* temp var used for insertion sort                         */
    j           = Rexx             /* temp var used for insertion sort                         */
    k           = Rexx             /* temp var used for insertion sort                         */
    list        = Rexx             /* used for holding sorted order of ip addresses returned   */

    /* -- Process any arguments -- */

    a = Rexx (arg(null))

    if a \= null then do

      a = a.upper()
      if a.pos("INCLUDENAME") > 0 then includename = 1

    end

    /* -- Main loop -- */

    do
      loop label siempre    forever

      host = Rexx peekto()
      rec_num = rec_num + 1

      do
       if host = null   then do

         output("# Input record "rec_num": Missing hostname to evaluate #")
         readto()
         iterate siempre

       end

       addr_all = InetAddress.getAllByName(host)

      catch java.net.UnknownHostException
       do

         output("# Input record "rec_num": Unable to determine IP address for "host" #")
         readto()
         iterate siempre

       end   /* catch Unknown Host */

      end /* do if host null */

      list = ''               /* initialize default value for unknown list elements */
      list[0] = 0             /* initialize count of number of ipaddr encountered   */

      loop i = 0 to ( addr_all.length - 1 )

       data = addr_all[i].toString()
       parse data ."/"ipaddr

        /* Build a sorted list of IP addresses using insertion sort */

           /*  Find the entry which is smaller than ipaddr   */

           loop j = 1 to list[0] while list[j] << ipaddr
           end

           /* At this point i points to the first IP address bigger than the ipaddr */
           /* so move up all the bigger ones . . .                                  */

           loop k = list[0]+1 to j by -1
              list[k] = list[k-1]
           end

           /* . . . and put ipaddr into its right place (before the bigger ones)     */

           list[j] = ipaddr
           list[0] = list[0] + 1

      end  /* loop i = 0 ... */

      loop i = 1 to list[0]
       if includename then addr_out = addr_out" "host"/"list[i]
       else addr_out = addr_out" "list[i]
      end /* loop i = 1 */

     addr_out = (Rexx addr_out).strip("B"," ")  /* strip the leading blank  */
     output( addr_out )                         /* write to the output stream */
     addr_out = ""                              /* prepare for next record */
     readto()                                   /* get next record         */

    end /* loop forever */

    catch StageError
      rc = rc()

    end /* do (loop forever) */

    exit(rc*(rc \= 12))

method givehelp() static
return -
"  /**  hostbyname - Resolve a Domain Name into an IP Address\n" -
"   *\n" -
"   *  The input to HOSTBYNAME is a list of hostnames (possibly qualified by their domain\n" -
"   *  name).  For each hostname it determines the corresponding IP address; this information\n" -
"   *  is written to the output stream.  Where multiple IP addresses exist for a given\n" -
"   *  name they are written with a 'space' separator.  When the domain or host name cannot be\n" -
"   *  resolved, the input hostname and additional information are written to the output\n" -
"   *  stream.\n" -
"   *\n" -
"   *  >>--HOSTBYNAME ----------+---------------+--------><\n" -
"   *                           |               |\n" -
"   *                           +--INCLUDENAME--+  (1)\n" -
"   *\n" -
"   *\n" -
"   *  (1) Optional parameter not present in VM/CMS version\n" -
"   *\n" -
"   *  Arguments:  INCLUDENAME        - Also include the name of the host on output.\n" -
"   *                                   Output:   <hostname>/<ip address>\n" -
"   *                                   Example:  dns.google/8.8.8.8\n" -
"   *\n" -
"   *  Examples:\n" -
"   *\n" -
"   *   pipe \"literal dns.google | hostbyname | console\"\n" -
"   *   8.8.4.4 8.8.8.8\n" -
"   * \n" -
"   *   pipe \"literal dns.google | hostbyname includename | console\"\n" -
"   *   dns.google/8.8.4.4 dns.google/8.8.8.8\n" -
"   * \n" -
"   *   pipe \"literal www.shaw.ca | hostbyname | console\"\n" -
"   *   23.6.246.208\n" -
"   * \n" -
"   *   pipe \"literal bogus.bogus | hostbyname | console\"\n" -
"   *   # Input record 1: Unable to determine IP address for bogus.bogus #\n" -
"   *\n" -
"   *\n" -
"   *  Known issues:  The underlying Java getAllByName does not appear to handle names that return\n" -
"   *                 IPv6 addresses in any known and consistent manner.\n" -
"   */\n"
