-- overlay.nrx njPipes stage
/*
 *  Copyright (C) 1997-2020 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */
/*
  20/ 5/18 OVER is ok for njPipes.
           Made keyword STRING manditory for dstring.
           Added backspace, \x08, to say. Jeff Hennick
  20/ 5/12 Added dstring. Jeff Hennick
  20/ 5/11 Added HOLD. Jeff Hennick
  20/ 5/10 Added PAD and TRANSPARENT. Jeff Hennick
  20/ 5/10 Double fail for selectInput (it was quitting too soon-?-). Note. Jeff Hennick
  20/ 5/ 5 Fixed with .toString; overlayx(). Jeff Hennick
  97/  /   Ed Tomlinson
*/

/** OVERLAY  njPipes

                 +-NOHOLD-(1)-+ +-PAD-(1)+ +-BLANK----+
 >>--OVERlay-(1)-+------------+-+--------+-+----------+-+--------------------------+-+-----------------------+--><
                 +-HOLD-(1)---+            +-xorc-----+ +-TRANSparent-+-xorc--+-(1)+ +-STRING--dstring-(1)(2)+
                                           +-SPACE-(1)+               +-BLANK-+
                                                                      +-SPACE-+

   HOLD keeps the last record from each stream, except primary, and uses it if the stream ends.
   TRANSPARENT means that character can be different from the PAD character.
     If omitted, it is the same as PAD character.
   dstream can be used instead of a non-primary stream.

   (1) njPipes only
   (2) same as highest (+1) stream; implies HOLD

*/
/** OVERLAY  CMS

             +-BLANK-+
 >>--OVERlay-+-------+----------------------------------------------><
             +-xorc--+

*/
options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages
import org.netrexx.njpipes.pipes.

class overlay extends stage

method run()
  arg=arg()
  pad=Rexx ' '
  trans=Rexx ' '
  hold = boolean 0
  H = Rexx ''
  dstring = Rexx null

  if arg<>'' then
    do
      parse arg fw rest
      if fw.upper = 'HOLD' then do
       hold = 1
       parse arg . fw rest
      end
      if fw.upper = 'NOHOLD' then do
       hold = 0
       parse arg . fw rest
      end
      if fw.upper = 'PAD' then parse arg . fw rest
      if fw = '' then
        pad = ' '
      else
        pad=GetXorc(fw)
      if pad == null then
        pad = ' '
      else
        arg = rest
      if arg = '' then
        trans = pad
      else
        do
          parse arg fw rest
          if 'TRANSPARENT'.abbrev(fw.upper, 5) then do
            parse arg . fw rest
            trans = GetXorc(fw)
            if trans=null then
              Emsg(11,'Error - 'getName()' option 'fw' is not recognized')
--            parse rest . arg
            arg = rest
          end
          parse arg fw rest
          if fw.upper = 'STRING' then do
            ds = dstring(rest)
            if ds.String <> null then do
              dstring = ds.String
              if ds.Residue <> '' then
                Emsg(11,'Error - 'getName()' option 'ds.Residue' is not recognized')
            end
            else
              Emsg(11,'Error - 'getName()' option 'arg' is not recognized')
          end

        end
    end
  startpos=Rexx 1
  kicking=boolean 1
  max = maxInputStream()

  if dstring \= null then do
    max = max + 1
    H[max] = dstring
    hold = 1
  end

  loop label read while kicking   -- more fun than a slimmer "until"!
    kicking=boolean 0
    folded=Rexx ''
    loop pick=0 to max
      line = ''
             --  5/20 This is because the selectInput(0) sometimes doesn't seem to work
             --       showed "no more input," when there is
      do
        selectInput(pick)
      catch StageError
        do
          selectInput(pick)
        catch StageError
          rc = rc()
          if pick = 0 then leave
          if H[pick] = '' then
            iterate
          line = H[pick]
        end
      end
say " \x08\-"   -- null equivalent so peekto(), below, works.  Why needed????
      if line = '' then
        do
                     -- 5/20 This is becuse peekto() here sometimes doesn't seem to work
          linea = peekto()
          lineb = peekto()
          if linea <> lineb then do
            linec = peekto()
            if linec <> linea then do
              if linec <> lineb then -- All 3 are different!
                Emsg(99, "Error in peekto():\n"linea";\n"lineb";\n"linec)
              else
                linea = lineb -- b & c agree, but differ from a
            end
          end
          lines=linea.toString()
          line=Rexx lines
        end
      if hold then
        H[pick] = line
      if line <> '' then
        folded = overlayex(folded,line,startpos,line.length,pad,trans)
      kicking=1
      readto()
    catch StageError
      rc=rc()
    end
    if kicking then
      output(folded)
  catch StageError
    rc=mrc()
  end read
  exit(rc*(rc<>12))

method overlayex(string,line,startpos,llength,pad,trans)
     -- make them the same length
  slength = string.length
  if slength > llength then do
    line = line.left(slength,pad)
    max = slength
  end
  else do
    string = string.left(llength,pad)
    max = llength
  end
      -- work them
  o = ''
  if startpos > 1 then o = string.left(startpos - 1,pad)
  loop i = startpos to max
    cl = line.substr(i,1)
    if cl = trans then
      o = o''string.substr(i,1)
    else
      o = o''cl
  end
  return o
