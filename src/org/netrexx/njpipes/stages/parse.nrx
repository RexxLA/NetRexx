-- parse.nrx Pipeline stage
/*
 *  Copyright (C) 2020  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

/*
 23/02/22 Documentation; givehelp(). Jeff Hennick
 20/ 6/29 Jeff Hennick
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class parse extends stage

options = Rexx
optionsup = Rexx



  -- The run method of this stage should never get called

method run()
  rc = 16
  exit(rc)


  /*
   * pInfo    = name of pipe,
   * pInfo[1] = stage number in pipe
   * pInfo[2] = stage label, null if no label
   * pInfo[3] = stage name
   * pInfo[4] = stage arguements
   * pInfo[5] = rest of pipe
   * pInfo[6] = sep
   * pInfo[7] = end
   * pInfo[8] = not modifier active
   * pInfo[9] = stage is a driver
   * code     = ''
   * code[0]  = 0
   *
   * When compilerExit returns with true, the compiler expects:
   *
   * pInfo[2] = stage label
   * pInfo[3] = name of stage
   * pInfo[4] = stage arguements
   * pInfo[5] = rest of the pipe
   * code[0]  = number of lines generated
   * code[n]  = line n
   *
   */

method stageExit(pInfo=Rexx,o=Rexx) returns boolean
do
  pid  = pInfo
  name = pInfo[3]

  templates = pInfo[4]

  ptempl = DString(templates)
  pt = ptempl.String()

  if pt = '' then do
    -- Emsg(11, 'Parse -- no parse template found in' templates)
    say 'Parse -- no parse template found in' templates 'RC = 11'
    exit 11
  end

  otempl = DString(ptempl.Residue())
  ot = otempl.String()

  if ot = '' then do
    -- Emsg(11, 'Parse -- no output template found in' ptempl.Residue())
    say 'Parse -- no output template found in' ptempl.Residue() 'RC = 11'
    exit 11
  end

  one = 1.d2c()
  ot = ot.changestr('$$',one)
  ot = ot.changestr('"','""')
  loop i = 1 for 9
    ot = ot.changestr("$"i,'"$'i'"')
  end

  if  otempl.Residue() <> '' then do
    -- Emsg(11, 'Parse -- Unknown extra:' otempl.Residue())
    say 'Parse -- Unknown extra:' otempl.Residue() 'RC = 11'
    exit 11
  end


  /* make the generated stage */
  n=0
  cname = stageName(name,pid,pInfo[1])


  n=n+1;o[n]= 'class 'cname' extends stage private'
  n=n+1;o[n]= '--trace results'
  n=n+1;o[n]= 'one = 1.d2c()'

  n=n+1;o[n]= ''
  n=n+1;o[n]= 'method run()'
  n=n+1;o[n]= 'loop forever'
       /* See what input we have. */
  n=n+1;o[n]= '  line = Rexx peekto()'
  n=n+1;o[n]= '  line = line.changestr("$",one)'

  n=n+1;o[n]= '  parse line' pt

  n=n+1;o[n]= '  ol = Rexx "'ot'"'
  n=n+1;o[n]= '  ol = ol.changestr(one,"$")'

  n=n+1;o[n]= '  output(ol)'

       /* Go on to the next one. */
  n=n+1;o[n]= '  readto()'
  n=n+1;o[n]= 'catch StageError'  /* Most likely end of input */
  n=n+1;o[n]= '  rc = rc()'
  n=n+1;o[n]= 'end'

  n=n+1;o[n]= 'exit(rc*(rc<>12))'

  o[0] = n

  pInfo[3] = cname
  pInfo[4] = 'arg(_)'                     -- magic passthru value for arg()

  /* show off the generated code */
  trace off
  sc = 0
  -- sc = 1 -- comment out to not show the code
  sn = 0
  sn = 1 -- comment out to not show line numbers
  nn = Rexx
  if sc then do
    say "*************************************************************"
    loop nn = 1 for o[0]
      if sn then l = nn.right(3)" "
      else l = ""
      say l""o[nn]
    end
    say "*************************************************************"
  end
end
return 1

Method givehelp() static
return -
"/** parse -- Rearrange Contents of Records using Rexx Parse\n" -
"\n" -
">>--PARSE--parse_template_Dstring---output_template_Dstring--><\n" -
"\n" -
" Records are parsed via the parse_template_delimited_string.\n" -
" Variables are named $n, where n is 1 to 9.\n" -
" The values of the variables are put into the output_template_delimited_string\n" -
" replacing $n.\n" -
" For a literal $n that won't be changed, use $$n.\n" -
"\n" -
" Example:\n" -
"   parse  / 2 $1 +1/ /The second letter is \"$1\". $$1 won't be changed./\n" -
"\n" -
"*/\n"
