-- parse.nrx Pipeline stage
/*
 *  Copyright (C) 2020, 2023  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

/*
 23/ 4/19 Added support for depreciated $n. Jeff Hennick
 23/ 4/13 _n was $n; adding NR option.  Jeff Hennick
 23/02/22 Documentation; givehelp(). Jeff Hennick
 20/ 6/29 Jeff Hennick
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class parse extends stage

options = Rexx
optionsup = Rexx

ss = Rexx "" -- output intermediate source array
sline = int 0 -- output source last line number
lline = Rexx "" -- logic line being built


  -- The run method of this stage should never get called

method run()
  rc = 16
  exit(rc)


  /*
   * pInfo    = name of pipe,
   * pInfo[1] = stage number in pipe
   * pInfo[2] = stage label, null if no label
   * pInfo[3] = stage name
   * pInfo[4] = stage arguements
   * pInfo[5] = rest of pipe
   * pInfo[6] = sep
   * pInfo[7] = end
   * pInfo[8] = not modifier active
   * pInfo[9] = stage is a driver
   * code     = ''
   * code[0]  = 0
   *
   * When compilerExit returns with true, the compiler expects:
   *
   * pInfo[2] = stage label
   * pInfo[3] = name of stage
   * pInfo[4] = stage arguements
   * pInfo[5] = rest of the pipe
   * code[0]  = number of lines generated
   * code[n]  = line n
   *
   */

method stageExit(pInfo=Rexx,code=Rexx) returns boolean
do
  pid  = pInfo
  name = pInfo[3]
  ucode = Rexx ''
  lcode = Rexx ''
  ot = Rexx ''
  uf = Rexx ''
  lf = Rexx ''
  one = 1.d2c()

  if pInfo[8] then
    signal StageError(13,'Error (parse) - 'pInfo' - not valid at 'pInfo[3]' 'pInfo[4])


  nrcall = 0
-- trace results

  templates = pInfo[4]

  ptempl = DString(templates)
  pt = ptempl.String()

  if pt = '' then do
    -- Emsg(11, 'Parse -- no parse template found in' templates)
    say 'Parse -- no parse template found in' templates 'RC = 11'
    exit 11
  end

  dol = pt.pos('$') > 0

  optstr = ptempl.Residue()

  parse optstr w1 rest

  if w1 = 'NR' | w1 = 'NETREXX' then do
    ctemp1 = Dstring(rest)
    ucode = ctemp1.String()
    optstr = ctemp1.Residue()
    nrcall = 1

             /* ensure the user function ends with "return data" if needed */
        ucode = ucode.strip('B').strip('T',';') -- clean it up
        lsc = ucode.lastpos(';') + 1
        parse ucode . =(lsc) verb . rest  -- what is last statement?
        if verb \= 'return' then ucode = ucode';return ""' -- add a return if needed

    uf[0] = 'method user()'
    uf[1] = ' 'ucode
  end

  parse optstr w1 rest

  if w1 = 'FINALLY' then do    -- first possible position
    ctemp1 = Dstring(rest)
    lcode = ctemp1.String()
    optstr = ctemp1.Residue()
    nrfinally = 1

         /* ensure the user function ends with "return data" if needed */
    lcode = lcode.strip('B').strip('T',';') -- clean it up
    lsc = lcode.lastpos(';') + 1
    parse lcode . =(lsc) verb . rest  -- what is last statement?
    if verb \= 'return' then lcode = lcode';return ""' -- add a return if needed

    lf[0] = 'method last()'
    lf[1] = ' 'lcode
  end

  otempl = DString(optstr)
  ot = otempl.String()
  optstr = otempl.Residue()

  if dol & \nrcall & \nrfinally then do -- accomdate depreciated style
    pt = pt.changestr('$$', one)
    pt = pt.changestr('$', '_')
    pt = pt.changestr(one, '$$')
    ot = ot.changestr('$$', one)
    ot = ot.changestr('$', '_')
    ot = ot.changestr(one, '$$')
  end

  parse optstr w1 rest

  if w1 = 'FINALLY' then do    -- second possible position
    ctemp1 = Dstring(rest)
    lcode = ctemp1.String()
    optstr = ctemp1.Residue()
    nrfinally = 1

         /* ensure the user function ends with "return data" if needed */
    lcode = lcode.strip('B').strip('T',';') -- clean it up
    lsc = lcode.lastpos(';') + 1
    parse lcode . =(lsc) verb . rest  -- what is last statement?
    if verb \= 'return' then lcode = lcode';return ""' -- add a return if needed

    lf[0] = 'method last()'
    lf[1] = ' 'lcode
  end

  ot = ot.changestr('__',one)
  ot = ot.changestr('"','""')
  loop i = 1 for 9
    ot = ot.changestr("_"i,'"_'i'"')
  end
  ot = ot.changestr(one,'__')

  if optstr <> '' then do
    -- Emsg(11, 'Parse -- Unknown extra:' otempl.Residue())
    say 'Parse -- Unknown extra:' otempl.Residue() 'RC = 11'
    exit 11
  end


  /* make the generated stage */
  cname = stageName(name,pid,pInfo[1])


  s('class 'cname' extends stage private')
  -- s('trace results')
  s('one = 1.d2c()')


  s('counter = Rexx 0') -- available for use in user functions

  loop n = 1 to 9
   s('_'n' = Rexx ""')
  end

  s('')
  s('method run()')
  s('loop forever')
       /* See what input we have. */
  s('  line = Rexx peekto()')
  s('  line = line.changestr("__",one)')

  s('  parse line' pt)

  s('  ol = Rexx null')

  if nrcall then do
    s('  ol = user()')
  end

  if ot <> "" then do
    s('  ol = Rexx "'ot'"')
  end

  s('  if ol <> null then do')
  s('    loop while ol <> ""')
  s('      parse ol o "\\n" ol')
  s('      output(o)')
  s('    end')
  s('  end')

       /* Go on to the next one. */
  s('  readto()')
  s('catch StageError'  /* Most likely end of input */)
  s('  rc = rc()')

  if nrfinally then do
    s(' do')
    s('   o = last()')
    s('   loop while o <> ""')
    s('     parse o ol "\\n" o')
    s('     output(ol)')
    s('   end')
    s(' catch StageError'  /* Most likely end of input */)
    s(' end')
  end

  s('end')

  s('exit(rc*(rc<>12))')

  if nrcall then do
    s(' ')
    s(uf[0])
    s(uf[1])
    s(' ')
  end

  if nrfinally then do
    s(' ')
    s(lf[0])
    s(lf[1])
    s(' ')
  end

 ss[0] = sline
 loop i = 0 to sline
  code[i] = ss[i]
 end


  pInfo[3] = cname
  pInfo[4] = 'arg(_)'                     -- magic passthru value for arg()

  /* show off the generated code */
  trace off
  sc = 0
  -- sc = 1 -- comment out to not show the code
  sn = 0
  sn = 1 -- comment out to not show line numbers
  nn = Rexx
  if sc then do
    say "*************************************************************"
    loop nn = 1 for ss[0]
      if sn then l = nn.right(3)" "
      else l = ""
      say l""ss[nn]
    end
    say "*************************************************************"
  end
end
return 1

method s(source)
 sline = sline + 1
 ss[sline] = source
return

method givehelp() static
return -
"/** parse -- Rearrange Contents of Records using Rexx Parse\n" -
"\n" -
">>--PARSE--parse_template_Dstring-->\n" -
"\n" -
" >--+-----------------------------+-->\n" -
"    +-+-NETREXX-+-NetRexx_Dstring-+\n" -
"      +-NR------+\n" -
"\n" -
" >--+-------------------------+-->\n" -
"    +-output_template_Dstring-+\n" -
"\n" -
" >--+---------------------------------+--><\n" -
"    +-FINALLY-finally_NetRexx_Dstring-+\n" -
"\n" -
" Records are parsed via the parse_template_delimited_string.\n" -
" Variables are named _n, where n is 1 to 9.\n" -
" The values of the variables are put into the output_template_delimited_string\n" -
" replacing _n.\n" -
" For a literal _n that won't be changed, use __n.\n" -
" The NetRexx_Dstring and finally_NetRexx_Dstring are any valid NetRexx statement\n" -
" or ;-separated statements that may use and set the ""_n"" variables.\n" -
" The string \n will split the string into separate ouput records.\n" -
" The special indexed variable COUNTER[] is also available in these Dstrings.\n" -
" Note: Now deprecated: ""$n"" instead of ""_n""; no NR or FINALLY.\n" -
"\n" -
" Examples:\n" -
"   parse  / 2 _1 +1/ /The second letter is \"_1\". __1 won't be changed./\n" -
"\n" -
"   parse  / _1 2 _2 +1 _3/ NR /_2 = _2.upper/ /_1_2_3/\n" -
"\n" -
"   PARSE  /_1 2 _2 +1 _3/ ,\n" -
"    NR /if _2.datatype('l') then counter['c'] = counter['c'] + 1; _2 = _2.upper/ ,\n" -
"    /_1_2_3/ ,\n" -
"    FINALLY /return counter['c'] 'changed to upper'/\n" -
"\n" -
"   parse /2 _1 +1/ NR /counter[1]=counter[1]+1/ FINALLY /_9=""Count:"" counter[1]/ /_9/\n" -
"\n" -
"*/\n"

