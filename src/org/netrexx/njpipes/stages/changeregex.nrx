-- changeregex.nrx Pipeline stage
/*
 *  Copyright (C) 2020  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

/*
  23/ 2/18 Documentation; givehelp(). Jeff Hennick
  20/10/ 8 FROM & To. Jeff Hennick
  20/ 7/10 New. From CHANGE and REGEX.  Jeff Hennick
*/

options nostrictcase nostrictargs nostrictsignal nobinary

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.
import java.util.regex.

class changeregex extends stage uses IRange

method run() public

   args = Rexx ''
--   rest = Rexx ''
   outl = Rexx ''

   args = arg()

   fs = getKeyWord(args, 'FROM', 4, 'D')
   if fs[2] = '' then fs = getKeyWord(args, '', 0, 'D')
   if fs[2] = '' then
     Emsg(11, 'ChangeRegex: No FROM string found:' args)
   from_str = fs[2]
   args = fs[1]

   ts = getKeyWord(args, 'TO', 2, 'D')
   if ts[2] = '' then ts = getKeyWord(args, '', 0, 'D')
   if ts[2] = '' then
     Emsg(11, 'ChangeRegex: No TO string found:' arg())
   to_str = ts[2]
   args = ts[1]

/*
   fds = DString(args)
   from_str = fds.String

   tds = Dstring(fds.Residue())
   to_str = tds.String
*/
   aw = getKeyWord(args, 'ALL', 3, 'K')
   if aw[2] then do
     all = 1
     args = aw[1]
   end
   else all = 0

   ow = getKeyWord(args, 'ONE', 3, 'K')
   if ow[2] then do
     args = ow[1]
     all = 0
   end
   if args <> '' then
     Emsg(11, 'Changeregex extra agruments:' args)

/*
   parse tds.Residue() w1 rest

   if rest <> '' then
     Emsg(11, 'Changeregex extra agruments:' rest)

   if w1 <> '' & 'ONE ALL'.wordpos(w1.upper) = 0 then
     Emsg(11, 'Changeregex unexpected agruments:' tds.Residue())

   all = w1.upper = 'ALL'
*/

     /* One time compile */
   do
     pat = Pattern.compile(from_str);
   catch PatternSyntaxException
     Emsg(11, 'Changeregex invalid Java regex pattern:' from_str)
   end

   if all then loop forever
      line = peekto().toString()

      outl = pat.matcher(line).replaceAll(to_str)

      output(outl)

      readto()
   catch StageError
   end

   else loop forever
      line = peekto().toString()

      outl = pat.matcher(line).replaceFirst(to_str)

      output(outl)

      readto()
   catch StageError
   end

   rc = mrc()

exit(rc*(rc<>12))

Method givehelp() static
return -
"/** changeregex -- Change the contents of records, using Java Regular Expression\n" -
"\n" -
"                   +-FROM-+                      +-TO-+                      +-ONE-+\n" -
"  >>--CHANGERegex--+------+--delimitedString-(1)-+----+--delimitedString-(2)-+-----+----><\n" -
"                                                                             +-ALL-+\n" -
"\n" -
" Notes:\n" -
"  Uses the Java RegEx classes and its dialect of RegEx. See Java's Pattern class and replaceFirst and replaceAll methods of String for full documentation.\n" -
"  (1) First, FROM, delimitedString is a Java RegEx expresion for what is to be replaced.\n" -
"  (2) Second, TO, delimitedString is the replacement string. It may contain elements from the first one.\n" -
"  (3) NetRexx Pipelines only, not CMS.\n" -
"\n" -
"*/\n"
