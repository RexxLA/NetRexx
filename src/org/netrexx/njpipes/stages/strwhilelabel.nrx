-- strwhilelabel.nrx Pipeline stage
/*
 *  Copyright (C) 1998-2020  Jeffrey Hennick, Jeff (at) Jeff (dash) H (dot) com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

/*
 23/02/23  Documentation; givehelp(). Jeff Hennick
 20/ 6/27  From strtolabel
 20/ 6/ 5  Exclusive & Inclusive; Fix Netrexx logic; Caseless. Jeff Hennick
 98/ 6/12  DString.  New; from tolabel.  JHennick
*/

options nostrictcase nostrictargs nostrictsignal
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class strwhilelabel extends stage

method run()

   /* variable declarations */
   _labelFound   = boolean  1
   _rc           = int      0
   _Label_len    = int      0
   _output0      = boolean  1
   exclusive     = boolean  1

   args          = rexx     ''
   anyc          = boolean  0
   w1            = rexx     ''

   /* get incoming arguments and associated parameters */

   parse arg().upper() w1 .
   anyc = 'ANYCASE'.abbrev(w1,3) | 'CASEANY IGNORECASE CASEIGNORE CASELESS'.wordpos(w1) > 0
   if anyc then parse arg() . args
   else args = arg()

   parse args w1 .
   exc = 'EXCLUSIVE'.abbrev(w1,8)
   if exc then parse args . args

   parse args w1 .
   inclusive = 'INCLUSIVE'.abbrev(w1,8)   -- overrides EXCLUSIVE
   if inclusive then do
      exclusive = 0
      parse args . args
   end

   Label = DString(args).String
   if anyc then Label = Label.upper()

   _Label_len = Label.length()                       -- handy to have around for speed


   /* find out which streams we have available */
   do                                                -- enable catch
      selectOutput(1)

      catch StageError
   end

   do                                                -- enable catch
      selectOutput(0)

      catch StageError
      _output0 = 0
   end


   select
       when \ _output0 then
            _rc = 13                                   -- no reason to continue without one or the other streams
       when _Label_len <> 0 & anyc then
            loop forever while _labelFound
               _record = Rexx peekto()                 -- look at the next record
               if Label \= _record.left(_Label_len).upper() then
                  do
                     _labelFound = 0
                     if \ exclusive & _output0 then do
                        selectOutput(0)
                        output(_record)
                     catch StageError
                        _rc = rc()
                     end
                     selectOutput(1)
                     shortStreams()

                  catch StageError           -- errors (or end of datastream)
                     _rc = rc()
                     if _rc = 4 then _rc = 12
                  end
            else
               do
                  if _output0 then
                     do
                        selectOutput(0)
                        output(_record)
                     end
               end
               if  _labelFound then
                  readto()

               catch StageError                       -- errors (or end of datastream)
               _rc = rc()
            end
       when _Label_len <> 0 then
            loop forever while _labelFound
               _record = Rexx peekto()                 -- look at the next record
                 if Label \= _record.left(_Label_len) then
                    do
                       _labelFound = 0
                        if \ exclusive then do
                          if _output0 then do
                            selectOutput(0)
                            output(_record)
                          catch StageError
                            _rc = rc()
                          end
                          readto()
                        catch StageError
                          _rc = rc()
                        end
                        selectOutput(1)
                        shortStreams()

                        catch StageError           -- errors (or end of datastream)
                          _rc = rc()
                      end
                 else
                      do
                         if _output0 then
                            do
                               selectOutput(0)
                               output(_record)
                            end
                      end
               if _labelFound then
                  readto()

               catch StageError                       -- errors (or end of datastream)
               _rc = rc()
            end
       otherwise
            do
               selectOutput(1)
               shortStreams()

               catch StageError                      -- errors (or end of datastream)
               _rc = rc()
            end
   end

   exit(_rc * (_rc <> 12) )                          -- sever streams and leave with Colishaw (tm) retcode

method givehelp() static
return -
"/** strwhilelabel -- Select Run of Records with Leading String\n" -
"\n" -
"                                   +-INCLUSIVe-+\n" -
">>--STRWHILElabel--+------------+--+-----------+---delimitedString-------><\n" -
"                   +-ANYcase----+  +-EXCLUSIVe-+\n" -
"                   +-CASEANY----+\n" -
"                   +-IGNORECASE-+\n" -
"                   +-CASEIGNORE-+\n" -
"                   +-CASELESS---+\n" -
"\n" -
"*/\n"
