-- abbrev.nrx NJPipe Stage
/*
 *  Copyright (C) 1998  Jeffrey Hennick, JHennick@Delphi.Com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

/*
   20/ 4/ 5 Removed the long name classes to individual files. jh
   19/09/16 Add CASELESS to bring up to current CMS. JHennick
   99/05/09  use mrc() instead of rc().  ejt
   98/06/20 aobj; binary.  JHennick
*/

/** abbrev

>>--ABBREViation-(1)--+-------------------------------+---><-
                      +-word-+---------------------+--+
                             +-number-+---------+--+
                                      +-ANYcase-+ (2)(3)

(1) ABBREViation must be ABBREV in CMS
(2) CASEANY, CASEIGNORE, CASELESS, and IGNORECASE are all synonyms for ANYcase.
(3) ANYcase must be ANYCASE in CMS

*/

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class abbrev extends stage binary

method run() signals ThreadQ

   parse arg() word number cf .

   cf = cf.upper()
   anyc = boolean 'ANYCASE'.abbrev(cf, 3) | 'CASEANY IGNORECASE CASEIGNORE CASELESS'.wordpos(cf) > 0

   if \number.datatype('W') then number = 0

   sec = boolean 0
   do
      selectOutput(1)
      sec = 1
   catch StageError
   finally
      do
         selectOutput(0)
      catch StageError
      end
   end

   if anyc then do                 -- ANYCASE
      word = word.upper()
      if sec then do                 -- secondary connected
         loop
            aobj = peekto()
            line = Rexx aobj
            parse line w1 .

            if word.abbrev(w1.upper(),number) then output(line)
            else do
               selectOutput(1)
               output(aobj)
               selectOutput(0)
            catch StageError
            end

            readto()
         catch StageError
         end
      end
      else do                        -- primary only
         loop
            aobj = peekto()
            line = Rexx aobj
            parse line w1 .

            if word.abbrev(w1.upper(),number) then output(aobj)

            readto()
         catch StageError
         end
      end
   end
   else do                 -- \ANYCASE
      if sec then do                 -- secondary connected
         loop
            aobj = peekto()
            line = Rexx aobj
            parse line w1 .

            if word.abbrev(w1,number) then output(aobj)
            else do
               selectOutput(1)
               output(aobj)
               selectOutput(0)
            catch StageError
            end

            readto()
         catch StageError
         end
      end
      else do                        -- primary only
         loop
            aobj= peekto()
            line = Rexx aobj
            parse line w1 .

            if word.abbrev(w1,number) then output(aobj)

            readto()
         catch StageError
         end
      end
   end

   rc = mrc()
   exit(rc*(rc<>12))

