-- append.nrx NJPipe Stage
/*
 *  Copyright (C) 1998  Jeffrey Hennick, JHennick@Delphi.Com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program. 
 */
-- 99/05/09  use mrc() instead of rc().  ejt
-- 98/07/30 use StageError(13,... in stageExit.  ejt
-- 98/06/ 1 Added CMS Documentation.  JHennick

/** append

   >>--APPEND--string-----------------------------------------------------><

*/


package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class append extends stage

method stageArg(a=rexx) returns rexx
   return a

method run()

   loop forever
      loop forever
         line = peekto()
         output(line)
         readto()
      catch StageError
         rc = rc()
         if rc=12 then do
            selectInput(-1)
            shortStreams()
            signal StageError
         end
      end
   catch StageError
      rc = rc()
   end

exit(rc*(rc<>12))


/*
 * pInfo    = name of pipe,
 * pInfo[1] = stage number in pipe
 * pInfo[2] = stage label, null if no label
 * pInfo[3] = stage name
 * pInfo[4] = stage arguements
 * pInfo[5] = rest of pipe
 * pInfo[6] = sep
 * pInfo[7] = end
 * pInfo[8] = not modifier active
 * pInfo[9] = stage is a driver
 * code     = ''
 * code[0]  = 0
 *
 * When compilerExit returns with true, the compiler expects:
 *
 * pInfo[2] = stage label
 * pInfo[3] = name of stage
 * pInfo[4] = stage arguements
 * pInfo[5] = rest of the pipe
 * code[0]  = number of lines generated
 * code[n]  = line n
 *
 */

method stageExit(pInfo=Rexx,o=Rexx) returns boolean signals StageError

if pInfo[4]='' then
   signal StageError(13,'Error - 'pInfo' - missing stage/pipe after 'pInfo[3])
if pInfo[8] then
   signal StageError(13,'Error - 'pInfo' - not valid at 'pInfo[3]' 'pInfo[4])

if pInfo[2]='' then
   pInfo[2] = '_ap_'pInfo[1]                                          -- add label

-- a minus sign infront of a label switches to negitive input streams...

pInfo[5] = pInfo[5]' 'pInfo[4]' 'pInfo[6]' -'pInfo[2]': 'pInfo[7]     -- add to pipe
pInfo[4] = ''                                                         -- no args used

return 1

