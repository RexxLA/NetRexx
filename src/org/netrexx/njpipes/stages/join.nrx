-- join.nrx NJPipe Stage
/*
 *  Copyright (C) 1998  Jeffrey Hennick, JHennick@Delphi.Com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.  
 */
-- 98/ 6/29  The first number is the number of records to be ADDED. JHennick
-- 98/ 6/12  DString.  Up to CMS Documentation. JHennick

/** join


             +-1-----------------+
   >>--JOIN--+-------------------+--+-----------------+--+--------+-------><
             +-number------------+  +-delimitedString-+  +-number-+
             +-*-----------------+
             +-KEYLENgth--number-+

*/

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class join extends stage

method run() public

   count   = rexx 1
   between = rexx ''

   parse arg() count pattern

   key    = rexx    0
   keyl   = rexx    0
   maxlen = rexx    ''

   select
      when 'KEYLENGTH'.abbrev(count.upper(), 6) then do
         key = 1
         count = 1
         parse arg() . keyl pattern
      end

      when \count.datatype('W') then do
         if count='*' then count = 999999999
         else do
            pattern = count
            count = 1
         end
      end
      otherwise nop
   end

   d = DString(pattern)
   between = d.String
   maxlen = d.Residue

   ml   = rexx    (maxlen \= '')
   kv   = rexx    ''
   kvp  = rexx    ''
   work = rexx    ''
   data = rexx    ''
   blen = rexx    between.length()

   if blen = 0 then
      select                -- NO "between"
         when key & ml then        -- key & maxlength
            loop forever
               line = Rexx readto()
               loop forever
                  work = Rexx peekto()
                  parse work kv +(keyl) data
                  if kv \= kvp then leave
                  if line.length() + work.length() > maxlen then leave
                  line = line || data
                  readto()
               catch StageError
                  rc = rc()
                  output(line)
                  signal StageError
               end
               output(line)
            catch StageError
               rc = rc()
            end
         when key then                   -- key & \maxlength
            loop forever
               line = Rexx readto()
               kvp = line.left(keyl)
               loop forever
                  work = Rexx peekto()
                  parse work kv +(keyl) data
                  if kv \= kvp then leave
                  line = line || data
                  readto()
               catch StageError
                  rc = rc()
                  output(line)
                  signal StageError
               end
               output(line)
            catch StageError
               rc = rc()
            end
         when ml then                     -- \key & maxlength
            loop forever
               line = Rexx readto()
               loop for count
                  work = Rexx peekto()
                  if line.length() + work.length() > maxlen then leave
                  line = line || work
                  readto()
               catch StageError
                  rc = rc()
                  output(line)
                  signal StageError
               end
               output(line)
            catch StageError
               rc = rc()
            end
         otherwise                          -- \key & \maxlength
            loop forever
               line = Rexx readto()
               loop for count
                  work = Rexx peekto()
                  line = line || work
                  readto()
               catch StageError
                  rc = rc()
                  output(line)
                  signal StageError
               end
               output(line)
            catch StageError
               rc = rc()
            end
      end
   else
      select               -- have some "between"
         when key & ml then        -- key & maxlength
            loop forever
               line = Rexx readto()
               loop forever
                  work = Rexx peekto()
                  parse work kv +(keyl) data
                  if kv \= kvp then leave
                  if line.length() + blen + work.length() > maxlen then leave
                  line = line || between || data
                  readto()
               catch StageError
                  rc = rc()
                  output(line || between)
                  signal StageError
               end
               output(line || between)
            catch StageError
               rc = rc()
            end
         when key then                   -- key & \maxlength
            loop forever
               line = Rexx readto()
               kvp = line.left(keyl)
               loop forever
                  work = Rexx peekto()
                  parse work kv +(keyl) data
                  if kv \= kvp then leave
                  line = line || between || data
                  readto()
               catch StageError
                  rc = rc()
                  output(line || between)
                  signal StageError
               end
               output(line || between)
            catch StageError
               rc = rc()
            end
         when ml then                     -- \key & maxlength
            loop forever
               line = Rexx readto()
               loop for count
                  work = Rexx peekto()
                  if line.length() + blen + work.length() > maxlen then leave
                  line = line || between || work
                  readto()
               catch StageError
                  rc = rc()
                  output(line || between)
                  signal StageError
               end
               output(line || between)
            catch StageError
               rc = rc()
            end
         otherwise                          -- \key & \maxlength
            loop forever
               line = Rexx readto()
               loop for count
                  work = Rexx peekto()
                  line = line || between || work
                  readto()
               catch StageError
                  rc = rc()
                  output(line || between)
                  signal StageError
               end
               output(line || between)
            catch StageError
               rc = rc()
            end
      end

exit(rc*(rc<>12))

