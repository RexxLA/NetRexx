-- between.nrx | outside.nrx NJPipe Stage
/*
 *  Copyright (C) 1998  Jeffrey Hennick, JHennick@Delphi.Com
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.  
 */
-- 99/05/09  use mrc() instead of rc().  ejt
-- 98/06/22  aobj; binary; outside New; derived from BETWEEN.  JHennick

/* between


   >>--BETWEEN--+---------+--delimitedString--+-number----------+---------><
                +-ANYcase-+                   +-delimitedString-+


  FRLABLE Contributed by Chuck Moore.

*/

/** outside


   >>--OUTSIDE--+---------+--delimitedString--+-number----------+---------><
                +-ANYcase-+                   +-delimitedString-+


  FRLABLE Contributed by Chuck Moore.

*/

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class outside extends stage binary  -- outside

method run()

   /* variable declarations */
   _rc           = int      0
   _Label_len    = int      0

   args          = Rexx     ''
   anycase       = boolean  0
   w1            = Rexx     ''

   /* get incoming arguments and associated parameters */

   parse arg() args
   parse args.upper() w1 .
   anycase = 'ANYCASE'.abbrev(w1,3) | 'CASEANY IGNORECASE CASEIGNORE'.wordpos(w1)
   if anycase then parse args . args

   ds = DString(args)

   Label = ds.String

   toLabel = ds.Residue
   if toLabel = '' then do
      Emsg(11,'Error --' getName() 'No "toLabel"')
   end

   if toLabel.datatype('W') then do
      number = toLabel - 1
      if number < 1 then do
         Emsg(11,'Error --' getName() 'number must be > 1')
      end
   end
   else do
      toLabel = DString(toLabel).String
      number = 0
      _toLabel_len = toLabel.length
   end

   _Label_len = Label.length()               -- handy to have around for speed

   select
       when _Label_len > 0 & anycase then                   -- real label, ANYCASE
            loop forever
               aobj = peekto()          -- look at the next record
               _record = Rexx aobj          -- look at the next record
               if Label = _record.left(_Label_len) then
                  do
                     do
                        /*selectOutput(0)  -- between */
                        selectOutput(1)   -- o
                        output(aobj)
                     catch StageError
                     finally
                        readto()
                     end

                     if number > 0 then loop for number
                        output(readto())
                     end
                     else loop until toLabel = _record.left(_toLabel_len)
                        aobj = peekto()
                        _record = Rexx aobj
                        output(aobj)
                        readto()
                     end

                  catch StageError           -- errors (or end of datastream)
                     leave
                  end
               else
                  do
                     /*selectOutput(1)  -- between */
                     selectOutput(0)  -- outside
                     output(aobj)
                  catch StageError
                  finally
                     readto()
                  end
            catch StageError                 -- errors (or end of datastream)
            end
       when _Label_len <> 0 then                    -- real label \anycase
            loop forever
               aobj = peekto()          -- look at the next record
               _record = Rexx aobj          -- look at the next record
               if Label == _record.left(_Label_len) then
                  do
                     do
                        /*selectOutput(0) -- between */
                        selectOutput(1)  -- outside
                        output(aobj)
                     catch StageError
                     finally
                        readto()
                     end

                     if number > 0 then loop for number
                        output(readto())
                     end
                     else loop until toLabel == _record.left(_toLabel_len)
                        aobj = peekto()
                        _record = Rexx aobj
                        output(aobj)
                        readto()
                     end

                  catch StageError           -- errors (or end of datastream)
                     leave
                  end
               else
                  do
                     /*selectOutput(1)  -- between */
                     selectOutput(0)  -- outside
                     output(aobj)
                  catch StageError
                  finally
                     readto()
                  end
            catch StageError                 -- errors (or end of datastream)
            end
       otherwise                     -- no real label
            do
               /*selectOutput(0) -- between */
               selectOutput(1)  -- outside
               shortStreams()

            catch StageError                 -- errors (or end of datastream)
            end
   end

   _rc = mrc()
   if _rc = 4 then _rc = 12
   exit(_rc * (_rc <> 12) )        -- sever streams and leave with Colishaw (tm) retcode
