/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

/* serialize
 *
 * {class}   if class is specified deserialize input to objects of this type
 *           otherwise serialize input objects.
 *
 * For some reason readObject does not like more than one object network
 * in its stream.  Block multiple objects.  see examples/sertest.njp
 *
 */
-- 99/05/30  use byte[]. ejt
-- 98/09/07  initial.  ejt

options binary

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class serialize extends stage uses utils

properties private static

bs = [byte 0]
bc = Class

method run()

   rc = 0
   bc = bs.getClass()

   do
      if arg()='' then
         do
            loop forever
               bout = ByteArrayOutputStream()
               ObjectOutputStream(bout).writeObject(peekto())
               output(bout.toByteArray())
               readto()
            end
         catch IOException
            signal StageError(15,'unexpected IOException serializing')
         end
      else
         loop forever
            o = peekto()
            select
            when bc.isInstance(o) then
               b = byte[] o
            when o<=String then
               b = (String o).getBytes()
            otherwise
               b = (o.toString()).getBytes()
            end
            output(ObjectinputStream(ByteArrayInputStream(b,0,b.length)).readObject())
            readto()
         catch ee=IOException
            Emsg(11,'got 'ee' deserializing')
         catch ClassNotFoundException
            Emsg(11,'input is not a serialized object')
         end

   catch e=StageError
   end

   rc = rc(e)

exit(rc*(rc<>12))


/* this method may get overridden by the stageExit, depending on the IRange */

/* stageExit(pInfo=Rexx,o=Rexx) returns boolean signals StageError
 *
 * This method is an exit called by the compiler.  With it you can change
 * the unprocessed pipe definition, the definition of the current stage,
 * and you can pass generated code back to the compiler.  To use it override
 * it.  See stages\append, stages\prefix and stages\specs for examples of its
 * use.
 *
 * stageExit is ONLY called for stages in the stage directory
 *
 * pInfo     = name of pipe,
 * pInfo[1]  = stage number in pipe
 * pInfo[2]  = stage label, null if no label
 * pInfo[3]  = stage name
 * pInfo[4]  = stage arguements
 * pInfo[5]  = rest of pipe
 * pInfo[6]  = sep
 * pInfo[7]  = end
 * pInfo[8]  = not modifier active
 * pInfo[9]  = stage is a driver (no input streams)
 * pInfo[10] = stage is a sink (no output streams)
 * o         = ''
 * o[0]      = 0
 *
 * When compilerExit returns with true, the compiler expects:
 *
 * pInfo[2]  = stage label
 * pInfo[3]  = name of stage
 * pInfo[4]  = stage arguements - note 'arg(_)' is magic and passes the pipe's
 *             arguement to the stage unchanged.  See the specs stage.
 * pInfo[5]  = rest of the pipe
 * pInfo[8]  = not modifier active.   See nfind, nlocate.
 * pInfo[11] = IF you change the name of THIS stage to an existing stage, call
 *             the stageExit in pInfo[11].  The current stage should not be
 *             generating code and the new stage might.  See nfind, nlocate.
 * o[0]      = number of lines generated for classes
 * o[n]      = line n of generated code
 *
 */

method stageExit(pInfo=Rexx,o=Rexx) returns boolean signals StageError

pid  = pInfo            -- pipe name
stg  = pInfo[3]         -- stage name
args = pInfo[4]         -- arguement, note that this is an instance object

if args='' then
   return 0

/* here we build code and pass it back to the compiler */

cname = stageName(pid'_'stg,pid,pInfo[1])    -- the standard way to ask njPipes
                                             -- for the name of a new class
n = o[0]

o[n+1] ='class 'cname' extends 'stg' private'
o[n+3] ='method output(a=object)'
o[n+5] ='   super.output('args' a)'
n = n+6

o[0] = n           -- save the number of lines generated

pInfo[3] = cname   -- call this stage instead, there is no need to set pInfo[11]
                   -- since cname is created here and its stageExit is this one

return 1           -- tell the compiler to look at what we built

/*
 * There is no need to override rexxArg or stageArg since we are not being
 * passed a rexx object's name or a stage name.
 *
 */
