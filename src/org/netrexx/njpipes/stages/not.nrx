/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */
options nostrictcase nostrictargs nostrictsignal
-- 98/ 7/30 use StageError(13,... in stageExit.  ejt
package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class not extends stage

method run()
   Emsg(11,'Error - Should be overridden via a stageExit')

-- The stageArg call IS used by the compiler

method stageArg(a=rexx) returns rexx
   return a

/* This is done via the compiler to avoid recursion problems with stageExit.
 * The stageExit model is already tricky enough with the need for recursive
 * calls...
 *
 * I have left this code here as an example of overriding selectInput and
 * selectOutput.  Note that selectAnyInput is not hooked into here...

method stageExit(pInfo=Rexx,o=Rexx) returns boolean signals StageError

pid  = pInfo            -- pipe name
name = pInfo[3]         -- stage name
args = pInfo[4]         -- arguement

parse args stg rest

if stg='' then
   signal StageError(13,'Error - 'pInfo' - NOT expects a selection stage to follow')

n = o[0]

cname = stageName(name'_'stg,pid,pInfo[1])
o[n+1] ='class 'cname' extends 'stg' private'
n = n+2

o[n+1] ='method selectInput(stream=int) protect signals StageError'
o[n+2] ='   select'
o[n+3] ='   when stream=0 then super.selectInput(1)'
o[n+4] ='   when stream=1 then super.selectInput(0)'
o[n+5] ='   otherwise'
o[n+6] ='      super.selectInput(stream)'
o[n+7] ='   end'
n = n+8

o[n+1] ='method selectOutput(stream=int) protect signals StageError'
o[n+2] ='   select'
o[n+3] ='   when stream=0 then super.selectOutput(1)'
o[n+4] ='   when stream=1 then super.selectOutput(0)'
o[n+5] ='   otherwise'
o[n+6] ='      super.selectOutput(stream)'
o[n+7] ='   end'
n = n+8

o[0] = n
pInfo[3]  = cname                           -- call this stage instead
pInfo[4]  = rest

return 1

*/
