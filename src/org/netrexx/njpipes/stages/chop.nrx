-- chop.nrx Pipeline stage
/*
 *  Copyright (C) 1998  Jeffrey Hennick
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 */

/*
  23/ 2/18 Documentation; givehelp(). Jeff Hennick
  21/ 2/16 Define outl as type Rexx.  Jeff Hennick
  19/09/21 Fix for negagive snumber.  Jeff Hennick
  99/05/09  use mrc() instead of rc().  ejt
  98/06/17 New.  JHennick
*/


options nostrictcase nostrictargs nostrictsignal

package org.netrexx.njpipes.stages

import org.netrexx.njpipes.pipes.

class chop extends stage

method run() public

   parse arg() key rest

   args = rest

   number = ''
   mnumber = boolean 0

   if rest = '' then do
     if key = '' then number = 80           -- nothing
     else if key.datatype('W') then do      -- number
        number = key
        if number < 0 then mnumber = 1
     end
   end

   if number = '' then  do
                                           -- ANYCase
      parse arg() key rest

      key = key.upper()

      if 'ANYCASE'.abbrev(key, 4) | key.wordpos('CASEANY IGNORECASE CASEIGNORE') > 0 then do
         anycase = 1
         args = rest
      end
      else do
         args = arg()
         anycase = 0
      end
                                            -- snumber
      parse args key rest

      snum = ''
      if key.datatype('W') then do
         snum = key
         args = rest
         parse args key rest
      end
      else snum = 0
                                            -- BEFORE | AFTER
      after = 0
      if key = 'AFTER' then after = 1
      if key = 'BEFORE' | after then do
         args = rest
         parse args key rest
      end
                                            -- NOT
      notk = 0
      if key = 'NOT' then do
         notk = 1
         args = rest
         parse args key rest
      end
                                             -- target
      key = key.upper
      anyof = 0
      str = 0
      if 'ANYOF'.abbrev(key, 3) > 0 then anyof = 1
      else if 'STRING'.abbrev(key, 3) > 0 then str = 1

      if anyof | str then target = DString(rest).String
      else do
         target = GetXRange(args.word(1))
         anyof = 1
      -- catch StageError
      --    Emsg(8,'Error - Bad range')
      end
                                             -- adjustments
      if anycase then target = target.upper

      if anyof then tlen = 1
      else tlen = target.length

      if after then snum = - tlen - snum
   end

   sec_out = boolean 0              -- set flag if output 1 is connected AT START
   do
      selectOutput(1)
      sec_out = 1
   catch StageError
   end

   do                          -- back to output 0
      selectOutput(0)
   catch StageError
   end

   outl = Rexx ''

   select
   when number \= '' then                 -- number
      loop forever
         line = Rexx peekto()
         if mnumber then do
            lnumber = line.length() + number
            if lnumber < 1 then do
               outl = ''
               rest = line
            end
            else parse line outl +(lnumber) rest
         end
         else
            parse line outl +(number) rest
         output(outl)
         if sec_out then do
            selectOutput(1)
            output(rest)
            selectOutput(0)
         catch StageError
         end

         readto()
      catch StageError
      end
   when str & anycase then                 -- string  anycase
      loop forever
         line = Rexx peekto()
         pp = line.upper.pos(target)
         p = pp  - snum
         select
            when pp < 1 then do
               outl = line
               rest = ''
            end
            when p < 1 then do
               outl = ''
               rest = line
            end
            when p = 1 then do
               outl = line.left(1)
               rest = line.substr(2)
            end
            otherwise parse line outl =(p) rest
         end
         if notk then do
            t = outl
            outl = rest
            rest = t
         end
         output(outl)
         if sec_out then do
            selectOutput(1)
            output(rest)
            selectOutput(0)
         catch StageError
         end

         readto()
      catch StageError
      end
   when str then                 -- string
      loop forever
         line = Rexx peekto()
         pp = line.pos(target)
         p = pp  - snum
         select
            when pp < 1 then do
               outl = line
               rest = ''
            end
            when p < 1 then do
               outl = ''
               rest = line
            end
            when p = 1 then do
               outl = line.left(1)
               rest = line.substr(2)
            end
            otherwise parse line outl =(p) rest
         end
         if notk then do
            t = outl
            outl = rest
            rest = t
         end
         output(outl)
         if sec_out then do
            selectOutput(1)
            output(rest)
            selectOutput(0)
         catch StageError
         end

         readto()
      catch StageError
      end
   when anyof then                                  -- anyof
      loop forever
         line = Rexx peekto()
         if notk then do                            -- not
            pp = line.verify(target,'N')
            if pp = 0 then pp = line.length() + 1
            p = pp - snum
            select
               when p < 1 then do
                  outl = ''
                  rest = line
               end
               when p = 1 then do
                  outl = ''
                  rest = line
               end
               otherwise parse line outl =(p) rest
            end
         end
         else do                  -- not not
            pp = line.verify(target,'M')
            p = pp  - snum
            select
               when pp < 1 then do
                  outl = line
                  rest = ''
               end
               when p < 1 then do
                  outl = ''
                  rest = line
               end
               when p = 1 then do
                  outl = ''
                  rest = line
               end
               otherwise parse line outl =(p) rest
            end
         end
         output(outl)
         if sec_out then do
            selectOutput(1)
            output(rest)
            selectOutput(0)
         catch StageError
         end

         readto()
      catch StageError
      end
   otherwise nop
   end
   rc = mrc()

exit(rc*(rc<>12))

Method givehelp() static
return -
"/** chop -- Truncate the Record\n" -
"\n" -
"                  +--80----------------+\n" -
">>--+--CHOP----+--+--------------------+--><-\n" -
"    +-TRUNCate-+  +-snumber------------|\n" -
"                  +--| stringtarget |--+\n" -
"stringtarget:\n" -
" |--+-----------+--+---------------------------+-+-----+--| target |--|\n" -
"    +--ANYCase--+  |               +-BEFORE-+  | +-NOT-+\n" -
"                   +--+---------+--+--------+--+\n" -
"                      +-snumber-+  +-AFTER--+\n" -
"target:\n" -
" |--+--xrange-----------------------+--|\n" -
"    +--+-STRing--+--delimitedString-+\n" -
"       +--ANYof--+\n" -
"*/\n"
