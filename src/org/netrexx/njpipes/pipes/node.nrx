/*
 *  Copyright (C) 1997-2011 Ed Tomlinson
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

package org.netrexx.njpipes.pipes

options binary

-- nodes define connections on specific streams between stages

class node extends Object private

properties volatile

data    = Object         -- values passes between stages
holding = boolean        -- set when there is data to read/peek
peeked  = boolean        -- for reportEOF(ANY) logic

outs = stage             -- stage reading values
outl = link              -- stacked connections
sout = int

ins  = stage             -- stage suppling values
inl  = link              -- stacked connections
sin  = int

nout  = node             -- linked list for output stage
nin   = node             -- linked list for input stage


-- Setup the node with no connections defined

method node()

   data    = null
   holding = 0
   peeked  = 0

   ins  = null
   inl  = null
   sin  = -1

   outs = null
   outl = null
   sout = -1

   nout = null
   nin  = null


-- save a node's connection info

method pushIn()

   l = link((link inl),ins,sin,1)
   inl = l


-- restore a node's connection info

method popIn()

   if inl<>null then do

      sin = inl.stream()
      ins = (stage inl.stage())
      inl = (link inl.list())

   end


-- save a node's connection info

method pushOut()

   l = link(outl,outs,sout,0)
   outl = l


-- restore a node's connection info

method popOut()

   if outl<>null then do

      sout = outl.stream()
      outs = (stage outl.stage())
      outl = (link  outl.list())

   end


