package org.netrexx.njpipes.pipes
import org.netrexx.address.
/*
 *  Copyright (C) 2019 R.V. Jansen
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */
--trace results
-- the purpose of this class is to give the user an experience as close to VM
-- Pipelines as possible, by enabling the process of specifying and running a
-- pipe spec from the commandline.

-- 2019-07-30 first version. rvj
-- 2019-08-02 enable running with specified pipe names. rvj
class runner

  -- check arguments
  -- compile the pipeline
  -- run the pipeline
  -- delete the generated class
  
  method main(args=String[]) static
    do
      arg=Rexx
      arg=args[0] -- java stringarray to rexx variable
      if arg='' then signal ArrayIndexOutOfBoundsException
    catch ArrayIndexOutOfBoundsException
    -- check for an empty specification, if so, then exit
      say 'pipe: specify a pipeline to be executed.'
      exit
    end -- do
    parse arg '(' className_ ')'
    -- prepend a classname when absent and compile it
    if className_<>'' then do
      className_ = className_.word(1)
      pipesrc = arg
    end
    else do
      uid = Rexx(UUID.randomUUID().toString())
      className_ = 'p'Rexx(uid.left(7))
      pipesrc =  '('className_')' arg
    end

    do
      p = compiler(pipesrc,Rexx('true'))
    catch ex=org.netrexx.njpipes.pipes.ThreadQ
      return
    end

    --shellRun(className_)
    javaRun(className_)
    deleteClassFile(className_)

  method javaRun(className_) static
    do
      c = Class.forName(className_.toString())
      o = Object c.newInstance()
      paramTypes = Class[1]
      paramTypes[0] = String[].class
      methodName = String "main"
      m = c.getMethod(methodName, paramTypes)
      params = Object[1]
      params[0] = String[0]
      rc = m.invoke(o, params)
    catch e=Exception
      say 'Reflection exception encountered:'
      say e.getMessage()
    end
    
  method shellRun(className_) static
    -- execute the generated class
      command    = ArrayList()
      command.add('java')
      command.add(className_.toString())
      os = OSProcess()
      a  = os.outtrap(command)
      i  = a.iterator()
      loop while i.hasNext()
	say Rexx i.next()
      end -- loop while i
      
  method deleteClassFile(className_) static
    -- delete the class file
    f = File(className_.toString()'.class')
    f.delete()
    exit 
