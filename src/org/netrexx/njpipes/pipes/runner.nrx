package org.netrexx.njpipes.pipes
/*
 *  Copyright (C) 2019 R.V. Jansen
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 *
 */

-- the purpose of this class is to give the user an experience as close to VM
-- Pipelines as possible, by enabling the process of specifying and running a
-- pipe spec from the commandline.

-- 2023-01-04 accept input from stdin if no args given --MRE
-- 2021-01-22 accept input from a file (with -f)
-- 2019-09-19 move the reflective call into NetRexxC
-- 2019-08-04 run with reflective invocation. rvj
-- 2019-08-02 enable running with specified pipe names. rvj
-- 2019-07-30 first version. rvj

class runner

  -- accept arguments as a single string or multiple arguments
  method main(args=String[]) static signals FileNotFoundException, IOException

    do 
      if args.length = 0 then do 
        execFromFile(null)                 -- MRE read from stdin if no args
        return
      end  
      arg    = Rexx
      arg    = args[0] -- java stringarray to rexx variable
      if arg.word(1) = '-h' then do
        say 'specify a pipeline as argument(s), with -f filename or through stdin'
        return
      end  
      if arg = '' then do
        execFromFile(null)                 -- MRE read from stdin if no args
        return
      end
      if arg.word(1) = '-f' then do
        if arg.word(2) \= '' then do
          execFromFile(arg.word(2))
   	      return
        end
        if args.length \= 2 then do 
          say 'missing filename'
          return
        end  
	      execFromFile(args[1])
	      return
	    end
    end -- do
    
    loop i=1 to args.length - 1
      arg=arg' 'args[i]
    end
    s = normaliseArgument(arg)
    parse s className_ pipesrc

    executePipe(pipesrc,className_)


-- read pipe source from file (-f)
-- or read from stdin (no argument)
  method execFromFile(filename) static signals FileNotFoundException,IOException

    if filename = null then do                              -- MRE We read from stdin
      inFile = BufferedReader(InputStreamReader(System.in))
    end  
    else do                                                 -- or filename
      inFile  = BufferedReader(FileReader(filename))
    end  
    arg = ''
    loop forever
      textline = inFile.readLine()
      if textline = null then leave
      arg = arg''textline
    end
    inFile.close()

    s = normaliseArgument(arg)
    parse s className_ pipesrc

    executePipe(pipesrc,className_)
  
    
  method executePipe(pipesrc,className_) static
    do
      compiler(pipesrc,boolean 1,className_,boolean 1)
    catch org.netrexx.njpipes.pipes.ThreadQ
      return
    end
    
-- make sure classname is present and valid
  method normaliseArgument(arg=Rexx) static returns Rexx

    parse arg '(' className_ ')'
    -- prepend a classname when absent and compile it
    if className_<>'' then
      do
	    rclassName_ = className_.word(1)
      -- MRE do not allow sep debug end stall as classname
      if 'sep debug end stall '.wordpos(rclassName_' ') == 0 then do
        className_ = rclassName_
        pipesrc = arg
      end
      else do  
        -- MRE use auto generated classname if any option given without classname
        uid = Rexx(UUID.randomUUID().toString())
        parse arg '(' rest 
        className_ = 'p'Rexx(uid.left(7))
        pipesrc =  '('className_  rest 
      end
    end
    else do
      uid = Rexx(UUID.randomUUID().toString())
      className_ = 'p'Rexx(uid.left(7))
      pipesrc =  '('className_')' arg
    end
    return className_' 'pipesrc
