/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence)                                */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 2000.        All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NetRexxA                                                           */
/*                                                                    */
/*  NetRexx API external interface.                                   */
/*                                                                    */
/* Parse and run one or more NetRexx programs.                        */
/*                                                                    */
/* See external documentation.                                        */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 2000.04.19 Initial [from NetRexxC]                                 */
/* 2011.08.19 add new apis for interpret,eval (Kermit Kiser)          */
/* 2012.09.21 add new method "exiting" to check if interpreter has    */
/* been shutdown by an Exit statement - issue #89 -KK- (Kermit Kiser) */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary decimal strictcase strictargs

/**  NetRexx API external interface.                                   */
class NetRexxA
  
  properties private
  translator=RxTranslator         -- It.
  started=boolean 0               -- 1 if exec state begun
  savedprogram=String ""	  -- save fast program interpret
  
  /** Constructor: build a translator object */
  
  method NetRexxA public
    
    translator=RxTranslator()        -- construct translator
    langs=[Rexx 'Nr']                -- languages supported
    translator.setlanguages(langs)   -- should always work
    
  /** exiting: return the translator exit flag to allow checking for execution of the "Exit" statement  */ -- issue #89 -KK- 
  method exiting public returns boolean	
    return translator.exiting		
    
  /** parse -- parse a set of files, under specified flags
     Arg1 is list of files,
     Arg2 is list of flags,
     Arg3 is a PrintWriter for parse output messages (optional),
     Arg4 is a PrintStream for console output messages (optional),
     returns 1 if no error
   */
  method parse(filestrings=String[], flagstrings=String[], logfile=PrintWriter null, outfile=PrintStream System.out) returns boolean
    return parse(filestrings, String[0], flagstrings, logfile, outfile)
    
    /*  original parse method code:
       
       if started then do
       started=0
       translator.endexec()
       end
       
       outfile=System.out
       logfile=PrintWriter null
       exec=boolean 1
    -- copy the arrays
       flags=Rexx[flagstrings.length+1]
       loop i=0 for flagstrings.length
       flags[i]=Rexx(flagstrings[i])
       end i
       flags[flags.length-1]='nojava'   -- force
       
       files=Rexx[filestrings.length]
       loop i=0 for filestrings.length
       files[i]=Rexx(filestrings[i])
       end i
       return translator.translate(flags, files, outfile, logfile, \exec)
     */
    
  /** parse -- parse a set of files, under specified flags,
     Arg1 is list of program names,
     Arg2 is list of program strings, 
     Arg3 is list of flags,
     Arg4 is a PrintWriter for parse output messages (optional),
     Arg5 is a PrintStream for console output messages (optional),
     returns 1 if no error
   */
  method parse(filestrings=String[], programstrings=String[], flagstrings=String[], logfile=PrintWriter null, outfile=PrintStream System.out) returns boolean
    
    if started then do
      started=0
      translator.endexec()
    end
    
    --  outfile=System.out
    --  logfile=PrintWriter null
    exec=boolean 1
    -- copy the arrays
    flags=Rexx[flagstrings.length+1]
    loop i=0 for flagstrings.length
      flags[i]=Rexx(flagstrings[i])
    end i
    flags[flags.length-1]='nojava'   -- force
    
    filesources=RxFileReader[filestrings.length]
    loop i=0 for filestrings.length
      tf=RxFileReader(translator)
      if i>=programstrings.length then tf.openfile(Rexx(filestrings[i]))
      else tf.openfile(Rexx(filestrings[i]),programstrings[i])
      filesources[i]=tf  	  
    end i
    return translator.translate(flags, filesources, outfile, logfile, \exec)
    
  /** interpret -- a convenience method to interpret a single NetRexx program in a string,
     Arg1 is the program name,
     Arg2 is the program string,09-09
     Arg3 is the argument string  (optional),
     Arg4 is the translator flags string  (optional),
     Arg5 is a PrintWriter for parse output messages (optional),
     Arg6 is a PrintStream for console output messages (optional),
     returns 1 if no parse error, default flag is -verbose0
   */
  method interpret(programname=String, programstring=String, argstring=String "", flagstring=String "", logfile=PrintWriter null, outfile=PrintStream System.out) returns boolean
    
    if savedprogram\=programstring then do
      savedprogram=programstring
      rexxflags=Rexx(flagstring)
      flagstrings=String[rexxflags.words()+1]
      flagstrings[0]="-verbose0"
      loop i=1 for rexxflags.words()
 	flagstrings[i]=rexxflags.word(i).toString()
      end
      ok=this.parse([programname],[programstring],flagstrings, logfile, outfile)
    end
    else ok=1
    
    if ok=1 then do
      argarray=[String argstring]            -- arguments for -exec [iff not null]
      translator.exec(argarray)                 -- .. so interpret
    end
    
    return ok
    
  /** eval -- a convenience method to interpret a method from a NetRexx program in a string and return an object,
     Arg1 is the program name,
     Arg2 is the program string,
     Arg3 is the method name to call, method must accept String array like main methods, 
     Arg4 is the argument string  (optional),
     Arg5 is the translator flags string  (optional),
     Arg6 is a PrintWriter for parse output messages (optional),
     Arg7 is a PrintStream for console output messages (optional),
     returns an object if no error, default flag is -verbose0
   */
  method eval(programname=String, programstring=String, methodname=String, argstring=String "", flagstring=String "", logfile=PrintWriter null, outfile=PrintStream System.out) returns Object  SIGNALS NoSuchMethodException,IllegalAccessException,InvocationTargetException
    
    if savedprogram\=programstring then do
      savedprogram=programstring
      rexxflags=Rexx(flagstring)
      flagstrings=String[rexxflags.words()+1]
      flagstrings[0]="-verbose0"
      loop i=1 for rexxflags.words()
 	flagstrings[i]=rexxflags.word(i).toString()
      end
      ok=this.parse([programname],[programstring],flagstrings, logfile, outfile)
    end
    else ok=1
    
    if ok=1 then do
      argarray=[String argstring]            -- arguments for -exec [iff not null]
      evalClass=getClassObject(null,programname)
      classes=[getClassObject('java.lang', 'String', 1)]
      evalMethod=evalClass.getMethod(methodname, classes)
      passarg=[Object argarray]
      return Object evalMethod.invoke(null, passarg)
    end
    
    return Object Boolean(ok)
    
  /** getClassObject -- in interpretation context
     Arg1 is the package (null if 'generic), dotted
     Arg2 is the class name (dotted for minor classes)
     Arg3 is the dimension required for an array (default 0)
     returns the class object or nul if not found
   */
  method getClassObject(pack=String, name=String, dim=int 0) returns Class
    if \started then do
      translator.startexec()
      started=1
    end
    
    if pack=null then rpack=Rexx null
    else rpack=Rexx(pack)
    rname=Rexx(name)
    type=RxType(rpack, rname, dim)
    
    return type.getClassObject(translator.loader)

