/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
options binary
package org.netrexx.process
import java.net.
/**
 * NetRexx Compiler Server, server part. This creates a server socket and
 * waits for the name of a file to compile. When this arrives, it is compiled
 * and the output is returned over the socket. The class file is written to
 * the directory the server was started from.<br>
 * The port number is variable and can be specified on the commandline. It
 * defaults to 2001.
 * Integrated into NetRexx compiler in 2008 
 */

class NetRexxS
  properties indirect
  srv	    = ServerSocket
  sock	    = Socket
  compiler  = org.netrexx.process.NetRexxC
  rd	    = BufferedReader
  wr	    = PrintWriter
  startTime = long
  /** the total amount of time spend on compilation, in milliseconds */
  lapsed    = long
  /** the total number of files processed */
  filecount = int
  
  method NetRexxS()
    createSocket(2001)
    startTime = System.currentTimeMillis()
    lapsed    = 0
    fileCount = 0
    loop forever
      processFile()
    end -- loop
    
  method NetRexxS(port_)
    createSocket(port_)
    startTime = System.currentTimeMillis()
    lapsed    = 0
    fileCount = 0
    loop forever
      processFile()
    end -- loop
    
    /**
     * method createSocket creates a Serversocket on the local host, for
     * the specified port. 
     */
  method createSocket(port)
    do
      this.srv = ServerSocket(port)
      say "NetRexx -resident. Started and running on port" port"."
      say "When option -sourcedir is not used, .class files will be written to:"
      say System.getProperty('user.dir')
    catch ex=IOException
      say ex.getMessage
    end -- do
    return
    
  method processFile() signals IOException
    do
      this.sock	= this.srv.accept()
      this.rd	= BufferedReader(InputStreamReader(this.sock.getInputstream()))
      this.wr	= PrintWriter(OutputStreamWriter(this.sock.getOutputStream()))	
      line	= Rexx rd.readLine()
      if line = null then
	do
	  -- needed, cause things like a port scan will otherwise
	  -- trigger this method to start processing. It has nothing
	  -- to process, so it will fail.
	  say "NetRexx: There was no input, so no file is processed."
	  return
	end -- if do
      
      items	= line.words()
      strAr	= String[items+1]
      loop i=0 to items-1
	strAr[i] = String(line.word(i+1))
	if strAr[i] = "-shutdown" then exit
      end -- loop
      do
	fileCount    = fileCount + line.countStr(".nrx") 
	strAr[items] = "-noconsole"
	retCode = this.compiler.main2(strAr, this.wr)
	wr.write("@#!retcode" retCode )	  
	wr.flush() 
	wr.close()
      catch NullPointerException
      end -- do
    end
    return

  method main(args=String[]) static
    say "NetRexxS 3.0"
    select 
      when args.length = 0  then  NetRexxS()
      when args.length = 1  & (Rexx args[0]).datatype('N') then NetRexxS(args[0])
      otherwise
	do
	  say "Use: java org.netrexx.process.NetRexxS [port]. \n If port is left blank, port 2001 is used."
	end
    end

