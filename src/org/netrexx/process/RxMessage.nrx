/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1996, 1998.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxMessage                                                          */
/*                                                                    */
/*   Display an error/warning message.                                */
/*   When an RxMessage is constructed, a message is displayed.        */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.06.18 Initial (from old signal RxQuit)                        */
/* 1996.10.30 Additions to handle expanded messages from file         */
/* 1997.02.08 Localize the properties file input stream               */
/* 1997.04.23 Defer (queue) messages until pass2                      */
/* 1997.06.29 Use ResourceBundle for messages, from RxTranslator      */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

class RxMessage

 properties public constant
  INFO   =int 0               -- informational
  WARN   =int 1               -- warning
  ERROR  =int 2               -- error (compilation will fail)
  SEVERE =int 3               -- cannot procede

 properties private constant
  eyecatch='+'.copies(3)      -- [avoid three plusses in a row]

 properties private
  config=RxMessageOutput
  /* The messages file (NetRexxC.properties) */
  messagebundle   =ResourceBundle  -- null if could not be found
  badmessages     =boolean 0       -- 1 if could not find bundle

 /* RxMessage -- construct and display an error message [etc.]
    Arg1 is program context
    Arg2 is level (see constants)
    Arg3 is token context (null if unknown)
    Arg4 is message identifier (name)
    Arg5 - Arg8 are optional inserts
    */
 method RxMessage(_out=RxMessageOutput, level=int, tok=RxToken, id=String,-
                  i1=Rexx "", i2=Rexx "", i3=Rexx "", i4=Rexx "")
  /* trace off */
  out=_out
  head        =String[4]
  head[INFO]  ='Information'
  head[WARN]  = NrAnsi.ANSI_BLUE'Warning'NrAnsi.ANSI_RESET
  head[ERROR] = NrAnsi.ANSI_RED'Error'NrAnsi.ANSI_RESET
  head[SEVERE]='Severe Error'

  /* Build the message */
  message=makemessage(id, i1, i2, i3, i4)
  if message=='' then do
    if i1\=='' then i1='['i1']'
    if i2\=='' then i2='['i2']'
    if i3\=='' then i3='['i3']'
    if i4\=='' then i4='['i4']'
    message=id '(sorry, full message unavailable)' (i1 i2 i3 i4).space()
    end

  /* Now display or queue either compact or full message */
  if out.isCompactOutput() then do
    filespec=out.getSourceFileSpec()
    if tok=null then errspec='0 0 0'         -- always three numbers
     else errspec=tok.line tok.pos tok.len   -- ..
    out.say('['filespec errspec']' head[level]':' message)
    end

   else /* not compact */ do
    if out.getSourceLineCount()=0 then numwidth=0
     else numwidth=String.valueOf(out.getSourceLineCount()).length()+1
    pad=' '.copies(numwidth)
    if tok\=null then if tok.line>0 then do label haveline
      line=out.getSourceLine(tok.line)
      /* edit control characters */
      loop i=0 to line.length-1
        if line[i]<' ' then do
          if line[i]='\t' then line[i]=' '   -- so '^' will line up
                          else line[i]='?'
          end
        end i
      out.say(Rexx(tok.line).right(numwidth) eyecatch line)
      start=tok.pos
      if start>0 & start<=line.length+1 then do
        if tok.len<1 then len=1; else len=tok.len
        out.say(pad eyecatch||Rexx(' ').copies(start)Rexx('^').copies(len))
        end
      end haveline
    out.say(pad eyecatch head[level]':' message)
    end


  /** makemessage -- build a message, given ID and inserts.
     Arg1 is message identifier (name)
     Arg2 - Arg5 are optional inserts
     Returns a null string if message or message file not found.
     This is an easier interface to use than the Java 1.1 MessageFormat
   */
  method makemessage(id=String, i1=Rexx null, i2=Rexx null,-
                     i3=Rexx null, i4=Rexx null) returns Rexx

    if badmessages then
      return ''              -- hopeless
              -- see if first call
    if messagebundle=null then do
      -- Find the NetRexxC.properties bundle.  [425ms on P-133]
      messagebundle=ResourceBundle.getBundle('org.netrexx.process.NetRexxC')
    catch MissingResourceException
      badmessages=1                           -- save time for next message
      return ''                               -- to avoid nullpointer
    end
    -- lookup the message [this is nice and fast]
    do
      message=Rexx messagebundle.getString(id)      -- look up the message
    catch MissingResourceException
      return ''                                     -- didn't find it
    end

    /* Apply any substitutions */
    if message.pos('%').toint()>0 then do             -- have substitutions perhaps
      if i1\=null then message=message.changestr('%1', NrAnsi.ANSI_YELLOW||i1||NrAnsi.ANSI_RESET)
      if i2\=null then message=message.changestr('%2', i2)
      if i3\=null then message=message.changestr('%3', i3)
      if i4\=null then message=message.changestr('%4', i4)
    end
    return message.strip()

