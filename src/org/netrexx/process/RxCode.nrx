/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxCode                                                             */
/*                                                                    */
/*   An object that represents a sequence of code.                    */
/*                                                                    */
/*   Depending on the kind (group) of the code, this may correspond   */
/*   to program, class, or method-level data, for example Java        */
/*   sourcecode, bytecodes, constants, etc.                           */
/*                                                                    */
/*   [The following has never been implmented fully...                */
/*    RxCode objects form a doubly-linked list, to allow insertions.  */
/*    Each higher-level node (program, class, or method) ends up with */
/*    a linear list of RxCode objects that, when followed, will       */
/*    produce the output stream.                                      */
/*   ]                                                                */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1997.08.04 Initial                                                 */
/* 1999.09.12 Add Value                                               */
/* 2000.02.21 Formalize 'fake' code, which holds an object instance   */
/* 2000.02.23 Add slots for penultimate valuea and type, etc.         */
/* 2000.02.29 Remove 'fake' code; now represented by RxInstance       */
/* 2000.03.31 [RxInstance replaced by real proxy]                     */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

/** This object represents the nature of the code, along with the
   corresponding Java or byte codes, as required.  Other languages or
   output forms could be added later (perhaps for Interpret).

   Code objects are 'typed' by their GROUP char, as follows.

   Code streams (no branches):

     S_LIT     - code is simply a literal (string or number), which
                 potentially could be re-typed later

     S_TYPE    - code is a typedef (plain class, or dimensioned class),
                 where the class has been checked for existence.  This
                 can only be returned for a term if ONRHS set. e.g.,
                 fred, fred, fred[], fred[,,] (where 'fred' can also be
                 a qualified class name, such as 'fred.foo.bar').

     S_CONSTR  - code is a constructor (object or primitive), where the
                 class has been checked for existence.  e.g., fred(),
                 fred(x), fred(x,y), (where 'fred' can also be a
                 qualified class name, such as 'fred.foo.bar').  Note
                 that '()' is possible.

     S_METHOD  - the last component of the term was a method call.

     S_VAR     - code is a variable term; a known simple "variable"
                 (class-scope or local variable) in the current context.
                 e.g., foo or foo[3] where foo is declared and valid.
                 These are always allowed on RHS, and often on LHS. The
                 name of the variable is given as spelled on first use.
                 If this is set, then 'variable' refers to the
                 RxVariable object for the variable.

     S_PROP    - the last component of the code is a non-final property
                 reference in a different class (including foo[0],
                 etc.).  FIELD may be set if interesting.

     S_FINAL   - the last component of the code is a final property
                 reference in a different class (including foo[0],
                 etc.).  This cannot be assigned to.  cf. S_PROP

     S_EXPR    - the code is a (sub-)expression, array constructor
                 (fred[x], fred[x,y]), array initializer, or is derived
                 from a special word.  These groups can never be
                 assigned to (i.e., not an lvalue).

     S_CCONST  - the code is a reference to a class-level constant

   Transient code: this form of code is transient, and would either be
   resolved or cause an error before final code generation.

     T_UNKNOWN - code represents an unknown simple symbol (no
                 connectors, '[' or '(') which therefore has the syntax
                 of a class-scope or local variable, but is not (yet)
                 known to be one.

                 Note that in this case, Javacode is (and can only be) a
                 potential variable name, as written.  This fact is used
                 in RxParser.

   -------------
   Code may have a value (for compile-time constants, at least).  The
   value may be any kind of object, with primitives packaged thus:

     boolean   Integer
     byte      Integer
     short     Integer
     int       Integer
     long      Long
     float     Double
     double    Double
     char      Rexx

   Arrays hold themselves .. e.g., char[] is a char[] object

   The true type of the value is determined from the type field.

   */

class RxCode implements Cloneable

 properties public constant
   S_LIT     =char 'L'        -- Stream - literal
   S_TYPE    =char 'T'        -- Stream - type
   S_CONSTR  =char 'C'        -- Stream - constructor
   S_METHOD  =char 'M'        -- Stream - method
   S_VAR     =char 'V'        -- Stream - variable in current context
   S_PROP    =char 'P'        -- Stream - non-final property
   S_FINAL   =char 'F'        -- Stream - final property
   S_EXPR    =char 'G'        -- Stream - general expression
   S_CCONST  =char '0'        -- Stream - class constant
   T_UNKNOWN =char 'U'        -- Transient - Unknown

 properties shared
  /* the first set of properties may apply to all kinds of code */

  -- descriptive information
  group      =char            -- the group of the code (see above)
  type       =RxType          -- the type of the code [may be null]
  exceptions =Rexx            -- checked exceptions raised in the code
                              -- [later make an array?]
  constant   =boolean 0       -- code value known at compile time
  wrapped    =boolean 0       -- javacode has been wrapped/is indivisible
  isstem     =boolean 0       -- refers to a stem variable (indexed string)
  value      =Object          -- value [if known]

  pentype    =RxType          -- penultimate type in compound term [if known]
  penvalue   =Object          -- penultimate value in compound term [if known]
  field      =RxField         -- field object for the code [if any and known]
  array      =RxArray         -- array indices for the code.  This will
                              -- only be present if the code is an LHS
                              -- term which ends with an array reference;
                              -- the value [if any] will be the array or Rexx

  -- positional information      [may be null]
  begclause  =RxClause        -- clause corresponding to start of code
  begoff     =int             -- offset of token for start of code
  endclause  =RxClause        -- clause corresponding to end of code
  endoff     =int             -- offset of last token in code

  /* Java code sequence */
  javacode=Rexx               -- plain Java [if known]

  /* Bytecodes sequence [currently unused] */
--bytecode=byte[]             -- bytecodes; may be part unused
--bclength=int 0              -- bytes of bytecode in use
--bcdepth =int 0              -- maximum stack depth used

 properties private
  next=RxCode                 -- list linkage
  prev=RxCode                 -- ..

 /* Minimal constructor */
 method RxCode
  nop

 /** Shared-parts constructor
    Arg1 is the group code
    Arg2 is the type of the code
    Arg3 is the exceptions list
    */
 method RxCode(newgroup=char, newtype=RxType, newexcep=Rexx)
  group=newgroup
  type=newtype
  exceptions=newexcep

 /** copy - return a clone.
    We can't call it 'clone', as Object would then insist on it
    returning an Object */
 method copy returns RxCode
  do
    return RxCode this.clone()
  catch CloneNotSupportedException
    return null               -- Java weakness...
  end

 /** prepend -- insert the given object before us
    Arg1 is the RxCode object to insert before
    */
 method prepend(it=RxCode)
  prev=it
  next=it.next                -- [may be null]
  it.next=this

 /** append -- insert the given object after us
    Arg1 is the RxCode object to insert after
    */
 method append(it=RxCode)
  next=it
  prev=it.prev                -- [may be null]
  it.prev=this

 /** getNext -- return the object following this one */
 method getNext returns RxCode
  return next

 /** isOne -- tests for a value of 1
    returns 1 if the value is 1, 0 otherwise
    */
 method isOne returns boolean
  if value=null then signal NullPointerException
  if value<=Integer then do
    if (Integer value).intValue()=1 then return 1
    return 0
    end
  if value.toString()=='1' then return 1
  return 0

 /** toString -- show value as a string
    This shows the value 'as-is', for debugging.
    For true (rounded/decapitated) value without decoration, use
    RxInterpreter.stringValue().
    */
 method toString returns String
  if value=null then return 'RxCode:null'
  return 'RxCode:'value.toString()

 /** dump -- test display */
 method dump
  if group='\0' then og=char '?'
                else og=group
  if javacode=null then jc='?'
                   else jc=javacode
  if type=null then sig=''
               else sig='['type.toSig()']'
  say '# \xBB' og jc sig
