/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxClause                                                           */
/*                                                                    */
/*   An object that represents a tokenized clause.                    */
/*                                                                    */
/*   The array of tokens may be larger than the number of tokens;     */
/*   the final token (which is always present if the array is         */
/*   present) has type ';'.                                           */
/*                                                                    */
/*   Clauses are chained within methods and at the start of a         */
/*   class (the prologue), iff exec is in effect.                     */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.05.15 Initial                                                 */
/* 1997.07.12 Add RxClauseParser slot (lookaside)                     */
/* 2000.02.25 Add toString [mostly for debug tracing]                 */
/* 2000.03.03 Add tracelines (returns String[] suitable for tracing)  */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

class RxClause
  properties public
  lookaside =RxClauseParser null   -- object representing the clause
  tokens    =RxToken[]             -- array of tokens
  clausenum =int                   -- number of this clause [origin 1]
  next      =RxClause              -- -> next in chain [null at end]
  last      =RxClause              -- -> last in chain [null at top]
  
  -- alerts used to speed up interpretation
  skipend   =boolean               -- 1 if skip to END needed [CATCH/FINALLY]
  startprot =boolean               -- 1 if clause starts a protected block
  
  /* Construct an empty clause.  Tokens, etc., are added later.  */
  method RxClause()
    
    /* SHOWTOKENS -- returns string from Tokens array (unless empty),
       This is for debugging -- there could be a cleaner toString(),
       later. */
  method showtokens returns String
    if tokens=null then return '; [null]'
    v=String ''; types=String ''
    loop i=0 to tokens.length-1
      tok=tokens[i]
      if tok=null then do; v=v'; [missing]'; leave i; end
	types=types||tok.type
	if tok.value\==null then do
	  if tok.type=RxToken.STR then v=v'"'tok.value'"'
	  else if tok.type=RxToken.OP then v=v'<'tok.value'>'
	  else if tok.type=RxToken.END then do
            v=v';'
            if tok.value[0]<'\x10' then v=v 'x0'char(48+int(tok.value[0]))
          end
	  else v=v'{'tok.value'}'
	end
      else do
	if tok.type=RxToken.SP then v=v' '
        else v=v||tok.type
      end
      if tok.type=RxToken.END then leave i
    end i
    return types v
    
    /* TRACELINES -- get source string array for tracing
       Arg1 is the root, for finding source lines
       returns array of at least one String corresponding to the lines
       contributing to this clause.  Tokens from other clauses will not
       appear in the data (so may be 'blanked out' in the first line).
       2000.03.03: moved and enhanced from RxTracer
     */
  method tracelines(rxt=RxTranslator) returns String[]
    firstline=tokens[0].line         -- note first line number
    firstpos =tokens[0].pos          -- note initial indent
    lines=Vector(10)                 -- collects lines [String]
				     -- 1998.05.16 revised to spin to final token first [VS20 SFO->LHR]
    loop n=0 by 1                    -- each token
      tok=tokens[n]
      if tok.type=RxToken.END then leave
    end n
    endline=tok.line                 -- remember apparent end of clause
    endchar=tok.pos
    
    -- End of clause is well-defined for explicit ';', others need work
    if tok.value[0]\=RxToken.EOC then do
      -- True end is determined by first token of next clause.
      -- The .pos on the .END token is set for good error messages,
      -- not tracing.
      -- We use endchar=0 to signify 'all line'
      nextclause=rxt.program.clauser.clause(clausenum+1)
      select
	when nextclause=null then do           -- EOS .. include trailing lines
          endline=rxt.program.source.getLineCount()
          endchar=0
        end
	when tok.value[0]=RxToken.EOL then do
          -- final line precedes first token of next clause
          endline=nextclause.tokens[0].line-1
          endchar=0
        end
	otherwise                              -- must be EOI (implied)
          endline=nextclause.tokens[0].line
          endchar=nextclause.tokens[0].pos-1
          if endchar=0 then endline=endline-1  -- bump back if pos=1
      end
    end
    
    -- Now we can collect the lines
    loop aline=firstline to endline            -- add any non-ending lines
      line=Rexx rxt.program.source.getLine(aline)
      -- adjust first and last lines [perhaps the same line]
      if aline=firstline then do
	-- blank out anything to left of first token of clause
	if firstpos>1 then line=' '.copies(firstpos-1)||line.substr(firstpos)
      end
      if aline=endline then do
	-- ignore anything from following clause
	-- [if endchar=0 then endchar=line.length]
	if endchar\=0 then line=line.left(endchar)
      end
      if line.OpNotEq(null, '') then           -- never trace empties
	lines.addElement(line.toString())
    end aline
    result=String[lines.size()]
    lines.copyInto(result)
    return result
    
    /* TOSTRING -- returns compact string reconstructed from tokens */
		-- assumes if tokens is there then it is valid
  method toString returns String
    if tokens=null then return '; [null]'
    v=String ''
    loop i=0 to tokens.length-1
      tok=tokens[i]
      if tok.value\==null then select
        when tok.type=RxToken.STR then v=v'"'tok.value'"'
        when tok.type=RxToken.END then do
          if tok.value[0]=RxToken.EOC then v=v';'
          leave i
        end
	otherwise v=v||tok.value
    end
    else do
      if tok.type=RxToken.SP then v=v' '
      else v=v||tok.type
    end
    end i
    return v

