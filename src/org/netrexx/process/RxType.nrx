/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxType                                                             */
/*                                                                    */
/*  A Type describes the class and dimensions of an item (object      */
/*  or primitive).                                                    */
/*                                                                    */
/*  Class names in signatures are always fully qualified and in the   */
/*  correct case.                                                     */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.01.04 Signatures defined in Rexx compiler                     */
/* 1996.05.07 Initial                                                 */
/* 1996.09.02 Add getsig                                              */
/* 1997.04.08 Provide a list->array converter [getsig now private]    */
/* 1998.03.25 Extend to allow dotted classnames potential [JavaOne]   */
/* 1998.04.26 Change from Signature to Type                           */
/* 2000.03.20 Change so that minor class Types are constructed OK     */
/* 2000.04.16 Lookaside for primitive test                            */
/* 2011.09.02 Add CharSequence signature - Kermit Kiser                     */
/* 2013.05.10 Add Java Map signature for issue 96 fix - Kermit Kiser                     */
/* ------------------------------------------------------------------ */

/* A signature (*sig in names below) in string form has syntax as
   follows:

   signature:=     classdef
                   classdef arraydef

   classdef:=      classname
                   packagename '.' classname

   classname:=     SIMPLESYMBOL
                   classname '.' SIMPLESYMBOL

   packagename:=   SIMPLESYMBOL
                   packagename '.' SIMPLESYMBOL

   arraydef:=      '[]'
                   '[' commas ']'

   commas:=        ','
                   commas ','

Signatures are always fully qualified (both package and class name are
present).

Examples:
   hello
   java.lang.String
   java.lang.String[]
   java.lang.String[,,]

Note that the boundary between the package name and the class name
(fullname) cannot be determined from the syntax alone if the name is in
'full dotted' form; semantically it is determined from the longest
package that succeeds.  To determine this split, access to the classer
object is required.

Therefore, when constructing an RxType object with a multi-part class
name the two-part name constructor must be used, or the class name part
must be 'dollared' (the minor class name parts should be separated by
'$' rather than '.').
*/


package org.netrexx.process
options binary nodecimal strictcase strictargs

class RxType
 properties constant shared
  /* Primitive and well-known classes & methods, and signatures of the same */
  OBJECT_CLASS	     = Rexx 'java.lang.Object'
  CLASS_CLASS	     = Rexx 'java.lang.Class'
  THROWABLE_CLASS    = Rexx 'java.lang.Throwable'
  STRING_CLASS	     = Rexx 'java.lang.String'
  CHARSEQUENCE_CLASS = Rexx 'java.lang.CharSequence'
  STRINGARRAY_CLASS  = Rexx 'java.lang.String[]'
  ENUM_CLASS	     = Rexx 'java.util.Enumeration'
  VECTOR_CLASS	     = Rexx 'java.util.Vector'
  MAP_CLASS	     = Rexx 'java.util.Map'
  BOOL_CLASS	     = Rexx 'boolean'
  CHAR_CLASS	     = Rexx 'char'
  BYTE_CLASS	     = Rexx 'byte'
  SHORT_CLASS	     = Rexx 'short'
  INT_CLASS	     = Rexx 'int'
  LONG_CLASS	     = Rexx 'long'
  FLOAT_CLASS	     = Rexx 'float'
  DOUBLE_CLASS	     = Rexx 'double'
  CHARARRAY_CLASS    = Rexx 'char[]'
  NULL_CLASS	     = Rexx 'null'
  VOID_CLASS	     = Rexx 'void'

  OBJECT_TYPE	     = RxType(OBJECT_CLASS,    0)
  CLASS_TYPE	     = RxType(CLASS_CLASS,     0)
  THROWABLE_TYPE     = RxType(THROWABLE_CLASS, 0)
  CHARSEQUENCE_TYPE  = RxType(CHARSEQUENCE_CLASS,    0)
  STRING_TYPE	     = RxType(STRING_CLASS,    0)
  STRINGARRAY_TYPE   = RxType(STRING_CLASS,    1)
  ENUM_TYPE	     = RxType(ENUM_CLASS,      0)
  VECTOR_TYPE	     = RxType(VECTOR_CLASS,    0)
  MAP_TYPE	     = RxType(MAP_CLASS,    0)
  BOOL_TYPE	     = RxType(BOOL_CLASS,      0)
  CHAR_TYPE	     = RxType(CHAR_CLASS,      0)
  BYTE_TYPE	     = RxType(BYTE_CLASS,      0)
  SHORT_TYPE	     = RxType(SHORT_CLASS,     0)
  INT_TYPE	     = RxType(INT_CLASS,       0)
  LONG_TYPE	     = RxType(LONG_CLASS,      0)
  FLOAT_TYPE	     = RxType(FLOAT_CLASS,     0)
  DOUBLE_TYPE	     = RxType(DOUBLE_CLASS,    0)
  CHARARRAY_TYPE     = RxType(CHAR_CLASS,      1)
  NULL_TYPE	     = RxType(NULL_CLASS,      0)
  VOID_TYPE	     = RxType(VOID_CLASS,      0)

  EMPTY_TYPES	     = RxType[0]  -- often useful

  PRIMITIVES	     = Rexx 'int long short char byte float double boolean'
  PRIMITIVE_SIGS     = Rexx 'I J S C B F D Z'    -- JVM signature letters
  BOOLEAN_LITS	     = Rexx '0 1 ''0'' ''1'' "0" "1"'

  -- Rexx types

  REXX_CLASS	     = Rexx 'netrexx.lang.Rexx'
  REXXSET_CLASS	     = Rexx 'netrexx.lang.RexxSet'
  REXXPARSE_CLASS    = Rexx 'netrexx.lang.RexxParse'
  REXXTRACE_CLASS    = Rexx 'netrexx.lang.RexxTrace'
  REXXUTIL_CLASS     = Rexx 'netrexx.lang.RexxUtil'
  REXXNOOTHER_CLASS  = Rexx 'netrexx.lang.NoOtherwiseException'
  REXXIO_CLASS	     = Rexx 'netrexx.lang.RexxIO'

  REXX_TYPE	     = RxType(REXX_CLASS,        0)
  REXXSET_TYPE	     = RxType(REXXSET_CLASS,     0)
  REXXPARSE_TYPE     = RxType(REXXPARSE_CLASS,   0)
  REXXTRACE_TYPE     = RxType(REXXTRACE_CLASS,   0)
  REXXUTIL_TYPE	     = RxType(REXXUTIL_CLASS,    0)
  REXXNOOTHER_TYPE   = RxType(REXXNOOTHER_CLASS, 0)
  REXXIO_TYPE	     = RxType(REXXIO_CLASS,      0)

 properties public
   classname=Rexx             -- fully qualified base name (no [], all dots)
   dimension=int 0            -- dimensions (e.g., [,] = 2)

 properties private
   packagename=Rexx           -- dotted, e.g., java.lang (may be null)
   classfilename=Rexx         -- dollared, e.g., Foo$Bar (never null)
   ourclass=Class             -- lookaside
   primitive=boolean          -- 1 if primitive, only valid if hadprimitive
   hadprimitive=boolean       -- primitive has been tested

 /* This constructor starts with classname and array dimensions (>=1)
    The class name may have a package prefix; if a minor class then the
    class name part must be dollared (not dots).
    */
 method RxType(newname=Rexx, dims=int)
  dimension=dims
  split(newname)

 /* This constructor starts with packagename, classname and dimension
    Arg1 is the package name (null if none) using dots as separators
    Arg2 is the class name (may be multipart) using dots
    Arg3 is 0 if no dimensions, >=1 for arrays
    */
 method RxType(newpack=Rexx, newname=Rexx, dims=int)
  packagename=newpack
  classfilename=newname.changestr('.', '$')
  dimension=dims
  if newpack=null then classname=newname
                  else classname=newpack'.'newname
  return

 /* Split a name into package name and classfile name, assuming
    the class is not a minor class, or has dollars in the class name
    part. */
 method split(name=Rexx) private
  lsep=name.lastpos('.').toint()     -- find package separator
  if lsep=0 then do
    classfilename=name
    packagename=null
    classname=name.changestr('$', '.')
    end
   else do
    classfilename=name.substr(lsep+1)
    packagename=name.left(lsep-1)
    classname=packagename'.'classfilename.changestr('$', '.')
    end
  return

 /* Test whether types match
    Arg1 is an object (not null) which must be a Type */
 method equals(o=Object) returns boolean
  t=RxType o
  if dimension\=t.dimension then return 0
  return classname==t.classname

 /* Test whether the Type is an array */
 method isarray returns boolean
  return dimension>0

 /* Test whether the Type is primitive (and not an array)
    Result is 1 if it is a primitive type, 0 otherwise */
 method isPrimitive returns boolean
  if \hadprimitive then do
    if dimension=0 then primitive=isBasePrimitive() -- array isn't primitive
    -- else leave as 0
    hadprimitive=1
    end
  return primitive

 /* Test whether the base Type is primitive
    Result is 1 if it is a primitive type, 0 otherwise */
 method isBasePrimitive returns boolean
  if packagename\=null then return 0         -- primitives are not in a package
  if classname.length().toint()>7 then return 0  -- avoid wordpos call
  return PRIMITIVES.wordpos(classname, 1).toint()>0

 /* Test whether the Type is 'null'
    Result is 1 if it is null, 0 otherwise */
 method isNull returns boolean
  if classname.length().toint()\==4 then return 0-- quick test
  if dimension>0 then return 0               -- array isn't null
  return (classname==NULL_CLASS)

 /* Return the base type or redimensioned type
    Arg1 is the dimension required (default 0)
    returns a new RxType object with the requested dimension
    */
 method basetype(dim=int 0) returns RxType
  return RxType(packagename, classfilename.changestr('$', '.'), dim)

 /* Return type in Java language source form, as a string */
 method toJava returns Rexx
  if dimension=0 then return classname       -- just classname
  return classname'['||']['.copies(dimension-1)']'

 /* return the Java Class object for this Type
    Arg1 is the class loader to be used, null for default
    returns null if class not found (e.g., erased under us or simply
      unknown)
    */
 -- can't call it getClass, as Object.getClass is final
 method getClassObject(loader=ClassLoader null) returns Class
  if ourclass=null then do    -- if no lookaside available...
    if isPrimitive() then do
      select case classname
        when 'int'     then ourclass=Integer.TYPE
        when 'byte'    then ourclass=Byte.TYPE
        when 'short'   then ourclass=Short.TYPE
        when 'long'    then ourclass=Long.TYPE
        when 'char'    then ourclass=Character.TYPE
        when 'float'   then ourclass=Float.TYPE
        when 'double'  then ourclass=Double.TYPE
        when 'boolean' then ourclass=Boolean.TYPE
        end
      end
     else do
      -- if it's an array then we must transform the type to a Java
      -- signature; if it is not then we need the dollared class name
      if dimension=0 then do
        if packagename=null then name=String classfilename
          else name=packagename'.'classfilename
        end
       else name=this.toJavaSig()

      if loader=null then ourclass=Class.forName(name)
                     else ourclass=Class.forName(name, 1, loader)
     catch ClassNotFoundException
      -- say '# T.gCO: ClassNotFound' ce.getMessage()
      ourclass=null -- [B&B]
      end
    end
  return ourclass

 /* return the type as a old-style Signature string */
 -- Use only for diagnostics, dumps, etc., as it is not babelized
 method toSig returns Rexx
  if dimension=0 then return classname       -- just classname
  return classname'['||','.copies(dimension-1)']'

 /* toJavaSig -- return the type as a Java (JVM) signature string */
 -- For example:  Ljava.lang.Object;.  Note that the actual class file
 -- signature uses '/' for '.'.  The dot form is used by Class.forname().
 -- RxClassImage has the inverse, which should be moved here after cleanup
 method toJavaSig returns String
  if packagename\=null, classname.length().toint()>7 then sigpos=0
   else sigpos=PRIMITIVES.wordpos(classname, 1).toint()
  -- sigpos is now >0 if a primitive
  if sigpos=0 then do
    if packagename=null then typesig='L'classfilename';'
     else typesig='L'packagename'.'classfilename';'
    end
   else typesig=PRIMITIVE_SIGS.word(sigpos)
  if dimension>0 then return '['.copies(dimension)||typesig
  return typesig

 /* return the type as a string  -- simple readable syntax, not babelized */
 /** @deprecated */              -- deprecated to warn of use
 method toString returns String
  return toSig().toString()                      -- [usually just in diag]

 /* toJavaString -- convert an array of types to a Java type string with
    commas, using fully qualified names */
 method toJavaString(types=RxType[]) static returns Rexx
  list=Rexx ''
  if types\=null then loop a=0 for types.length
    if a>0 then list=list','
    list=list||types[a].toJava()
    end a
  return list

 /* Return package name of the type */
 method getPackageName returns Rexx
  return packagename

 /* Return dotted class name of the type */
 method getClassName returns Rexx
  return classfilename.changestr('$', '.')

 /* Return dollared class name of the type */
 method getClassFileName returns Rexx
  return classfilename
