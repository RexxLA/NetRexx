/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrTrace                                                            */
/*                                                                    */
/*   An object that represents a parsed Trace clause.                 */
/*                                                                    */
/*   This is mostly processed in pass 1, so we can determine the      */
/*   maximum tracing level for each method.                           */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.07.30 Initial                                                 */
/* 1998.05.21 Add TRACE VAR                                           */
/* 1998.05.24 Allow use before first CLASS                            */
/* 1998.10.08 Allow use in minor classes                              */
/* 2000.03.03 Add interpretation                                      */
/* 2022.05.24 Add interactive trace  --MRE                            */
/* ------------------------------------------------------------------ */
/* For now accept only one keyword */
/**   An object that represents a parsed Trace clause.                 */
package org.netrexx.process
options binary nodecimal strictcase strictargs

class NrTrace implements RxClauseParser
 properties public
  level=RexxTrace.OFF                   -- level this instruction implies

 properties private
  rxt     =RxTranslator                 -- root
  parser  =RxParser                     -- local reference
  pcursor =RxCursor                     -- local reference
  tokens  =RxToken[]                    -- local reference
  warnkey =char[]                       -- non-null if a warning needed

  addnames=String[]                     -- lowercase VAR names to add
  subnames=String[]                     -- lowercase VAR names to remove

 /** Construct an object from the current clause */
 method NrTrace(newrxt=RxTranslator)
  rxt    =newrxt                        -- the boss
  parser =rxt.program.parser            -- local reference
  pcursor=parser.cursor                 -- local reference
  tokens =pcursor.curclause.tokens      -- local reference

 /** Pass processing */
 method scan(pass=int)

  if pass=2 then do label scan2         -- minimal processing needed
    if parser.level<2 then
     -- only one non-VAR trace is allowed before first method
     if \parser.iskey(tokens[2].value, 'VAR') then do label notvar
      if parser.level=0 then do
        if rxt.program.hadtrace then
          RxWarn(rxt, tokens[0], 'extra.trace.before', 'class')
        rxt.program.hadtrace=1
        end
       else /* level 1 */ do
        if rxt.program.hadtrace | pcursor.curclass.hadtrace then
          RxWarn(rxt, tokens[0], 'extra.trace.before', 'method')
        pcursor.curclass.hadtrace=1
        end
      end notvar

    if warnkey\=null then               -- pending warning
      RxWarn(rxt, tokens[2], 'trace.key.assumed', warnkey)
    return
    end scan2

  if pass=0 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrTrace: P0')

  /* must be pass 1 ... */

  if pcursor.curclass\=null then
   if pcursor.curclass.classinfo.isinterface then
    signal RxError(rxt, tokens[0], 'not.allowed.in.interface')

  t2=tokens[1].type
  select
    when t2=RxToken.END  then err=1
    when t2\=RxToken.SP  then err=1
    when tokens[2].type\=RxToken.SYM then err=2
    otherwise err=0
    end
  if err>0 then signal RxError(rxt, tokens[err], 'keyword.expected')

  addlist =Vector null                  -- VAR names to add [String]
  sublist =Vector null                  -- VAR names to remove [String]
  endtok=tokens[3]                      -- assumed END
  tok=tokens[2]
  upkey=Rexx(tok.value).upper()
  usekey=tok.value                      -- char[]

  /* Kindly expand singles for old Rexxen */
  p='O V M A R I'.wordpos(upkey)                    -- [add T O later if needed]
  if p\=='0' then
   if parser.iskey(tok.value, upkey) then do
    usekey=char[] 'OFF VAR METHODS ALL RESULTS INT'.word(p)
    warnkey=usekey                                -- indicate warning needed
    end

  select label checkkey
    when parser.iskey(usekey, 'OFF') then do
      level=RexxTrace.OFF
      end
    when parser.iskey(usekey, 'VAR') then do label var
      level=RexxTrace.VAR
      /* Spin down the list; convert names to lower case then save in
         the appropriate vector.  A temporary dictionary is used for
         checking for duplicates within the TRACE instruction. */
      lasttok=RxToken null
      sign=char '+'
      duplicate=Rexx '0'
      loop n=3 by 1
        tok=tokens[n]
        if tok.type=RxToken.SP then iterate n     -- ignore blanks
        if tok.type=RxToken.END then leave n
        -- sign or symbol expected
        select
          when tok.type=RxToken.OP then do
            sign=tok.value[0]
            if sign\='-' then if sign\='+' then
              signal RxError(rxt, tok, 'variable.name.expected')
            end /* +/- */
          when tok.type=RxToken.SYM then do
            name=Rexx(tok.value).lower()
            if duplicate[name] then
              signal RxError(rxt, tok, 'duplicate.trace.variable')
            duplicate[name]=1           -- record
            if sign='+' then do
              if addlist=null then addlist=Vector(10)
              addlist.addElement(name.toString())
              -- record in the right dictionary, for later optimizations
              select
                when parser.level=0 then     -- should never be anymore
                  signal RxQuit(rxt, tokens[0], 'internal.error', 'NrTrace: PL=0')
                when parser.level=1 then
                  pcursor.curclass.classtracevars[name]=1
                otherwise
                  pcursor.curmethod.methodtracevars[name]=1
                end
              end
             else do
              if sublist=null then sublist=Vector(10)
              sublist.addElement(name.toString())
              end
            sign='+'     -- default for next
            end
          otherwise
            signal RxError(rxt, tok, 'blank.expected')
          end
        lasttok=tok
        end n
      -- found END
      endtok=tok
      -- copy name lists into arrays
      if addlist\=null then do
        addnames=String[addlist.size()]
        addlist.copyInto(addnames)
        end
      if sublist\=null then do
        subnames=String[sublist.size()]
        sublist.copyInto(subnames)
        end
      if lasttok=null then leave checkkey              -- empty list is OK
      if lasttok.type=RxToken.SYM then leave checkkey  -- ends with symbol; OK
      signal RxError(rxt, tok, 'variable.name.expected')
      end var
    when parser.iskey(usekey, 'METHODS') then do
      if parser.level>=2 then /* in method */
        signal RxError(rxt, tokens[2], 'trace.methods.in.method')
      level=RexxTrace.METHODS
      end
    when parser.iskey(usekey, 'ALL') then do
      level=RexxTrace.ALL
      end
    when parser.iskey(usekey, 'RESULTS') then do
      level=RexxTrace.RESULTS
      end
--MRE
    when parser.iskey(usekey, 'INT') then do
--      say '#MRE SET TRACE INT'
      if rxt.wontexec then RxWarn(rxt, tokens[0], 'trace.no.effect')
      else   
        level=RexxTrace.INTER
      end
/**
    when parser.iskey(usekey, 'TERMS') then do
      level=RexxTrace.TERMS
      end
    when parser.iskey(usekey, 'OP') then do
      level=RexxTrace.OPS
      end
**/
    otherwise -- unknown
      signal RxError(rxt, tok, 'keyword.expected')
    end

  if endtok.type\=RxToken.END then signal RxError(rxt, endtok, 'junk.on.end')

  if rxt.program.flag.trace=0 then                -- NOTRACE requested ..
   if level\=RexxTrace.OFF then do                -- .. and not OFF
    level=RexxTrace.OFF                           -- no tracing after all
    if rxt.program.tracewarn then return          -- already warned
    RxWarn(rxt, tokens[0], 'trace.not.active')    -- ignored
    rxt.program.tracewarn=1                       -- prevent more warnings
    return; end

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate

  /* The code generated is static if at the class level, or dynamic
     otherwise.
     Most TRACE options simply set the tracing to a new Level; TRACE
     VAR, however, simply adds and/or removes variables, with the
     side-effect of raising the level to VAR if OFF.
     */
  if level\=RexxTrace.VAR then do
    operation='newlevel('level')'
    end
   else do
    /* Make a constant array or a null for each name list */
    code=RxCode(RxCode.S_EXPR, RxType.STRINGARRAY_TYPE, null)
    if addnames=null then addcode='null'
     else do
      javacode='{'
      loop n=0 for addnames.length
        if n>0 then javacode=javacode','
        javacode=javacode'"'addnames[n]'"'
        end n
      javacode=javacode'}'
      code.javacode=javacode
      addcode=rxt.converter.addconstant(pcursor, RxType.STRINGARRAY_TYPE, code).javacode
      end
    if subnames=null then subcode='null'
     else do
      javacode='{'
      loop n=0 for subnames.length
        if n>0 then javacode=javacode','
        javacode=javacode'"'subnames[n]'"'
        end n
      javacode=javacode'}'
      code.javacode=javacode
      subcode=rxt.converter.addconstant(pcursor, RxType.STRINGARRAY_TYPE, code).javacode
      end
    -- We now have the arrays for any names, named by ADDCODE and SUBCODE
    operation='modnames('addcode','subcode')'
    end

  -- now, if at class level, make sure we have a trace object, and
  -- generate code for it
  if parser.level<2 then /* no method yet */ do
    if pcursor.curclass.classtrace=='null' then do -- need to generate variable
      pcursor.curclass.uniques=pcursor.curclass.uniques+1
      tracername='$'pcursor.curclass.uniques      -- trace object
      pcursor.curclass.classtrace=tracername      -- use this from now on
      -- form the declaration.  Note minors cannot have statics
      if pcursor.curclass.classinfo.parents=0 then atts='private static final'
       else if pcursor.curclass.classinfo.isinterface then atts='private final'
       else atts='private transient final'
      rxt.program.streamer.out(atts RxType.REXXTRACE_CLASS tracername'=new'-
        RxType.REXXTRACE_CLASS'('rxt.program.source.getLineCount()','-
         ||'System.'||'err out err'.word(rxt.program.flag.trace+1)','-
         ||'"'rxt.program.source.getName()'");')
      end
    -- form the initializer.  Note minors cannot have statics until 1.2
    if pcursor.curclass.classinfo.parents=0 then initatt='static'
     else initatt=''
    rxt.program.streamer.out(initatt'{'pcursor.curclass.classtrace'.'operation';}')
    return
    end
  /* Here if in method */
  /* There will be a trace object, unless all TRACE instructions say OFF.
     If there, change its level [may have side-effects] */
  if pcursor.curmethod.methodtrace\=='null'
   then rxt.program.streamer.out(pcursor.curmethod.methodtrace'.'operation';')
  return

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  if rxt.program.flag.trace=0 then return    -- notrace requested

  -- operation here is different, depending on whether we're in prologue
  -- or not.  If we are, then we must be static code and we can simply
  -- make the Trace object (if needed) and save it with the class.
  -- At all times we just update the current object as needed; in methods
  -- it will have been created (if needed) at the method startup.

  if rxt.program.flag.diag then say '# Trace exec ' this.toString() level

  if cursor.curmethod=null then do label prologue
    if cursor.curclass.classruntrace=null then do
      if rxt.program.flag.trace=1 then outstream=System.out
                                  else outstream=System.err
      cursor.curclass.classruntrace=RexxTrace(rxt.program.source.getLineCount(),-
                                         outstream, rxt.program.source.getName())
      end
    cursor.curtrace=cursor.curclass.classruntrace
    end prologue

  -- now update the current trace object, however needed
  if level=RexxTrace.VAR then cursor.curtrace.modnames(addnames, subnames)
                         else cursor.curtrace.newlevel(level)
  return

