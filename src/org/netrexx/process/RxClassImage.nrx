/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxClassImage                                                       */
/*                                                                    */
/*   An object that processes class files (or file images).           */
/*                                                                    */
/*   Note we assume that property and method fields have same form.   */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.08.27 Initial, based on RxFixup and RxPublicAgent             */
/* 1996.08.28 Make translator-based                                   */
/* 1997.05.31 Handle 'Deprecated' attributes                          */
/* 1998.02.08 Recognise externally-visible inner classes, by name     */
/* 1998.04.02 Detect dependent inner classes                          */
/* 1998.04.27 Return all signatures in fully dotted form              */
/* 1998.04.27 Adjust dependent's constructor signatures [drop Arg1]   */
/* 1998.05.05 Change from string interface to RxField                 */
/* 2000.04.07 Expose the binary data                                  */
/* ------------------------------------------------------------------ */
/* 2- & 3-byte UTF8 untested, except as used in RxStreamer            */
/*                                                                    */
/* Since we now have a parent RxClassInfo object, we could easily     */
/* fill in its fields directly, rather than have RxClasser copy them  */
/* one-by-one.                                                        */

options binary nodecimal strictcase strictargs
package org.netrexx.process
import sun.tools.java.RuntimeConstants

/**   An object that processes class files (or file images).           */
class RxClassImage binary-
                   uses sun.tools.java.RuntimeConstants, RxField
 properties public
  thisname     =String             -- class name (read from class) [all dots]
  thispackage  =String             -- class package (null string if none)
  thisfullname =String             -- class full name (package removed, $->.)
  thisshortname=String             -- class short name (package & parents removed)
  thisparents  =int 0              -- class parents count (depth)
  thisminors   =int 0              -- class children count (members)
  supername    =String null        -- superclass name (null if none)
  parentname   =String null        -- parentclass name (null if none)
  modifiers    =String             -- class modifiers
  interfaces   =String[]           -- list of interfaces implemented
  propfields   =RxField[]          -- list of property fields
  methfields   =RxField[]          -- list of method fields
  minors       =Vector(5)          -- list of children names
  data         =byte[]             -- class file data

  ispublic     =boolean            -- class is public
  isprivate    =boolean            -- class is private
  isabstract   =boolean            -- class is abstract
  isinterface  =boolean            -- class is an interface
  isfinal      =boolean            -- class is final
  isdeprecated =boolean            -- class is deprecated
  isdependent  =boolean            -- class is a dependent minor class
  isaccsuper   =boolean            -- class is 'acc_super'

  isallpublic  =boolean 1          -- all non-private methods and
                                   -- properties are public
 properties private
  rxt=RxTranslator                 -- the boss
  classinfo=RxClassInfo            -- container for the class
  classname=String                 -- requested name of the class (qualified)
  foundname=String                 -- found name of the class (may have $s)
  classprivate=boolean             -- is a non-public class
  conoffset=int[]                  -- constant index -> offset table
  nextstart=int                    -- side-effect of parsefield()
  getsigrem=String                 -- side-effect of parsesig()
  packend=int                      -- side-effect of getclass()
  tok=RxToken                      -- where to report any error
--test=boolean 0                   -- testing

 properties private constant
  ACC_SUPER =32                    -- (not in RuntimeConstants)

 /** Construct a ClassImage
    Arg1 is the translator root
    Arg2 is the RxClassInfo for the class
    Arg3 is the input stream of some kind for the class
            [originally FileInputStream or ZipFileInputStream]
    Arg4 is the input stream length [.available fails for Zips]
    Arg5 is token, in case of error
    */
 method RxClassImage(newrxt=RxTranslator, newinfo=RxClassInfo,-
                     instream=InputStream, size=long, newtok=RxToken)
  rxt=newrxt; tok=newtok
  classinfo=newinfo
  classname=classinfo.type.classname
  if size<10 then
    signal RxQuit(rxt, tok, 'cannot.read.class', classname, 'only' size 'bytes')
  if size>Integer.MAX_VALUE then
    signal RxQuit(rxt, tok, 'cannot.read.class', classname, 'too large')
  isize=int size
  data=byte[isize]
  off=int 0
  /* If it's a Zip entry, we may get the data in dribbles */
  loop while isize>0
    read=instream.read(data, off, isize)
    if read<=0 then do
      instream.close()          -- B&B
      signal RxQuit(rxt, tok, 'cannot.read.class', classname, 'too small')
      end
    off=off+read
    isize=isize-read
  catch e=IOException
    data=null                 -- error; data remains null
    signal RxQuit(rxt, tok, 'cannot.read.class', classname, e.getMessage())
  finally
    do
      instream.close()
    catch IOException
      nop
    end
    instream=null             -- done with stream
  end

  parseclass()                  -- parse the class file
  return

 /** Parse the class file.
    If error, ERRORMSG [and ERRORDET optionally] are set to the error
      message and details. */
 method parseclass private
  -- process the class file
  if u4(0)\=JAVA_MAGIC then
    signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'wrong format')

  -- constant pool count
  cpcount=u2(8)

  /* Scan the constants, and record the position of each */
  conoffset=int[cpcount]      -- list of offsets of constants (in data)
  conoffset[0]=-1             -- disallowed
  cons=cpcount-1              -- number of constants
  start=10                    -- first constant offset (0 doesn't exist)
  loop index=1 to cons        -- constant index
    conoffset[index]=start    -- record its start
    tag=u1(start)
    select case tag           -- determine length of constant
      /* See classfile specifications for these constants */
      when CONSTANT_UTF8            then len=u2(start+1)+3
      when CONSTANT_INTEGER         then len=5
      when CONSTANT_FIELD           then len=5
      when CONSTANT_METHOD          then len=5
      when CONSTANT_CLASS           then len=3
      when CONSTANT_STRING          then len=3
      when CONSTANT_FLOAT           then len=5
      when CONSTANT_LONG            then do; len=9; index=index+1; end
      when CONSTANT_DOUBLE          then do; len=9; index=index+1; end
      when CONSTANT_INTERFACEMETHOD then len=5
      when CONSTANT_NAMEANDTYPE     then len=5
      when CONSTANT_UNICODE         then len=u2(start+1)*2+3 -- unused
      otherwise                              -- bad (unknown) tag
        len=1                                -- for javac
        signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'bad tag')
      end
    -- say '# constant' index 'tag' tag 'len' len
    start=start+len
    end index
  /* say '# Constants skipped, now at:' start */

  /* Carry on collecting */
  cacc=u2(start)                   -- flags
  if (cacc & ACC_PUBLIC      )\=0 then do
    modifiers='public';  classprivate=0; end
   else do
    modifiers='private'; classprivate=1; end
  if (cacc & ACC_ABSTRACT    )\=0 then modifiers=modifiers' abstract'
  if (cacc & ACC_INTERFACE   )\=0 then modifiers=modifiers' interface'
  if (cacc & ACC_FINAL       )\=0 then modifiers=modifiers' final'
  /* if (cacc & ACC_SUPER       )\=0 then modifiers=modifiers' super' */
  /* same in bit form */
  ispublic   =\classprivate
  isprivate  =classprivate
  isabstract =(cacc & ACC_ABSTRACT    )\=0
  isinterface=(cacc & ACC_INTERFACE   )\=0
  isfinal    =(cacc & ACC_FINAL       )\=0
  isaccsuper =(cacc & ACC_SUPER       )\=0

  thisclassi =u2(start+2)          -- -> CONSTANT_CLASS
  foundname=getclass(thisclassi)   -- name recorded in class file
  thisname=foundname               -- name we'll show as

  if packend=-1 then do
    thispackage=''
    thisshortname=thisname
    end
   else do
    thispackage=thisname.substring(0, packend)
    thisshortname=thisname.substring(packend+1, thisname.length())
    end

--test=thisshortname=='Applet'     -- [for example]

  -- now handle obviously minor (external inner) classes
  thisfullname=thisshortname                 -- always
  ld=thisshortname.lastIndexOf(int(char '.'))-- any dots in name part?
  if ld=-1 then nop                          -- no
   else do label minor                       -- had dollars
    -- note that we don't check syntax of the name
    thisshortname=thisshortname.substring(ld+1, thisshortname.length())
    thisparents=Rexx(thisfullname).countstr('.').toint()
    if thispackage=='' then thisname=thisfullname
                       else thisname=thispackage'.'thisfullname
    if rxt.superflag.diag then
      say '# ci minor:' thisfullname thisshortname thisparents
    end minor

  superclassi=u2(start+4)          -- maybe 0, or -> CONSTANT_CLASS
  if superclassi\=0 then supername=getclass(superclassi)

  ifacecount =u2(start+6)          -- interfaces count
  -- now process interface list: each -> CONSTANT_CLASS
  start=start+8
  interfaces=String[ifacecount]
  loop i=0 for ifacecount
    interfaces[i]=getclass(u2(start))
    start=start+2
    end i

  -- get properties
  propcount=u2(start)              -- properties count
  propfields=RxField[propcount]
  start=start+2
  loop i=0 for propcount
    propfields[i]=parsefield(start)
    start=nextstart                -- updated as side-effect
    end i

  -- get methods
  methcount=u2(start)              -- method count
  methfields=RxField[methcount]
  start=start+2
  loop i=0 for methcount
    methfields[i]=parsefield(start)
    start=nextstart                -- updated as side-effect
    end i

  -- class attributes
  attcount=u2(start)               -- attribute count
  attstart=start+2                 -- -> first attribute
  loop label a for attcount
    aname=getutf8(u2(attstart))    -- attribute name
    alen=u4(attstart+2)            -- length
    -- Here process attributes of note
    select
      when aname=='Deprecated' then isdeprecated=1
      when aname=='InnerClasses' then do
        noc=u2(attstart+6)
        loop cstart=attstart+8 by 8 for noc
          icii=u2(cstart  )        -- inner class info index
          ocii=u2(cstart+2)        -- outer class info index
          /* ini =u2(cstart+4) */  -- -> the short name
          icaf=u2(cstart+6)        -- inner class access flags
          /** if rxt.superflag.test then do
            ini =u2(cstart+4)
            say '#@  ..' icii ocii ini icaf getclass(icii) getclass(ocii) getutf8(ini)
            end
          **/
          innername=getclass(icii)
          if ocii==0 then outername=String null
                     else outername=getclass(ocii)
          if foundname==innername then do         -- this is us
            isdependent=(icaf & ACC_STATIC)=0
            parentname=outername                  -- save parent's name
            end
           else if foundname==outername then do   -- reference to a child
            minors.addElement(innername)          -- add it to the list
            thisminors=thisminors+1               -- [historical]
            end
          end cstart
        -- say '#@' foundname 'dep, minors:' isdependent minors.size()
        end
      otherwise nop
      end
    attstart=attstart+alen+6       -- step past attribute
    end a

  /* Now, if we are a dependent class, we have to go back and doctor
     constructor methods to remove the first (parent) argument. */
  if isdependent then loop i=0 for methcount
    if methfields[i].fieldname==thisshortname then do  -- is constructor?
      args=methfields[i].fieldargtypes
      if args.length=0 then iterate i   -- default constructor, perhaps
      -- could check first argument is parent type, here
      newargs=RxType[args.length-1]
      if newargs.length>0 then
        System.arraycopy(args, 1, newargs, 0, newargs.length)
      methfields[i].fieldargtypes=newargs
      end
    end i

  return /* parseclass */

 /** Return value of a constant as an Object
    Arg1 is constant index [may be 0, for some inner class references]
    returns value of the constant as a string [if index is 0 then an
      empty string is returned]
    -- For now, only primitive and string constants return usable
    -- values; primitives are wrapped
    */
 method getvalue(index=int) private returns Object
  if index=0 then return '[0]'
  o=conoffset[index]          -- get data offset
  tag=u1(o)                   -- already checked during first scan
  select case tag             -- determine type of constant
    /* See classfile specifications for these constants */
    when CONSTANT_UTF8            then return getutf8(index)   -- String
    when CONSTANT_STRING          then return getutf8(u2(o+1))
    when CONSTANT_INTEGER         then return Integer(u4(o+1))
    when CONSTANT_LONG            then return Long(u8(o+1))
    when CONSTANT_FLOAT           then return Double(Float.intBitsToFloat(u4(o+1)))
    when CONSTANT_DOUBLE          then return Double(Double.longBitsToDouble(u8(o+1)))
    when CONSTANT_FIELD           then return getref(index)
    when CONSTANT_METHOD          then return getref(index)
    when CONSTANT_INTERFACEMETHOD then return getref(index)
    when CONSTANT_CLASS           then return getclass(index)
    when CONSTANT_NAMEANDTYPE     then return ''
    when CONSTANT_UNICODE         then return '' -- unused
    end

 /** Return value from a reference
    Arg1 is constant index [may be 0, for some inner class references]
    -- for now just return flag string
    */
 method getref(index=int) private returns Rexx
  return '[ref]'

 /** Return String from a CONSTANT_CLASS
    Arg1 is constant index [may be 0, for some inner class references]
    Class name will be in User-seen form (dots)
    As a side-effect, the position of the last '/' is set into
      'packend', which will be -1 if no package present.
    */
 method getclass(index=int) private returns String
  if index=0 then return '[0]'
  o=conoffset[index]         -- get data offset
  if u1(o)\=CONSTANT_CLASS then
    signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'Non-CLASS')
  name=getutf8(u2(o+1))
  packend=name.lastIndexOf(int(char '/')) -- side-effect .. package delimiter
  return name.replace('/', '.').replace('$', '.')

 /** Return String from a CONSTANT_UTF8
    Arg1 is constant index */
 method getutf8(index=int) private returns String
  o=conoffset[index]         -- get data offset
  if u1(o)\=CONSTANT_UTF8 then
    signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'Non-UTF8')
  len=u2(o+1)                -- input bytes
  work=char[len]             -- result will be this or shorter
  j=0                        -- j -> output array
  last=o+3+len-1             -- last character of input string
  loop i=o+3 to last         -- i -> input array
    c=char(u1(i))
    if c>'\x7F' then do      -- multibyte
      if c<'\xC0' then
          signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'UTF 0')
      if c<='\xDF' then do   -- two-byte
        if i=last then
          signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'UTF 1')
        c2=char(u1(i+1))
        if c2<'\x80' | c2>'\xBF' then
          signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'UTF 2')
        c=char((int(c) &int('\x1F'))*64-
              +(int(c2)&int('\x3F')))
        i=i+1
        end
       else if c<='\xEF' then do -- three-byte
        if i+2>last then
          signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'UTF 3')
        c2=char(u1(i+1)); c3=char(u1(i+2))
        if c2<'\x80' | c3<'\x80' | c2>'\xBF' | c3>'\xBF' then
          signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'UTF 4')
        c=char((int(c) &int('\x1F'))*4096-
             + (int(c2)&int('\x3F'))*64-
             + (int(c3)&int('\x3F')))
        i=i+2
        end
       else signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'UTF 5')
      end
    work[j]=c
    j=j+1
    end i
  return String(work, 0, j)

 /** Return unsigned one-byte starting at offset into data */
 method u1(o=int) private returns int
  return (data[o] & 255)

 /** Return unsigned two-byte starting at offset into data */
 method u2(o=int) private returns int
  return (data[o] & 255)*256 + (data[o+1] & 255)

 /** Return 'unsigned' four-byte starting at offset into data
    (returns -ve if top bit set) */
 method u4(o=int) private returns int
  return (data[o]   & 255)*16777216 + (data[o+1] & 255)*65536-
       + (data[o+2] & 255)*256      + (data[o+3] & 255)

 /** Return 'unsigned' eight-byte starting at offset into data
    (returns -ve if top bit set) */
 method u8(o=int) private returns long
  hi=(data[o]   & 255)*16777216 + (data[o+1] & 255)*65536-
   + (data[o+2] & 255)*256      + (data[o+3] & 255)
  lo=(data[o+4] & 255)*16777216 + (data[o+5] & 255)*65536-
   + (data[o+6] & 255)*256      + (data[o+7] & 255)
  all=long hi
  return all*4294967296+lo

 /** Decodes class field field into a RxField
    Arg1 is offset into data of coded field
    returns RxField for the field
    side-effect:
    NEXTSTART is updated offset in data after the field is processed
    */
 method parsefield(o=int) private returns RxField
  facc=u2(o)                       -- access flags
  fname=getutf8(u2(o+2))           -- name
  fjsig=getutf8(u2(o+4))           -- signature (Java-style)
  felist=''                        -- field exception list
  deprecated=boolean 0             -- field is deprecated
  constvalue=boolean 0             -- field has ConstantValue attribute
  cvalue    =Object                -- value of the ConstantValue attribute
  /* Parse the attributes we're interested in (and step over others) */
  attcount=u2(o+6)                 -- attribute count
  attstart=o+8                     -- -> first attribute
  loop label a for attcount
    aname=getutf8(u2(attstart))    -- attribute name
    alen=u4(attstart+2)            -- length
    -- Now process attributes of note
    select
      when aname=='Exceptions' then do
        ecount=u2(attstart+6)
        loop e=attstart+8 to attstart+8+(ecount-1)*2 by 2
          eindex=u2(e)
          if eindex=0 then iterate e    -- allowed, for some reason
          if felist.length()>0 then felist=felist','
          felist=felist||getclass(eindex)
          end e
        end
      when aname=='ConstantValue' then do
        constvalue=1                    -- for use shortly
        o=u2(attstart+6)                -- constant index
        cvalue=getvalue(o)              -- value as an object
        end
      when aname=='Deprecated' then do
        deprecated=1                    -- for use shortly
        end
      otherwise
        nop
      end
    attstart=attstart+alen+6            -- step past attribute
    end a
  nextstart=attstart                    -- tell caller

  /* Now start collecting things needed to construct RxField */
  constructor=boolean 0                 -- field is constructor
  if fname=='<init>' then do            -- constructor
    constructor=1
    /* field name is class short name (without package or parents) */
    fname=thisshortname
    end

  /* Generate visibility value.
     Some older classes may have multiple bits; we simplify.
     No bits at all means 'package only' (default access). */
  visib=VIS_UNKNOWN
  if       (facc & ACC_PUBLIC      )\=0 then visib=VIS_PUB
   else if (facc & ACC_PRIVATE     )\=0 then visib=VIS_PRIV
   else if (facc & ACC_PROTECTED   )\=0 then visib=VIS_INHER
   else                                      visib=VIS_SHAR -- default access

  -- mark the class as unpublic if it has an semi-visible fields
  if visib=VIS_SHAR, visib=VIS_INHER then isallpublic=0

  atts=ATT_NONE
  if deprecated                   then atts=atts | ATT_DEPRECATED
  if (facc & ACC_STATIC      )\=0 then atts=atts | ATT_STATIC
  if (facc & ACC_TRANSIENT   )\=0 then atts=atts | ATT_TRANSIENT
  if (facc & ACC_SYNCHRONIZED)\=0 then atts=atts | ATT_PROTECT
  if (facc & ACC_ABSTRACT    )\=0 then atts=atts | ATT_ABSTRACT
  if (facc & ACC_NATIVE      )\=0 then atts=atts | ATT_NATIVE
  if (facc & ACC_VOLATILE    )\=0 then atts=atts | ATT_VOLATILE
  if (facc & ACC_FINAL       )\=0 then atts=atts | ATT_FINAL
  if constvalue                   then atts=atts | ATT_CONSTVALUE

  /* Now split and parse the signature */

  lpar=fjsig.indexOf('(')
  if lpar<0 then do                     -- property
    rsig=parsesig(fjsig)                -- RxType
    -- just one is assumed
    argsig=RxType[] null                -- no arguments array == property
    end
   else do                              -- method
    rpar=fjsig.indexOf(')')
    if constructor
     then rsig=classinfo.type
     else rsig=parsesig(fjsig.substring(rpar+1, fjsig.length()))
    if rpar=lpar+1                      -- i.e., ()
     then argsig=RxType.EMPTY_TYPES         -- no arguments
     else argsig=parsesiglist(fjsig.substring(lpar+1, rpar))
    end

  /* Now we're ready to make the RxField */
  if rxt.exec then fieldprog=rxt.getProgram()
              else fieldprog=rxt.program

  retfield=RxField(fieldprog, classinfo, fname, rsig,-
                   visib, atts, argsig,-
                   felist)              -- add exceptions list

  -- add any constant value  [treat char as a string]
  if constvalue then select
    when rsig=RxType.CHAR_TYPE then
      retfield.fieldvalue=Rexx(char((Integer cvalue).intValue()))
    otherwise retfield.fieldvalue=cvalue
    end

  -- if rxt.superflag.diag then
  --   say '#ci>>> field' retfield.toString(retfield.fieldprogram)-
  --       retfield.fieldtype.toString(retfield.fieldprogram)
  return retfield                       -- done

 /** Get one Java signature and convert to a RxType
    Arg1 is java signature (never empty)
    returns RxType of first signature from Arg1, and places the
      remainder of the signature (if any) into GETSIGREM.

    For example:  'BCD' --> RxType('byte',0), getsigrem='CD'
    */
 method parsesig(s=String) private returns RxType
    c=s.charAt(0)
    s=s.substring(1, s.length())
    select label type case c
      when 'B' then type=RxType.BYTE_TYPE
      when 'C' then type=RxType.CHAR_TYPE
      when 'D' then type=RxType.DOUBLE_TYPE
      when 'F' then type=RxType.FLOAT_TYPE
      when 'I' then type=RxType.INT_TYPE
      when 'J' then type=RxType.LONG_TYPE
      when 'S' then type=RxType.SHORT_TYPE
      when 'V' then type=RxType.VOID_TYPE
      when 'Z' then type=RxType.BOOL_TYPE
      when 'L' then /* object */ do
        semi=s.indexOf(';')
        type=RxType(s.substring(0, semi).replace('/', '.'),0)
        s=s.substring(semi+1, s.length())
        end
      when '[' then /* array */ do
        dims=1
        loop while s.charAt(0)='['           -- get the array dimensions
          s=s.substring(1, s.length())
          dims=dims+1
          end
        type=parsesig(s)                     -- is safe, despite getsigrem
        s=getsigrem
        -- add the dimensions back into the type
        -- we must make a new object, as base could be RxType.INT_TYPE, for example
        type=RxType(type.classname, dims)
        end
      otherwise
        signal RxQuit(rxt, tok, 'cannot.parse.class', classname, 'Type' c)
      end type
    getsigrem=s                              -- pass back remainder
    return type

 /** Parse a signature list into an RxType array
    Arg1 is java signature (never empty)
    returns the array of RxTypes */
 method parsesiglist(s=String) private returns RxType[]
  types=Vector(10)            -- enough for most
  loop forever
    types.addElement(parsesig(s))
    s=getsigrem               -- any more?
    if s=='' then leave
    end
  rettypes=RxType[types.size()]
  types.copyInto(rettypes)
  return rettypes

 /** Test if this class is visible from a given package
    Arg1 is the name of the package (may be the null string)
    Returns 1 if visible, 0 otherwise
    */
 method isvisible(packname=String) returns boolean
  if \classprivate then return 1             -- it's public
  if thispackage=='' then return 1           -- current directory is OK
  if packname==thispackage then return 1     -- same as our package
  return 0                                   -- not visible
