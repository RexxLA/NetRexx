/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2025- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* RxScriptEngineFactory                                              */
/*                                                                    */
/*   The factory which exposes metadata of RxScriptEngine             */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 2025.02.23 Initial  --MRE                                          */
/* ------------------------------------------------------------------ */

/* MRE
 Loosely based on KK's jsr223 implementation
*/

package org.netrexx.process
import javax.script.
import java.util.List
options strictcase
--trace results

class RxScriptEngineFactory implements ScriptEngineFactory
	
	properties private static
    
     FILEEXT = String ""

--     MIMETYPES = [String "text/plain","text/NetRexx","application/NetRexx"]
     MIMETYPES = [""]

     NAMES = [String "NetRexxI"]
        
    myScriptEngine=ScriptEngine 
    extensions=List		--	<String> 
    mimeTypes=List		--	<String> 
    names=List			--	<String> 
    
    method RxScriptEngineFactory()
        if myScriptEngine = null then myScriptEngine = RxScriptEngine()
        extensions = Collections.nCopies(1, FILEEXT)
        mimeTypes = Arrays.asList(MIMETYPES)
        names = Arrays.asList(NAMES)
    
    method getEngineName() returns String 
        return getScriptEngine().get(ScriptEngine.ENGINE).toString()
    
    method getEngineVersion() returns String  
        return getScriptEngine().get(ScriptEngine.ENGINE_VERSION).toString()
    
    method getExtensions() returns List			--		<String>
        return extensions
    
    method getMimeTypes() returns List			--		<String>
        return mimeTypes
    
    method getNames() returns List				--		<String>
        return names
    
    method getLanguageName() returns String
        return getScriptEngine().get(ScriptEngine.LANGUAGE).toString()
    
    method  getLanguageVersion() returns String
        return getScriptEngine().get(ScriptEngine.LANGUAGE_VERSION).toString()
    
    method getParameter(key=String ) returns  Object
        return getScriptEngine().get(key)
    
--    method getMethodCallSyntax(obj=String ,m= String,  args= String...)  returns  String
    method getMethodCallSyntax(obj=String ,m= String,  args= String[])  returns  String
        sb = StringBuffer()
        sb.append(String (obj || "." || m || "("))
        len = args.length
        loop i=0 for len
            if (i > 0) then sb.append(',')
            sb.append(args[i])
            end
        sb.append(")")
        return sb.toString()
    
    method getOutputStatement(toDisplay=String ) returns String 
    	if toDisplay==null then toDisplay=""
        --return String ("say '" || toDisplay || "'")
	return String ("say '" || (Rexx toDisplay).changestr("'", "''") || "'") -- escape single quotes if any  ---fix by Rony
    
--    method getProgram(statements=String ... ) returns  String
    method getProgram(statements=String[]) returns  String
        sb = StringBuffer()
        if statements==null then return ""
        len = statements.length
        loop i=0 for len
            if (i > 0) then sb.append('\n')
            if statements[i]\== null then sb.append(statements[i])
            end
        return sb.toString()
    
    method getScriptEngine() returns ScriptEngine 
        return myScriptEngine
    