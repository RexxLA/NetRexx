/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxProgram                                                          */
/*                                                                    */
/*   An object that describes per-program data.                       */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1997.04.21 Initial                                                 */
/* 1998.12.12 Add imports table                                       */
/* 2000.02.19 Add variable pool manager                               */
/* 2000.03.30 Separate input and output managers                      */
/* 2021.12.31 add RxModel - Jason Martin                              */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

class RxProgram implements RxMessageOutput
 properties public
  translator  =RxTranslator   -- this allows locating translator from cursor
  programname =Rexx           -- User's name for the program
  packagename =Rexx           -- package name for the program, if any
  model       =RxModel        -- stripped, compacted or braced program
  babel       =RxBabel        -- language descriptor
  source      =RxSource       -- input manager
  streamer    =RxStreamer     -- output manager
  clauser     =RxClauser      -- clause parser
  parser      =RxParser       -- parser
  pooler      =RxVarpool      -- variable pool manager
  tracer      =RxTracer       -- trace code generator
  flag        =RxFlag         -- flag object
  pendings    =Vector(10)     -- pending messages [type Rexx]
  shortref    =Hashtable(47)  -- short references [type String]
  warncount   =0              -- warnings seen
  errorcount  =0              -- errors+quits seen
  quieterror  =boolean 0      -- 1 for quiet error handling
  abandon     =boolean 0      -- 1 to inhibit any more processing
  hadtrace    =boolean 0      -- 1 if program has had a non-VAR trace
  tracewarn   =boolean 0      -- 1 if program has had trace warning
  pendtrace   =Vector(5)      -- pending TRACE clauses [type RxClause]
  pendnumeric =Vector(5)      -- pending NUMERIC clauses [type RxClause]
  classes     =Vector(5)      -- list of classes created [type RxClass]
  javaimports =Hashtable(5)   -- imports needed for Java code [type String]

 /** Construct the object
    Arg1 is the RxFlag object for the program, initialized
    Arg2 is the initial program name
    */
 method RxProgram(newrxt=RxTranslator, newflag=RxFlag, newname=Rexx)
  translator=newrxt
  flag=newflag
  programname=newname
  return

 /* toString -- return type as a (babelized) string
    Arg1 is program, to find babel object */
 method toString(type=RxType) returns String
   return babel.typeString(type)

 /* toString -- convert an array of types to a babelized string with
    commas, using fully qualified names
    Arg1 is program, to find babel object
    Arg2 is the array of types (e.g., argument list, may be empty)
    */
 method toString(types=RxType[]) returns Rexx
  list=Rexx ''
  if types\=null then loop a=0 for types.length
    if a>0 then list=list','
    list=list||babel.typeString(types[a])
    end a
  return list

 /* toConciseString -- convert an array of types to a babelized string
    with commas, using concise names where possible
    Arg1 is program, to find babel object
    Arg2 is the array of types (e.g., argument list, may be empty)
    */
 method toConciseString(types=RxType[]) returns Rexx
  list=Rexx ''
  if types\=null then loop a=0 for types.length
    if a>0 then list=list','
    list=list||babel.typeConcise(types[a])
    end a
  return list


 -- RxMessageOutput interface

 /* out -- say or queue a message
    Arg1 is the message string

    If we are not in pass 2 then the message is queued until pass2
    (unless diag is set, when also we want it to appear at the moment
    of detection).
    */
 method say(message=Rexx)
  if translator.pass>=2 then translator.say(message)
   else do -- not pass2 or interpret; enqueue the message
    if flag.diag then say'#pend#' message -- show at place of error
    pendings.addElement(message)
    end
  return

 method isCompactOutput() returns boolean
    return flag.compact

 method getSourceFileSpec() returns Rexx
  if source=null then filespec=''
  else do
    filespec=source.getName()
    filepath=source.getPath()
    if filepath\=null then filespec=filepath||filespec
    end
  if filespec=='' then filespec='?'        -- always non-empty
  filespec=filespec.replace(' ', '\0')     -- blanks to nulls
  return filespec

 method getSourceLineCount() returns int
    if source=null then return 0
    return source.getLineCount()

 method getSourceLine(line=int) returns char[]
    return source.getLine(line)

