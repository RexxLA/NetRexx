/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrImport                                                           */
/*                                                                    */
/*   An object that represents a parsed Import instruction.           */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.05.28 Initial                                                 */
/* 1996.11.29 No longer generates an import in Java code              */
/* 1998.11.17 Report error if duplicate explicit import               */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

/**   An object that represents a parsed Import instruction.           */
class NrImport implements RxClauseParser

 properties private
  rxt    =RxTranslator             -- the boss
  parser =RxParser                 -- our parser
  classer=RxClasser                -- class manager
  tokens =RxToken[]                -- local reference

 /** Construct an object from the current clause */
 method NrImport(newrxt=RxTranslator)
  rxt    =newrxt                        -- the boss
  parser =rxt.program.parser            -- our parser
  classer=rxt.classer                   -- class manager
  tokens =parser.cursor.curclause.tokens-- local reference

  if parser.cursor.curclass<>null then
    signal RxError(rxt, tokens[0], 'import.after.class')

 /** Pass0 processing */
 method scan(pass=int)
  if pass\=0 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrImport: 1')

  if tokens[1].type\=RxToken.SP  then signal RxError(rxt, tokens[1], 'import.name.expected')
  if tokens[2].type\=RxToken.SYM then signal RxError(rxt, tokens[2], 'import.name.expected')
  n=2
  shortname=tokens[n].value        -- name of this import, so far
  name=Rexx(shortname)             -- collects name of this import
  subpacks=boolean 0               -- search for subpackages requested
  loop forever
    n=n+1; tok=tokens[n]; t=tok.type
    if t=RxToken.END then leave
    if t\=RxToken.DOT then signal RxError(rxt, tok, 'junk.on.end')
    name=name'.'
    n=n+1; tok=tokens[n]; t=tok.type
    if t=RxToken.END then do
      subpacks=1                   -- ends with '.'
      leave
      end
    if t\=RxToken.SYM then signal RxError(rxt, tok, 'class.part.expected')
    name=name||tok.value
    shortname=tok.value
    end

  if rxt.program.flag.diag then say '# IMPORT' name

  /* First try importing specific class or full package hierarchy */
  num=classer.importclasses(name, 1, rxt.program, subpacks).toint()
  -- [may return -1 if a standard imported package]
  if num=-2 then              -- duplicate explicit import
    signal RxQuit(rxt, tokens[2], 'duplicate.explicit', shortname)
  if num=0 then do label noimports
    if \subpacks then do                     -- try simple package import
      num=classer.importclasses(name'.', 1, rxt.program, 0).toint()
      -- [may return -1 if a standard imported package]
      if num\=0 then leave noimports         -- found some/standards after all
      end
  if subpacks then
    do
      RxWarn(rxt, tokens[2], 'import.classes.not.found', name)
    end
  else
    do
    --  RxError(rxt, tokens[2], 'import.class.not.found', name)
      do
	loadedClass = Class.forName(name)
	classer.add2ImportedClasses(loadedClass)
      catch ClassNotFoundException
	say 'was not able to reflectively load' name
      end
    end
    end noimports
  if rxt.program.flag.verbose<4 then return
  select
    when num=-1 then rxt.say('  Standard package '''name''' re-imported')
    when num>1  then rxt.say(' ' num 'classes imported from '''name'''')
    when num=0  then nop       -- already handled
    otherwise
      /* num=1 case is uninteresting, generally */
      if rxt.program.flag.diag then say '# One class imported from '''name''''
    end

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  signal RxQuit(rxt, tokens[0], 'internal.error', 'NrImport: 2')

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  signal RxQuit(rxt, tokens[0], 'internal.error', 'NrImport: 3')
