/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrNumeric                                                          */
/*                                                                    */
/*   An object that represents a parsed Numeric instruction.          */
/*                                                                    */
/*   This may be called on pass1 if class-level, or pass2 if          */
/*     method-level.                                                  */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.06.09 Initial                                                 */
/* 1996.07.27 Add FORM                                                */
/* 1997.07.18 Use setDigits and setForm to check new settings         */
/* 1998.05.25 Allow use before first class                            */
/* 2000.02.07 Check for junk after FORM setting word                  */
/* 2000.02.11 Ensure generate has no sideeffects                      */
/* 2000.02.28 Ensure multiple static objects in prologue              */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

/**   An object that represents a parsed Numeric instruction.          */
class NrNumeric implements RxClauseParser uses RxCode, RexxSet, RxExpr
 properties private
  rxt     =RxTranslator                 -- root
  parser  =RxParser                     -- local reference
  pcursor =RxCursor                     -- local reference
  tokens  =RxToken[]                    -- local reference

  form    =boolean                      -- 1 if FORM, 0 if DIGITS
  setprop =Rexx                         -- name of property setter
  code    =RxCode                       -- code for value to set
  expr    =RxExpr                       -- expression, if DIGITS
  conv    =RxConvert                    -- conversion setup
  -- next used only in interpret
  numset  =RexxSet                      -- static value saved


 /** Construct an object from the current clause */
 /* [PARSENUMERIC -- parse numeric instruction] */
 method NrNumeric(newrxt=RxTranslator)
  rxt      =newrxt                      -- the boss
  parser   =rxt.program.parser          -- our parser
  pcursor  =parser.cursor               -- our parsing cursor
  tokens   =pcursor.curclause.tokens    -- local tokens reference


  if rxt.program.flag.diag then say '# Numeric cons ' this.toString()

  if pcursor.curclass\=null then
   if pcursor.curclass.classinfo.isinterface then
    signal RxError(rxt, tokens[0], 'not.allowed.in.interface')

 /** Pass processing */
 method scan(pass=int)
  if pass=0 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrNumeric', pass)
  if rxt.program.flag.diag then say '# Numeric pass'pass this.toString()
  if pass=1 then return                 -- call on pass1 is a nop

  -- pass=2...
  t2=tokens[1].type
  t3=tokens[2].type
  select
    when t2=RxToken.END  then err=1
    when t2<>RxToken.SP then err=1
    when t3<>RxToken.SYM then err=2
    when parser.iskey(tokens[2].value, 'DIGITS') then do
      err=0; form=0; setprop='setDigits'; end
    when parser.iskey(tokens[2].value, 'FORM') then do
      err=0; form=1; setprop='setForm'; end
    otherwise err=2 -- unknown
    end
  if err>0 then signal RxError(rxt, tokens[err], 'digits.or.form.expected')

  converter=rxt.converter               -- local reference

  /* get the expression or form keyword [expression evaluation deferred] */
  t4=tokens[3].type
  if t4=RxToken.END then do label defaults
    if form then do
      code=RxCode(S_LIT, RxType.STRING_TYPE, null)
      word=RexxSet().formword()
      code.javacode='"'word'"'
      code.value=word.toString()
      end
     else do
      code=RxCode(S_LIT, RxType.INT_TYPE, null)
      code.javacode=DEFAULT_DIGITS
      code.value=Integer(DEFAULT_DIGITS)
      end
    code.constant=1           -- it is a constant
    end defaults
   else /* DIGITS expression or FORM keyword expected */ do
    if t4=RxToken.SP then begin=4; else begin=3
    if form then do
      code=RxCode(S_LIT, RxType.STRING_TYPE, null)
      select
        when tokens[begin].type\=RxToken.SYM then err=begin
        when parser.iskey(tokens[begin].value, 'SCIENTIFIC') then do
          err=0
          word='scientific'
          code.javacode='"'word'"'
          code.value=word.toString()
          end
        when parser.iskey(tokens[begin].value, 'ENGINEERING') then do
          err=0
          word='engineering'
          code.javacode='"'word'"'
          code.value=word.toString()
          end
        otherwise err=begin
        end
      if err>0 then
        signal RxError(rxt, tokens[err], 'scientific.or.engineering.expected')
      endtok=tokens[begin+1]
      if endtok.type\=RxToken.END then
        signal RxError(rxt, endtok, 'junk.on.end')
      code.constant=1         -- it is a constant
      end
     else /* digits */ do
      /* Evaluate the expression */
      -- if we're outside method then we must evaluate statically
      savestatic=pcursor.curstatic
      if pcursor.curmethod=null then pcursor.curstatic=1
      converter=rxt.converter             -- local reference
      code=rxt.eparser.parseexpr(pcursor, 0, begin, null, null)
      expr=RxExpr(rxt, pcursor, NUMERIC_EXPR, code)
      if code.type=RxType.INT_TYPE then conv=null
       else do
        conv=converter.assigncost(pcursor, RxType.INT_TYPE, code.type)
        if conv.cost>rxt.program.flag.maxassign then
          signal RxError(rxt, tokens[begin], 'digits.needs.int.type',-
                         rxt.program.babel.typeString(code.type))
        end
      expr.type=RxType.INT_TYPE
      expr.conv=conv
     finally
      pcursor.curstatic=savestatic
      end
    end

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  /* Now generate code; this is static if at the class level, or dynamic
     otherwise.  Note that when static we need a new object for each
     NUMERIC instruction, so intance variables will pick up the correct
     settings. */
  -- first copy and Rexxify the code (as, for example, setDigits
  -- actually expects a Rexx value, which must be possible -- [historical]
  if expr=null then item=code.copy()
               else item=expr.code.copy()
  rxt.converter.torexx(pcursor, item, item.constant)

  if parser.level<2 then /* no method yet */ do
    -- need to generate variable always
    pcursor.curclass.uniques=pcursor.curclass.uniques+1
    sname='$'pcursor.curclass.uniques        -- settings object
    -- form the declaration.  Note minors cannot have statics until 1.2
    if pcursor.curclass.classinfo.parents=0 then atts='private static final'
     else if pcursor.curclass.classinfo.isinterface then atts='private final'
     else atts='private transient final'
    oldname=pcursor.curclass.classset        -- previous name
    if oldname=='null' then clone=''         -- fresh object
                       else clone=oldname    -- clone the previos one
    rxt.program.streamer.out(atts RxType.REXXSET_CLASS-
                             sname'=new' RxType.REXXSET_CLASS'('clone');')
    pcursor.curclass.classset=sname          -- use this from now on

    -- form the initializer.  Note minors cannot have statics until 1.2
    if pcursor.curclass.classinfo.parents=0 then initatt='static'
                                            else initatt=''
    rxt.program.streamer.out(initatt'{'pcursor.curclass.classset'.'setprop'('item.javacode');}')
    return
    end
  /* Here if in method */
  /* There will be a settings object; do change its setting */
  rxt.program.streamer.out(pcursor.curmethod.methodset'.'setprop'('item.javacode');')

 /** Interpretation */
 method interpret(cursor=RxCursor)
  -- operation here is different, depending on whether we're in prologue
  -- or not.  If we are, then we are either static code (in which case
  -- we make a Numeric object and save it) or instance code (in which
  -- case we simply use the saved object.
  -- Inside methods it's much easier .. we just update the current
  -- object as needed.

  if cursor.curprogram.flag.diag then say '# Numeric exec ' this.toString()

  if cursor.curmethod=null then do label prologue
    if cursor.curstatic then do
     if cursor.curnumer=null then cursor.curnumer=RexxSet() -- default
      else cursor.curnumer=RexxSet(cursor.curnumer)         -- clone current
     numupdate(cursor)        -- apply new setting
     numset=cursor.curnumer   -- save for instance variables
     cursor.curclass.classrunnumer=numset -- save final value for methods
     end
    else do                   -- processing instance variables
     cursor.curnumer=numset   -- re-use saved
     end
   return
   end prologue

  -- here if in a method.  A RexxSet object will exist.
  numupdate(cursor) -- update
  -- say ':numeric:' cursor.curnumer.digits cursor.curnumer.form
  return

 /** NUMUPDATE -- update the cursor object with our settings */
 method numupdate(cursor=RxCursor)
  -- We could save and directly use int values, here, at least for
  -- FORM which does not require runtime checking
  if form then
    cursor.curnumer.setForm(String code.value)
   else /* digits */ do
    if expr=null then nop     -- use the code value as is (default)
     else code=expr.evaluate(cursor)    -- re-evaluate as needed
    cursor.curnumer.setDigits(Rexx((Integer code.value).intValue()))
    end
  return
