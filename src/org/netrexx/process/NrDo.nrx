/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrDo                                                               */
/*                                                                    */
/*   An object that represents a parsed Do clause.                    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 1996.06.10 Initial                                                 */
/* 1997.07.17 Add endmain code generation                             */
/* 1997.11.06 Omit javalabel block if no block label                  */
/* 2000.02.24 Add interpretation                                      */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

/**   An object that represents a parsed Do clause.                    */
class NrDo extends NrBlock implements RxClauseParser uses RxCode

 properties private
  rxt       =RxTranslator          -- root
  parser    =RxParser              -- local reference
  tokens    =RxToken[]             -- local reference
  labelchunk=int                   -- insert point for label code
  loopitem  =NrLoop                -- divert us to LOOP [kindness]

 /** Construct an object from the current clause */
 method NrDo(newrxt=RxTranslator)
  super(newrxt)
  rxt      =newrxt                           -- the boss
  parser   =rxt.program.parser               -- our parser
  tokens   =parser.cursor.curclause.tokens   -- local reference

 /** Pass processing */
 method scan(pass=int)
  if pass<2 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrDo', pass)
  parser.pushlevel('DO')                -- new level

 /* Apart from initialization, /*select*/ and error messages, this
    is identical to NrSelect.nrx -- could share code */
  /* Alter state before potential error messages */


  /* Parse the keywords and their values */
  n=0
  loop forever
    n=n+1; tok=tokens[n]; tn=tok.type
    if tn=RxToken.END then leave
    if tn==RxToken.SP then iterate
    if tn<>RxToken.SYM then signal RxError(rxt, tok, 'do.keyword.expected')
    select
      when parser.iskey(tok.value, 'LABEL') then do
        if parser.thislevel.javalabel\=='' then
          signal RxError(rxt, tok, 'duplicate.keyword')
        n=n+1; tok=tokens[n]; tn=tok.type
        if tn<>RxToken.SP then signal RxError(rxt, tok, 'blank.expected')
        n=n+1; tok=tokens[n]; tn=tok.type
        if tn<>RxToken.SYM then signal RxError(rxt, tok, 'label.expected')
        parser.checkduplabel(tok.value, tok)
        parser.thislevel.blocklabel=tok.value
        -- make and save Java-safe label
        outlabel=Rexx tok.value
        if rxt.classer.javakey(outlabel) then outlabel='$'outlabel
        parser.thislevel.javalabel=outlabel
        end /* LABEL */
      when parser.iskey(tok.value, 'PROTECT') then do
        if super.protcode\==null then signal RxError(rxt, tok, 'duplicate.keyword')
        n=n+1; tok=tokens[n]; tn=tok.type
        if tn=RxToken.SP then do; n=n+1; tok=tokens[n]; tn=tok.type; end
        term=rxt.tparser.parseterm(parser.cursor, n, 1) -- is an RHS reference
        next=term.endoff+1
        if term.group=T_UNKNOWN then signal RxError(rxt, tokens[n], 'unknown.variable')
        if term.type.isPrimitive() then
          signal RxError(rxt, tok, 'cannot.protect.primitive',-
                         rxt.program.babel.typeString(term.type))
        if term.type.isNull() then
          signal RxError(rxt, tok, 'cannot.protect.null')
        /* If a type then we have to handle it indirectly */
        /* [don't do this for now, as would need to catch ClassNotFoundException] */
        /* if term.group=S_TYPE then term.javacode='Class.forName("'term.termsig'")' */
        if term.group=S_TYPE then signal RxError(rxt, tok, 'cannot.protect.type')
        parser.addexceptions(1, term.exceptions, tok, 1) -- to level above
        super.protcode=term                  -- save in NrBlock
        parser.cursor.curclause.startprot=1  -- and add alert
        n=next-1 /* will bump */
        end
      otherwise
        -- signal RxError(rxt, tok, 'do.keyword.expected')
        RxWarn(rxt, tok, 'wrong.do.syntax.retry')
        parser.scraplevel()-- discard the level that we added
        loopitem=NrLoop(rxt) -- and give it a retry as a LOOP
        parser.cursor.curclause.lookaside=loopitem -- replace the NrDo object
        loopitem.scan(rxt.pass)
        return           -- [no more joy here]
      end
    end /* keywords loop */

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  if loopitem\=null then do        -- we are really a LOOP
    loopitem.generate()
    return
    end

  -- add "synchronized" start if needed [before Try]
  if super.protcode\=null then
    rxt.program.streamer.outpart('synchronized('super.protcode.javacode'){')
   else
    rxt.program.streamer.outpart('') -- place to hang trychunk
  parser.thislevel.trychunk=rxt.program.streamer.chunks -- record where we might add "try"
  rxt.program.streamer.outpart('{')
  rxt.program.tracer.traceclause(parser.cursor.curclause) -- add trace code if needed
  -- [don't need to defer label for DO, but keeps code similar to LOOP/SELECT]
  labelchunk=rxt.program.streamer.chunks     -- record where we might add label
  rxt.program.streamer.out('')               -- for formatting

 /** endinitial -- end the initial DO block, code generation */
 method endinitial
  -- only depends on whether we need to label it (due to LABEL)
  if parser.thislevel.javalabel\=='' then do
    -- add label starter to group begin
    rxt.program.streamer.outinsertpart(parser.thislevel.javalabel':do{', labelchunk)
    -- .. and add ending
    parser.indention=parser.indention-1
    rxt.program.streamer.outpart('}while(false);', 1)
    parser.indention=parser.indention+1
    end
  return

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  -- PROTECT is handled at the NrBlock level

  rxt.interpreter.pushlevel(cursor)     -- start the DO block

