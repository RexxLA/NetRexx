/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2001.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NetRexxC                                                           */
/*                                                                    */
/*  A command shell to run the translator and compile.                */
/*                                                                    */
/* Translate and compile one or more NetRexx programs.                */
/*                                                                    */
/* use as:  NETREXXC hello[.nrx] goodbye[.nrx]                        */
/*                                                                    */
/*   which will use the NetRexx translator to translate hello.nrx     */
/*     to hello.java                                                  */
/*   then will use JAVAC to compile hello.java to hello.class         */
/*   and then repeats this for each file listed (unless error).       */
/*                                                                    */
/* Output files are placed in the current directory (they do not      */
/* overwrite files in the classes hierarchy, unless that's the        */
/* current directory).                                                */
/*                                                                    */
/* If any translate or compile fails, all processing stops.           */
/*                                                                    */
/* Any NetRexxT (translator) flags may be used, along with the        */
/* following extra flags (and their inverses):                        */
/*                                                                    */
/*   -arg       = take rest of command line as arguments; imply -exec */
/*   -nocompile = do not compile, and retain the .java file           */
/*   -noconsole = do not display messages to console                  */
/*   -exec      = interpret the first program                         */
/*   -keep      = keep the java file after successful compilation (as */
/*                xxx.java.keep).  This is assumed if an error during */
/*                javac compilation.                                  */
/*   -prompt    = prompt after first processing                       */
/*   -savelog   = save messages to NetRexxC.log                       */
/*   -time      = display timings if successful.                      */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 1996.06.14 Initial                                                 */
/* 1996.07.03 Add specific usage description                          */
/* 1996.12.08 Add main(Rexx) returns int, for call-from-Java          */
/* 1997.04.20 Interface to translator is now an array of filenames    */
/* 1998.05.18 Add -console and -savelog                               */
/* 1999.08.13 Allow ".. .." in main(Rexx,p); add main2(String[],p)    */
/* 2000.02.08 Extend help to list all options                         */
/* 2000.03.22 Add -prompt loop [AA 23 BHX-ORD]                        */
/* 2000.10.16 Properly ignore -savelog if Printwriter specified       */
/* 2011.08.20 allow compiling programs from memory strings - KK       */
/* 2011.08.22 add option to supress rename of java files to .keep - KK*/
/* 2012.07.31 mod for select of ecj compiler  *rvj*                   */
/* 2013.09.18  eliminate prob where getImplementationVersion returns  */
/* null so compiler will run unjared (also fix bad build #105)  -- KK */
/* 2015.05.02 switch javac use to jsr199 api per issue #90 -- KK --   */
/* 2015.05.15 reformat build info -- KK -- Kermit                     */
/* 2015.05.15 only display options on specific -help request -- KK -- */
/* 2015.06.05 #127 - classpath operand does not handle * wildcard KK  */
/* 2015.06.11 #134 time output needs correct compiler name -- KK      */
/* 2015.06.11 fix nullpointer message in findjavacompiler -- KK       */
/* 2019.08.05 add clgMain to compile, load and go for main method rvj */
/* 2021.01.15 add option to allow ADDRESS instructions -- MRE         */
/* 2022.11.03 add option for implicit uses -- MRE                     */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs
import javax.tools.

class NetRexxC
  
  properties private constant
  logfilename='NetRexxC.log'
  
  properties public
  -- variables corresponding to our flags
  argarray	   = String[] null           -- arguments for -exec [iff not null]
  compile	   = boolean 1               -- compile if translation OK
  console	   = boolean 1               -- display to console
  color  	   = boolean 1               -- color in messages
  exec		   = boolean 0               -- interpret after parsing
  keep		   = boolean 0               -- keep the java file
  prompt	   = boolean 0               -- prompt after first execution
  time		   = boolean 0               -- display timings
  savelog	   = boolean 0               -- need PrintWriter
  warnexit0	   = boolean 0               -- exit with zero return code on warnings
  keepasjava	   = boolean 0               -- keep java output and do not rename it to .keep
  javac		   = boolean 0               -- prefer javac compiler if available
  ecj		   = boolean 0               -- prefer ecj compiler if available
  helpreq	   = boolean 0		           -- explicit help request? 2015-05-15 -KK-
  address	   = boolean 1               -- prefer no address processing 2021-01-15 MRE -do prefer rvj 
  implicituses     = boolean 1               -- prefer implicit uses of RexxDate, RexxStream and RexxRexx --MRE
  deps             = 0                       -- prefer no dependencies listing
					     -- next two are set by parseline
  files		   = Vector(10)              -- collects file specifications
  flags		   = Vector(10)              -- collects translator flags
  
  -- others
  compileexplicit  = boolean 0	             --	record if compile was explicitly requested
  javaexplicit	   = boolean 0		     -- record if java was explicitly requested
  crossrefexplicit = boolean 0	             --	record if crossref was explicitly requested
  madelog	   = boolean 0               -- 1 if we made the logfile
  testflag	   = RxFlag()                -- used only for testing if flags valid
  usageone	   = boolean 1               -- 1 to show general usage information
                                             -- 0 after prompting
  
  classpath	   = String                  --	allows classpath to be passed as an argument
  
  properties private static
  programstrings = String[]                  --	allows programs to be passed in memory strings
  classlist=java.util.List		     -- allow return of class files to caller in memory
  
  /** get here when called from java.exe */
  method main(arg=String[]) static
    exit main2(arg, null)
    
  /** standard constructor for private instance */
  method NetRexxC inheritable
    return
    
  /** public call-from-Java entry,
     Arg1 is command argument string which has words which are flags or
     file specifications, or "...." for a file specification which
     may have embedded blanks,
     Arg2 is a String containing a program in memory,
     Arg3 is PrintWriter file (forces -savelog if specified)
   */
  method main(arg=Rexx, programstring=String, logfile=PrintWriter null, classfiles=java.util.List null) constant returns int
    return main(arg,[String programstring],logfile,classfiles)

  /** method compile-load-and-go, no translator messages produced
   * except when compile fails 
   * arg is the name of the class of which the main method is called with no args
   */
  method clgMain(arg=Rexx, programstring=String) constant
    if arg==null then arg='tempnm'
    classList = ArrayList()
    rc = main(arg' -nologo -verbose0',[String programstring],null,classList)
    if rc==2 then do
      rc = main(arg'',[String programstring],null,classList)
      say "Compilation failed."
      exit
    end
    mapLoader = RxMapClassLoader classList.get(0)
    do
      c = mapLoader.findClass(arg)
      paramTypes = Class[1]
      paramTypes[0] = String[].class
      methodName = String "main"
      m = c.getMethod(methodName, paramTypes)
      params = Object[1]
      params[0] = String[0]
      m.invoke(null, params)
    catch e=Exception
      say 'Reflection exception encountered:'
      say e.getMessage()
    end

    return rc
    
  /** public call-from-Java entry,
     Arg1 is command argument string which has words which are flags or
     file specifications, or "...." for a file specification which
     may have embedded blanks,
     Arg2 is a array of Strings containing programs in memory (no more than the number of file names passed in Arg1),
     Arg3 is PrintWriter file (forces -savelog if specified)
   */
  method main(arg=Rexx, programarray=String[], logfile=PrintWriter null, classfiles=java.util.List null) constant returns int
    
    programstrings=programarray	--	save array of program strings 
    classlist=classfiles
    return main(arg,logfile)
    
  /** public call-from-Java entry,
     Arg1 is command argument string which has words which are flags or
     file specifications, or "...." for a file specification which
     may have embedded blanks,
     Arg2 is PrintWriter file (forces -savelog if specified)
   */
  method main(arg=Rexx, logfile=PrintWriter null) constant returns int
    -- Convert words into a string array then call the string array
    -- entry point.
    words=Vector(10)
    loop while arg\==''
      parse arg argword arg  -- get next word
      if argword.left(1)=='"' then do     -- handle quoted word(s)
	arg=argword.substr(2) arg         -- reconstitute without leading '"'
	if arg.pos('"')=='0' then
          say 'Quote " assumed at end of argument string'
	parse arg argword '"' arg     -- works for end case like 'CD'
      end
      str=argword.toString()
      words.addElement(str)
    end
    array=String[words.size()]         -- make correct-sized array
    words.copyInto(array)            -- .. and copy the references
    return main2(array, logfile)
    
  /** public call-from-Java entry,
   * Arg1 is array of argument strings (each containing a flag or a file
   * specification, which may have embedded blanks),
   * Arg2 is a array of Strings containing programs in memory
   * (no more than the number of file names passed in Arg1),
   * Arg3 is PrintWriter file (forces -savelog if specified),
   *-- this cannot be called just 'main' as it then clashes with the
   *-- primary entrypoint
   */
  method main2(arg=String[], programarray=String[], logfile=PrintWriter null) constant returns int
    programstrings=programarray	-- save array of program strings 
    return main2(arg,logfile)
    
  /** public call-from-Java entry,
     Arg1 is array of argument strings (each containing a flag or a file
     specification, which may have embedded blanks),
     Arg2 is PrintWriter file (forces -savelog if specified),
    -- this cannot be called just 'main' as it then clashes with the
    -- primary entrypoint
   */
  method main2(arg=String[], logfile=PrintWriter null) constant returns int
    it=NetRexxC() -- make private object

    rc = int it.process(arg, logfile)
    if it.warnexit0 then if rc=1 then return 0
    return rc
    
    
  /** actual processing is done here, with a private copy of flags, etc. */
  -- arguments as main2
  method process(arg=String[], logfile=PrintWriter null) private returns int
    rt=Runtime.getRuntime()                         -- runtime instance
    
    translator=RxTranslator()                       -- construct translator
    
    parseline(arg)    -- collect initial flags and file specification
    
    translator.setkeeps(keep,keepasjava,classlist,javac,ecj)
    translator.setaddress(address)
    translator.setimplicituses(implicituses)
    translator.setdeps(deps)
    
    -- need to set java.class.path property and restore it later
    currentClassPath = System.getProperty("java.class.path")
    if classpath\=null then do
      validateClassPath()
      currentProperties = System.getProperties()
      currentProperties.put("java.class.path", classpath)
    end
    
    javacompiler=javax.tools.ToolProvider.getSystemJavaCompiler()
    javaloader=this.getClass().getClassLoader()
    if javaloader.getParent()=null then javaloader=Thread.currentThread().getContextClassLoader()
    do
      ecjclass=javaloader.loadClass('org.eclipse.jdt.internal.compiler.tool.EclipseCompiler')
    catch e=Exception
      ecjclass=null
    end
    
    compilerChoice = Rexx(System.getProperty("nrx.compiler","javac"))
    parse compilerChoice compilerChoice javaoptions
    if compilerChoice\=="javac" & compilerChoice\=="ecj" then compilerChoice="javac"
    if javac then compilerChoice="javac"
    if ecj then compilerChoice="ecj"
    
    if (compilerChoice=="javac" & javacompiler=null) | (compilerChoice=="ecj" & ecjclass=null) then
      do
	lookforit=findjavacompiler()
	if lookforit=="notfound" then 
	  if javacompiler=null & ecjclass=null then say "no java compiler was found" ; else nop
	  else do
	    currentThreadClassLoader = Thread.currentThread().getContextClassLoader()
	    --// Add the jar to the classpath and chain the current thread classloader
	    newClassLoader = URLClassLoader([File(lookforit).toURI().toURL()], currentThreadClassLoader)
	    --// Replace the thread classloader - assumes you have permissions to do so
	    Thread.currentThread().setContextClassLoader(newClassLoader)	
	  catch e=Exception
	    say e
	  end
      end

    if color then NrAnsi(boolean 1)
    else NrAnsi(boolean 0)

    langs=[Rexx 'Nr'] -- languages supported. There were more.
    
    if \translator.setlanguages(langs) then usage() -- select languages
    else loop label process forever                -- OK languages
    filecount=files.size()
    if filecount=0 then usage()    -- flags summary, if no files
    else do label havefiles       -- have some files to process
      if savelog then                        -- need a PrinterWriter file
	if logfile=null then do label needlog -- .. and none supplied
          lfile=File(logfilename)
          lfstream=FileOutputStream(lfile)
          logfile=PrintWriter(lfstream, 1)
          madelog=1                 -- remember that we made it
        catch IOException
          console=1                 -- revert to console
          say 'Error occurred while opening '''logfilename''''
        end needlog
      
      if console then outfile=System.out
      else outfile=null
      
      -- copy translator flags & files into arrays
      filearray=Rexx[filecount]    -- set up array of file specifications
      files.copyInto(filearray)    -- ..
      
      flagcount=flags.size()
      flagarray=Rexx[flagcount]    -- set up array of flags
      flags.copyInto(flagarray)    -- ..
      
      ptime=long 0                 -- parse time
      etime=long 0                 -- execution time
      ctime=long 0                 -- compilation
      
      if programstrings\=null then do
      	programsources=RxSource[filecount]  -- create array of program sources 
      	loop i=0 for filecount
      	  tf=RxFileReader(translator)
      	  if i>=programstrings.length then tf.openfile(Rexx(filearray[i]))
	  else tf.openfile(Rexx(filearray[i]),programstrings[i])
	  programsources[i]=tf
      	end
      end
      
      -- carry out parsing, optionally with translation
      if time then pstart=System.currentTimeMillis() -- timer
      if programstrings\=null then ok=translator.translate(flagarray, programsources, outfile, logfile, \exec)
      else -
	ok=translator.translate(flagarray, filearray, outfile, logfile, \exec)
      if time then ptime=System.currentTimeMillis()-pstart
      
      if exec & ok then do                        -- interpretation wanted
        if time then estart=System.currentTimeMillis()
        translator.exec(argarray)                 -- .. so interpret
        if time then etime=System.currentTimeMillis()-estart
        -- note interpretation success has no effect on compilation
      end /* interpretation */
      
      if compile & ok then do                     -- compile wanted
        if time then cstart=System.currentTimeMillis()
        translator.compile(0)                     -- .. so compile
        if time then ctime=System.currentTimeMillis()-cstart
      end /* compilation */
      
      translator.dispose(keep, keepasjava)     -- dispose of .java files
      translator.summary(exec)                 -- summarise
      
      if time then do
        t10=tenth(ptime)
        e10=tenth(etime)
        c10=tenth(ctime)
        tot=t10.OpAdd(null, e10).OpAdd(null, c10)
        wid=tot.length()
        say                           'Translate time:' t10.right(wid)'s'
        if exec & etime>0    then say 'Interpret time:' e10.right(wid)'s'
        if compile & ctime>0 then say  Rexx(translator.compilerChoice).right(9) 'time:' c10.right(wid)'s'
	if etime>0 | ctime>0 then say '    Total time:' tot.right(wid)'s'
      end -- time
    end havefiles
    
    -- we're done unless prompting (and not exiting)
    if \prompt, translator.exiting then leave process
    
    /* Begin prompt sequence */
    usageone=0                               -- no longer show all flags
    loop label prompt
      say "\nEnter new files and additional options, '=' to repeat, 'exit' to end:"
      rt.gc()                                -- good moment to garbage-collect
      response=ask
      if response = null then leave process
      if response.OpNotEq(null, '') then leave -- something to process
      usage()
    end prompt
    RexxTrace.reset()      -- reset trace flagging
    if response.OpEq(null, '=') then iterate -- simply repeat
    if response.OpEq(null, 'exit') then leave process -- done
    rwords=String[response.words().toint()] -- otherwise convert string of words to an array of Strings
    loop i=0 for rwords.length
      parse response word response
      rwords[i]=word.toString()
    end i
    parseline(rwords)    -- flags accumulate; new files replace old
    end process
    
    if logfile\=null then do
      if logfile.checkError() then
	say 'Error occurred while writing '''logfilename''''
    logfile.flush()
    if madelog then logfile.close()
    end
    
    -- need to reset java.class.path property
    if classpath\=null then
      currentProperties.put("java.class.path", currentClassPath)
    
    programstrings=null	-- clear memory of any program strings in case we are called again
    
    return translator.getexitvalue()
    
  method validateClassPath
    cpr=Rexx(classpath)
    cpr2=Rexx ""
    ps=File.pathSeparatorChar
    cpr=cpr.strip("b",'"')
    loop while cpr\==""
      parse cpr nextpath (ps) cpr
      nextpath=nextpath.strip("b",'"')
      if nextpath=="." then cpr2=cpr2||ps||nextpath
      else do
	nextpathcheck=File(nextpath)
	if nextpathcheck.exists() then cpr2=cpr2||ps||nextpath
	else do
	  if "\\* /*".pos(nextpath.right(2))>>0 | "\\** /**".pos(nextpath.right(3))>>0  then cpr2=cpr2||ps||wildcard(nextpath)
	  else say "Warning: classpath entry does not exist and has been dropped:" nextpath
	end
      end
    end
    classpath=cpr2.strip("b",ps).toString()
    
  method wildcard(dirstring, passback=Rexx "") returns Rexx
    ps=File.pathSeparator; fs=File.separator
    recursive=(dirstring.right(2)=="**")
    basename=dirstring.changestr("/**","").changestr("\\**","").changestr("/*","").changestr("\\*","")
    basedir=File(basename)
    contentlist=basedir.list()
    loop i=0 for contentlist.length
      if ".jar .JAR".pos(Rexx(contentlist[i]).right(4))>>0 then passback=passback||ps||basename||fs||contentlist[i]
      if \recursive then iterate
      possibledir=File(basename||fs||contentlist[i])
      if possibledir.isDirectory() then passback=passback||ps||wildcard(basename||fs||contentlist[i]||fs"**")
    end
    return passback.strip("b",ps)
    
  method findjavacompiler returns Rexx
    do
      ps=File.pathSeparator; fs=File.separator
      testpath=classpath
      if testpath\==null then
	loop while testpath\==""
	  parse testpath testfile (ps) testpath
	  if testfile=="." then iterate
	  fname=testfile.substr(testfile.lastpos(fs).toint()+1) 
	  if "tools.jar NetRexxF.jar".pos(fname)>>0 | (fname.left(3)=="ecj" & fname.right(4)==".jar") then return testfile
	end
      dir=Class.forName('org.netrexx.process.NetRexxC').getProtectionDomain().getCodeSource().getLocation().getPath()
      if dir.substring(0,1)==File.separator then dir=File(dir).getParent() --*nix is not winblows!
      else dir=File(dir.substring(1)).getParent()
      candidate=checkdirforcompiler(dir)
      if candidate\=="nope"then return candidate	
      dir=File(dir).getParent()         -- up one from NetRexxC loc
      candidate=checkdirforcompiler(dir)
      if candidate\=="nope"then return candidate			
      dir=System.getProperty("user.dir") --current directory
      candidate=checkdirforcompiler(dir)
      if candidate\=="nope"then return candidate
      java_home= System.getProperty("java.home")
      candidate=checkdirforcompiler(java_home)
      if candidate\=="nope"then return candidate
      phone_home=File(java_home).getParent()
      candidate=checkdirforcompiler(phone_home)
      if candidate\=="nope"then return candidate		
      grand_home=File(phone_home).getParent()
      candidate=checkdirforcompiler(grand_home)
      if candidate\=="nope"then return candidate				
    catch e=Exception
      --say e
    end
    return "notfound"
    
  method checkdirforcompiler(base=String) static returns Rexx
    fs=File.separator
    bf=File(base)
    if \bf.isDirectory() then return "nope"
    conlist=bf.list()
    loop i=0 for conlist.length
      if Rexx(conlist[i]).right(4)==".jar" then
	do
	  can=Rexx(conlist[i])
	  if can=="tools.jar" then return base||fs||can 
	  if can=="NetRexxF.jar" then return base||fs||can
	  if can.substr(1,3)=="ecj" then return base||fs||can
	end
    end
    if bf.getParent()=null then return "nope" -- better not to scan whole filesystem			
    loop i=0 for conlist.length
      tf=File(base||fs||conlist[i])
      if tf.isDirectory() then 
	do
	  rescan=checkdirforcompiler(tf.getPath())
	  if rescan\=="nope" then return rescan
	end
    end		
    return "nope"
    
    /* TENTH -- convert ms to 0.1s */
	     -- this could use format()
  method tenth(n=long) constant returns Rexx private
    n=(n+50)%100           -- round to tenths
    s=n%10; d=n//10        -- split
    return s'.'d
    
  /** PARSELINE -- collect the flags and file specifications from string
     Arg1 is the string array to parse
     This is a list of option flags (-xxx) and file specifications
     files and flags are updated.  Flags accumulate, new files (if any)
     replace all old files.
   */
  method parseline(arg=String[]) private
    newfiles=Vector(10)              -- collects new file specifications
    loop a=0 to arg.length-1
      argword=Rexx arg[a]            -- get next word
      if argword.left(1)\=='-'       -- not a flag
	then newfiles.addElement(argword) -- but a file to compile
      else /* a flag */ do
      arglow=argword.substr(2).lower()    -- drop '-' and lowercase
      select
        when arglow=='help' then do
	  helpreq=1
	end
	when arglow=='-help' then do
	  helpreq=1
	end      	
        when arglow=='nocompile' then do
	  compile=0
	  keep=1
	end
        when arglow=='compile'   then do
	  compile=1
	  compileexplicit=1
	end
        when arglow=='exec'      then do
	  exec=1
	  if \compileexplicit then compile=0 
	  if \javaexplicit then flags.addElement(Rexx("-nojava")) 
	  if \crossrefexplicit then flags.addElement(Rexx("-nocrossref")) 
	end
        when arglow=='noexec'    then exec=0
        when arglow=='java'      then do
	  javaexplicit=1
	  flags.addElement(Rexx("-java"))
	end
        when arglow=='crossref'  then do
	  crossrefexplicit=1
	  flags.addElement(Rexx("-crossref"))
	end
        when arglow=='keep'        then keep=1
        when arglow=='nokeep'      then keep=0
        when arglow=='time'        then time=1
        when arglow=='notime'      then time=0
        when arglow=='savelog'     then savelog=1
        when arglow=='nosavelog'   then savelog=0
        when arglow=='console'     then console=1
        when arglow=='noconsole'   then console=0
	when arglow=='color'       then color=1
	when arglow=='nocolor'     then color=0
        when arglow=='prompt'      then prompt=1
        when arglow=='noprompt'    then prompt=0
	when arglow=='warnexit0'   then warnexit0=1
	when arglow=='nowarnexit0' then warnexit0=0
	when arglow=='keepasjava'  then do
	  keepasjava=1
	  keep=1
	end
	when arglow=='nokeepasjava' then keepasjava=0
	when arglow=='javac' then do;javac=1;ecj=0;end	-- can't prefer both javac and ecj compiler KK
	when arglow=='ecj' then do;javac=0;ecj=1;end	-- can't prefer both javac and ecj compiler KK
	when arglow=='noaddress' then do; address=0; end  -- explicitely set address flag to change parser MRE
	when arglow=='address' then do; address=1; end    
	when arglow=='noimplicituses' then do; implicituses=0; end  -- no implicit uses MRE
	when arglow=='implicituses' then do; implicituses=1; end  
	when arglow=='nodeps' then do; deps=0; end  -- no deps listing RVJ
	when arglow=='deps' then do; deps=1; end  
	  
	when arglow=='classpath' | arglow=='cp' then do
   	  a=a+1
   	  if a<arg.length then do
   	    classpath=arg[a]
   	  end
   	end   		
        when arglow=='noarg' then do
          exec=1    -- implied
	  if \compileexplicit then compile=0 
	  if \javaexplicit then flags.addElement(Rexx("-nojava")) 
	  if \crossrefexplicit then flags.addElement(Rexx("-nocrossref"))           
          argarray=String[0]
        end
        when arglow=='arg' then do
          exec=1    -- implied
	  if \compileexplicit then compile=0 
	  if \javaexplicit then flags.addElement(Rexx("-nojava")) 
	  if \crossrefexplicit then flags.addElement(Rexx("-nocrossref")) 
          -- remaining words become argstring array
          alen=arg.length-a-1
          argarray=String[alen]
          loop i=0 for alen
            argarray[i]=arg[a+1+i]
          end
          leave a -- no more flags or files
        end
        otherwise
          if \testflag.setFlag(arglow) then
            say ' +++ Warning: Unknown command option '''argword''' ignored'
          else do
            if arglow=='nojava' then compile=0    -- economy
            flags.addElement(argword)   -- It's OK, but not one of ours
          end
      end
    end
end a
if newfiles.size()>0 then files=newfiles
return

  /** USAGE -- display usage hints */
  method usage returns int private
    if usageone then do
      if this.getClass().getPackage()\=null then vv=this.getClass().getPackage().getImplementationVersion()
      else vv=''
      if vv=null then vv=''
      parse vv . . . vv
      nv = NrVersion()

      say nv.getLogo() NrAnsi.ANSI_BLUE||nv.getFullVersion()||NrAnsi.ANSI_RESET vv
      say nv.getCopyright()'\n'
      say 'Arguments are: in_file_specification... [-option]...\n'
    end
    if \helpreq then do; say 'Use "--help" to show all options'; return 0;end
      say 'In brief, NetRexxC-specific options are:\n'
      say '  -arg words     -- interpret; remaining words are arguments'
      say '  -classpath     -- specify a classpath'
      say '  -cp            -- short for classpath'
      say '  -compile       -- compile (default; -nocompile implies -keep)'
      say '  -color         -- use color in translator messages'
      say '  -console       -- display messages on console (default)'
      say '  -deps          -- list dependencies'
      say '  -exec          -- interpret with no argument words'
      say '  -ecj           -- prefer ecj (eclipse) compiler if available'
      say '  -implicituses  -- use Classic Rexx compatibility option'
      say '  -javac         -- prefer javac compiler if available'
      say '  -keep          -- keep any completed .java file (as xxx.java.keep)'
      say '  -keepasjava    -- keep any completed .java file (as xxx.java)'
      say '  -prompt        -- prompt for new request after processing'
      say '  -savelog       -- save messages in NetRexxC.log'
      say '  -time          -- display timings'
      say '  -address       -- allow ADDRESS instruction'
      say '  -warnexit0     -- exit with a zero returncode on warnings\n'
      say "Any NetRexx options may also be added; these are:\n"
      RxFlag.usage()
      say "\nAll options may have prefix 'no' added for the inverse effect."
      say '\nPlease see the NetRexx Language definition at'
      say 'http://netrexx.org/documentation.nsp for more details.'
      return 0
      