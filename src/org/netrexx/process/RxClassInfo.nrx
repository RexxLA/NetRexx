/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 1996, 2001.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxClassInfo                                                        */
/*                                                                    */
/*   An object that describes what we know about a class.             */
/*                                                                    */
/*   If imported, all we know about the class is the name and package */
/*   and the associated entry (file or zipentry) (an import is        */
/*   simply a short-name registration).                               */
/*   Later, if the class is referenced, it is loaded and much more    */
/*   information is filled in, for rapid access.                      */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1997.03.28 Initial  [AA 174, RDU-LGW]                              */
/* 1997.04.06 Add field dictionary                                    */
/* 1997.04.28 'Nickable' concept -- may be referred to by short name  */
/* 1997.07.17 Impinfos is lookaside for list of interface names       */
/* 1998.03.15 Support minor classes (full names)                      */
/* 2000.04.07 Allow lookaside of class binary image                   */
/* 2001.04.01 Add invalidation flag ('hidden')                        */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

/**   An object that describes what we know about a class.             */
class RxClassInfo
 properties public
  next     =RxClassInfo null       -- linked-list pointer [for Pool]
  type     =RxType                 -- class type (signature)
  lowname  =String                 -- lowercase full name, for search
  shortname=String                 -- shortest class name (unqualified)
  fullname =String                 -- class name (with parents, unqualified)
  packname =String                 -- package name [may be null string]
  superinfo=RxClassInfo null       -- superclass information object
                                   -- [may be null for java.lang.Object or
                                   -- after error or while still unresolved]
  -- only one or other of these next two will be non-null
  impnames    =String[0]           -- array of interface names (fully qualified)
  impinfos    =RxClassInfo[]       -- array of resolved interfaces (may
                                   -- include null entries if classes missing)
  fields      =Hashtable null      -- the fields dictionary
  proplist    =Vector null         -- ordered list of property fields
  methlist    =Vector null         -- ordered list of method fields
  parents     =int 0               -- parents count (dependency depth)
  localclass  =RxClass null        -- associated class clause object [locals only]
  classid     =int                 -- unique ID of the class (>0 iff local,
                                   -- 0 if not local)
  parentinfo  =RxClassInfo null    -- parent class object [set for locals only]
  minors      =int 0               -- count of immediate Minor classes [all classes]
  children    =Vector null         -- immediate Minor children [RxClassInfo]
                                   --   [set for local classes only]
                                   --   [enable code in Classer if needed]
  fileitem    =Object              -- associated binary file [ZipFile/File] or Path -- MRE
  entry       =Object              -- associated binary entry [if ZipFile]
  nickable    =boolean 0           -- 1 if shortref allowed
  explicit    =boolean 0           -- 1 if explicitly imported by full name
  importer    =RxProgram           -- importer program [null if 'global']
  ambcheck    =boolean 0           -- check for ambiguous required
  ambiguous   =boolean 0           -- class is ambiguous
                                   -- [only valid after FIND]
  loaded      =boolean 0           -- class has been loaded
  hidden      =boolean 0           -- class has been hidden (by a local class)
  local       =boolean 0           -- class is a local class (in this program)
  implied     =boolean 0           -- class is a local class, implied
  ispublic    =boolean 0           -- class is a public class
  isabstract  =boolean 0           -- class is an abstact class
  isadapter   =boolean 0           -- class is an adapter class
  isfinal     =boolean 0           -- class is a final class
  isinterface =boolean 0           -- class is an interface class
  isdeprecated=boolean 0           -- class is deprecated
  isdependent =boolean 0           -- class is a dependent (member) class
  isallpublic =boolean 0           -- all non-private methods and
                                   -- .. properties are public

  -- The following are used for interpretation only.  The image of
  -- non-local files is saved only if -exec is used; proxies are only
  -- created then too.
  imagedata   =byte[]              -- binary image of the class
  initialized =boolean 0           -- 1 once class has been initialized
  classobject =Class null          -- Class object, once defined
                                   -- [access only via getClassObject below]

 /** Construct a new class information object
    Arg1 is the package in which the class resides (may be '')
    Arg2 is the full name of the class (may have parents and dots)
    Arg3 is original file (file or zipfile) for the class
    Arg4 is original entry (zipentry) for the class
    Arg5 is 1 if created as a result of real or implied IMPORT
    Arg6 is importer program (iff Arg4=1); null otherwise or if implied
            (default) import
    Arg7 is 1 if the class was imported explicitly (including class name)
    Syntax of Arg2 is assumed to be valid.
    */
 method RxClassInfo(p=String, n=String, f=Object, e=Object,-
                    i=boolean, r=RxProgram, exp=boolean)
  packname=p; fullname=n; fileitem=f; entry=e
  nickable=i; importer=r; explicit=exp
  lowname=n.toLowerCase()
  if p.length()=0 then type=RxType(null, n, 0)
                  else type=RxType(p, n, 0)
  ld=n.lastIndexOf(int(char '.'))  -- is it a minor class?
  if ld=-1 then shortname=n        -- no
   else do label minor
    shortname=n.substring(ld+1, n.length())         -- shortname is last part
    parents=Rexx(fullname).countstr('.').toint()    -- depth is number of dots
    end minor
  return

 /** The field dictionary is implemented as a hash table:
    key:   the lowercase name of the field (regardless of the setting of
           strictcase -- consider mixed strictcase/nostrictcase
           programs)
    value: an array of RxField objects that match the field name
           (caseless comparision)

    Fields are added to the dictionary using registerfield, and are
    looked up using getfieldarray, which returns the stored array.

    Later we'll probably optimize with a registerfieldarray.


    Registerfield -- add field to dictionary for class
    Arg1 is key
    Arg2 is the field object for the field
    returns int -- the number of fields known with this name
    */
 method registerfield(key=String, field=RxField) returns int
  if fields=null then do                     -- first register call
    fields=Hashtable(25)
    proplist=Vector(5)
    methlist=Vector(20)
    end
  -- add the field to simple ordered lists
  if field.isMethod() then methlist.addElement(field) -- add to methods list
                      else proplist.addElement(field) -- add to properties list

  -- add the field to hashed dictionary
  obj=fields.get(key)
  if obj=null then do                        -- first field
    fa=RxField[1]
    end
   else /* already some fields with this key */ do
    faold=RxField[] obj
    fa=RxField[faold.length+1]
    System.arraycopy(faold, 0, fa, 0, faold.length)
    end
  fa[fa.length-1]=field
  fields.put(key, fa)                        -- [displaces old array]
  return fa.length

 /** getfieldarray -- get field array, by name
    Arg1 is key
    returns array of matching RxField objects, or null if not found
    */
 method getfieldarray(key=String) returns RxField[]
  if fields=null then return null
  obj=fields.get(key)
  if obj=null then return null
  return RxField[] obj

 /** return the Java Class object for this class
    Arg1 is the class loader to be used, null for default
    returns null if class not found (e.g., erased)

    Note that this must be used for all access to the class object other
    than by the loader (to avoid redefinition), to ensure it is properly
    initialized before use.

    */
 -- can't call it getClass, as Object.getClass is final
 method getClassObject(loader=ClassLoader null) returns Class
  -- note that we need a 'real' forName call to initialize the class.
  if \initialized then do
    classobject=type.getClassObject(loader)
    initialized=1        -- indicate it's ready for action
    end
  return classobject
