/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrIterate                                                          */
/*                                                                    */
/*   An object that represents a parsed Iterate clause.               */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 1996.06.10 Initial                                                 */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

/**   An object that represents a parsed Iterate clause.               */
class NrIterate implements RxClauseParser uses RxCursor
 properties private
  rxt    =RxTranslator                  -- root
  parser =RxParser                      -- local reference
  tokens =RxToken[]                     -- local reference

  control  =NrLevel                     -- controlling level

 /** Construct an object from the current clause */
 method NrIterate(newrxt=RxTranslator)
  rxt      =newrxt                           -- the boss
  parser   =rxt.program.parser               -- our parser
  tokens   =parser.cursor.curclause.tokens   -- local reference

 /** Pass processing */
 method scan(pass=int)
  if pass<2 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrIterate', pass)
  unexpect='unexpected.iterate'
  if parser.level<=2 then signal RxError(rxt, tokens[0], unexpect)

  parser.thislevel.terminal=1           -- followers are unreachable

  /* check syntax and extract name */
  control=parser.thislevel              -- used both paths
  if tokens[1].type=RxToken.END then do -- plain
    loop lev=parser.level to 3 by -1
      if control.key=='LOOP' then leave
      control=control.prev
      end lev
    if lev=2 then RxError(rxt, tokens[0], 'not.inside.loop.iterate')
    end
   else /* label expected */ do
    if tokens[1].type\=RxToken.SP then
      RxError(rxt, tokens[1], 'blank.expected')
    if tokens[2].type\=RxToken.SYM then
      RxError(rxt, tokens[2], 'block.label.expected')
    if tokens[3].type\=RxToken.END then
      RxError(rxt, tokens[3], 'junk.on.end')
    label=tokens[2].value
    loop lev=parser.level to 3 by -1
      if control.blocklabel.OpEq(null, label) then
       if control.key=='LOOP' then leave
      control=control.prev
      end lev
    if lev=2 then RxError(rxt, tokens[2], 'iterate.label.has.no.match')
    end

  /* Here, 'control' refers to the NrLevel being left */
  -- even though it's a parsing level, its clause reference will be
  -- valid for interpretation

  -- we have to be in the body of that construct
  if control.trystate<>NrLevel.TRY_INIT then
    signal RxError(rxt, tokens[0], unexpect /* parser.thislevel.trystate */)

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** Code generation [only] */
 method generate
  /* If the block didn't have a label, generate one now */
  if control.javalabel=='' then do
    parser.cursor.curclass.uniques=parser.cursor.curclass.uniques+1
    control.javalabel='$'parser.cursor.curclass.uniques
    end
  rxt.program.streamer.out('continue' control.javalabel';')

 /** Interpretation */
 method interpret(cursor=RxCursor null)
  cursor.curact=1                       -- alert
  cursor.curacttype=CUR_ITER
  cursor.curactblock=NrBlock control.clause.lookaside

