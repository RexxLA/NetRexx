/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) 2017- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NrAnnotate                                                         */
/*                                                                    */
/*   An object that represents a parsed Annotation clause             */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list                                                        */
/* 2017.04.26 Initial                                                 */
/* ------------------------------------------------------------------ */
package org.netrexx.process
options binary nodecimal strictcase strictargs

/**   An object that represents a parsed Annotation clause            */
class NrAnnotate implements RxClauseParser
  properties private
  rxt    =RxTranslator                            -- root
  tokens =RxToken[]                               -- local reference
  
  /** Construct an object from the current clause */
  method NrAnnotate(newrxt=RxTranslator)
    rxt    =newrxt
    tokens =rxt.program.parser.cursor.curclause.tokens
    
  /** Pass processing */
  method scan(pass=int)
    if pass<2 then signal RxQuit(rxt, tokens[0], 'internal.error', 'NrAnnotate', pass)
    
  /** Trace names list */
  method getAssigns returns String[]
    return null
    
  /** Code generation [only] */
  method generate
    -- we do no generate here because the annotation must be the last line
    -- generated before the new method definition
    -- the streaming is handled in RxParser already
    nop
    return
    
  /** Interpretation */
  method interpret(cursor=RxCursor null)
    -- we do not handle interpreted annotations
    RxMessage(rxt.program, RxMessage.WARN, tokens[0], 'annotation.not.interpreted', 'NrAnnotate')
    return                                          -- no point in this.
    