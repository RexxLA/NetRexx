/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language test suite                                    mfc */
/* Copyright (c) IBM Corporation 1996, 1997.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* Diagall                                                            */
/*                                                                    */
/*  The masterclass for NetRexx diagnostics.                          */
/*                                                                    */
/*  This constructs a series of subsystems. If any fail to construct, */
/*  then a DiagX exception is raised.                                 */
/*                                                                    */
/*  Based on:                                                         */
/*    REXDIAG: Primary diagnostic package for REX  CMS/3.50 level.    */
/*                                                                    */
/* ------------------------------------------------------------------ */
/*                                                                    */
/* Following is historical information only:                          */
/*                                                                    */
/* Testing strategy used in REXDIAG EXEC.                             */
/*                                                                    */
/* The REX interpreter may be considered to be split into several     */
/* sub-systems, corresponding roughly to the modules forming the      */
/* interpreter (see internal structure overview included in REXINT):  */
/*                                                                    */
/*   Control structures   (REXINT)                                    */
/*   Stand-alone clauses  (REXEXEC)                                   */
/*   Expressions ..       (REXEVAL)                                   */
/*     .. and variables   (REXVAR)                                    */
/*     .. and conversions (REXCONV)                                   */
/*   Tracing              (REXTRACE)                                  */
/*   External interfaces  (REXMAIN & REXEXT)                          */
/*   Functions            (REXFUN - tested by FNSDIAG mainly)         */
/*                                                                    */
/* REXDIAG therefore follows the following overall strategy:          */
/*                                                                    */
/* 1) Ensure communication is OK by doing a trivial SAY               */
/* 2) Control structures                                              */
/*   a) Check basic control structure (ability to make a decision)    */
/*        i.e. IF-THEN-ELSE                                           */
/*      Includes trivial  (opand-op-opand) expressions                */
/*   b) Check DO groups and loops                                     */
/*   c) Check SELECTs                                                 */
/* 3) Expressions and operators                                       */
/*   a) Logical operators (used from here on) and equalities          */
/*   b) Comparisons and strict comparisons                            */
/*   c) Basic Arithmetic (+ - / * // % **)                            */
/*   d) Extended Arithmetic (>9 places etc)                           */
/*   e) Concatenation operators                                       */
/* 4) Stand-alone statements                                          */
/*   a) Drop/Nop                                                      */
/*   b) Stack (Push Pull Queue) and PARSE                             */
/*   c) Commands, Address                                             */
/*   d) Interpret                                                     */
/*   e) Signal and exceptions                                         */
/*   f) Call & subroutines                                            */
/*   g) Arrays, compound variables, continuations, Expose             */
/*   h) Function calls (built-in and external)                        */
/*   i) ARG, Internal functions (Includes all of the above,           */
/*      called recursively)                                           */
/* 5) Error messages - one of each                                    */
/*                                                                    */
/* With the exception of section (5), the tests only exercise syntax  */
/* which is correct (sometimes obscurely correct).                    */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* Testing areas NOT covered by this Exec are:                        */
/*                                                                    */
/* a) Built-in functions - see REXFUNDG EXEC                          */
/* b) Tracing - see TRACDIAG EXEC                                     */
/* c) Interactive debugging - see TRDIAG EXEC                         */
/*                                                                    */
/* Areas which require further specific testing are:                  */
/*                                                                    */
/* Obscure error paths: all error paths were tested when first        */
/*   written, but possibly may have become invalidated since that     */
/*   time.  Errors in REXDIAG are only generated by one path whereas  */
/*   in reality there may be several paths.  Locating  NMxxxx equates */
/*   in the source will identify all error exits.                     */
/*                                                                    */
/* General error conditions which have not been allowed for in the    */
/*   code.  i.e. user syntax or semantic errors which may not be      */
/*   correctly detected by the interpreter.  There are none of these  */
/*   known at present of course...                                    */
/*                                                                    */
/* External interfaces.  Some are tested herein (e.g. Host Commands)  */
/*   but most have been tested by being used (e.g. direct variables   */
/*   interface is exercised by FSX, IOX, etc.).  Specific test cases  */
/*   for these interfaces should be written.                          */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.05.27 Initial, based on RexDiag                               */
/* 1996.08.25 Start adding BIMs                                       */
/* ------------------------------------------------------------------ */
package org.netrexx.diag
options binary trace

class DiagAll
 properties constant
  classsource=source
 method main(s=String[]) static
  arg=Rexx(s); if arg<>'' then say '???' arg
  say

  say version '/' classsource -- say what level we are running under

  trace off                   -- should be a nop [leave it here]

  do
    DiagSay()
    DiagConcat()
    DiagIf()
    DiagStems()
    DiagArrays()
    DiagLoop()
    DiagSelect()
    DiagExpression()
    DiagConstant()
    DiagNop()
    DiagParse()
    DiagContinue()
    DiagComment()
    DiagForward()
    DiagMutual()
    DiagAbstract()
    DiagAddressRC()
    DiagAddress()
    DiagTrace()
    DiagUTF8()
    DiagIndir()
    DiagMinor()
    DiagRexx()
    diag_Abbrev.main(String[] ['a' 'b']) -- dummy input
    diag_center.main(String[] ['a' 'b']) -- dummy input
    diag_changestr.main(String[] ['a' 'b']) -- dummy input
    diag_compare.main(String[] ['a' 'b']) -- dummy input
    diag_copies.main(String[] ['a' 'b']) -- dummy input
    diag_countstr.main(String[] ['a' 'b']) -- dummy input
    diag_delstr.main(String[] ['a' 'b']) -- dummy input
    diag_delword.main(String[] ['a' 'b']) -- dummy input
    diag_insert.main(String[] ['a' 'b']) -- dummy input
    diag_lastpos.main(String[] ['a' 'b']) -- dummy input
    diag_left.main(String[] ['a' 'b']) -- dummy input
    diag_length.main(String[] ['a' 'b']) -- dummy input
    diag_lower.main(String[] ['a' 'b']) -- dummy input
    diag_min_max.main(String[] ['a' 'b']) -- dummy input
    diag_overlay.main(String[] ['a' 'b']) -- dummy input
    diag_pos.main(String[] ['a' 'b']) -- dummy input
    diag_reverse.main(String[] ['a' 'b']) -- dummy input
    diag_right.main(String[] ['a' 'b']) -- dummy input
    diag_sequence.main(String[] ['a' 'b']) -- dummy input
    diag_sign.main(String[] ['a' 'b']) -- dummy input
    diag_space.main(String[] ['a' 'b']) -- dummy input
    diag_strip.main(String[] ['a' 'b']) -- dummy input
    diag_substr.main(String[] ['a' 'b']) -- dummy input
    diag_translate.main(String[] ['a' 'b']) -- dummy input
    diag_trunc.main(String[] ['a' 'b']) -- dummy input
    diag_upper.main(String[] ['a' 'b']) -- dummy input
    diag_verify.main(String[] ['a' 'b']) -- dummy input
    diag_word.main(String[] ['a' 'b']) -- dummy input
    diag_wordindex.main(String[] ['a' 'b']) -- dummy input
    diag_wordlength.main(String[] ['a' 'b']) -- dummy input
    diag_wordpos.main(String[] ['a' 'b']) -- dummy input    
    say '\n--- DiagAll OK ---' version
  catch e=DiagX
    say '##### Failed #####'
    say '#####'
    say '#####' e.getMessage
    say '#####'
  end


