/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 1997.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* DiagInterpret                                                      */
/*                                                                    */
/*   An object that tests the INTERPRET instruction.                  */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 2024.10.05 Initial  --MRE                                          */
/* ------------------------------------------------------------------ */

package org.netrexx.diag

options nobinary decimal

class DiagCompiledInterpret
  properties private static
    j = 1

  properties private
    p = 1

  method DiagCompiledInterpret
    say 'DiagCompiledInterpreting..'


    i = 0

-- access variables and check assignment
    it = 'i = i + 1'
    say  '  >> 'it
    interpret it

    it ='say ''i = ''i'
    say  '  >> 'it
    interpret it

    if i \= 1 then signal DiagX('Failed i+1')

--  call static method
    d = DiagCompiledInterpret(i)
    it = 'i = d.callstaticmethod(i)'
    say  '  >> 'it
    interpret it

    if i \= 2 then signal DiagX('Failed callstaticmethod(i)')

    it = 'i = d.callmethod(i)'
    say  '  >> 'it
    interpret it

    if i \= 3 then signal DiagX('Failed callmethod(i)')

-- access properties
  --  it = 'j = callmethod(j)'
  --  say  '  >> 'it
  --  interpret it

--    it = 'say ''j = ''j'
--    say  '  >> 'it
--    interpret it

--    if j \= 2 then signal DiagX('Failed inmethod(j)')
    j = 2
/*
-- define new variables
    it = 'k = j'
    say  '  >> 'it
    interpret it

    it = 'say ''k = ''k'
    say  '  >> 'it
    interpret it
    it = "if k \\= 2 then signal DiagX('Failed create new var')"
    say  '  >> 'it
    interpret it
*/
    it = 'loop forever; leave; end;'
    say  '  >> 'it
    interpret it

    it = 'if 1 then j = 3; else j = 2;'
    say  '  >> 'it
    interpret it
    if j \= 3 then signal DiagX('Failed then')

    it = 'if 0; then j = 3; else j = 2'
    say  '  >> 'it
    interpret it
    if j \= 2 then signal DiagX('Failed else')

    it = 'select; when i = 1 then j = 3; when j = 3 then j = 4; otherwise; j = 1; finally; do;say ''i = ''i; say ''j = ''j; end;end'
    say  '  >> 'it
    interpret it
    if j \= 1 then signal DiagX('Failed select')

    it = 'interpret "interpret ""j = 0; say j"""'
    say  '  >> 'it
    interpret it
    if j \= 0 then signal DiagX('Failed interpret')
/*
    it = 'j = d.interpretreturn(j)'
    say  '  >> 'it
    interpret it
    say j
    if j \= 1 then signal DiagX('Failed return')
*/
    j = 0
    it = 'loop for 3; j = j + 1; end'
    say  '  >> 'it
    interpret it
    if j \= 3 then signal DiagX('Failed loop for')

    k = 1
    i = 2
    it = 'loop k=6 to 0 by -2; k = k - i; end'
    say  '  >> 'it
    interpret it
    if k \= -2 then signal DiagX('Failed loop to by')

-- invalid clauses, should be detected
    it = 'Some faulty clauses to test'
    interpret 'say it'

    faulty = ''
    faulty[0] = 10
    faulty[1] = 'r = substr('
    faulty[2] = 'parse v v'
    faulty[3] = 'i = 1/0'
    faulty[4] = 'i =  i +'
    faulty[5] = 'leave'
    faulty[6] = 'end'
    faulty[7] = 'end;end'
    faulty[8] = 'end: end;'
    faulty[9] = 'do'
    faulty[10] = 'signal IOException'

    do f = 1 to faulty[0]
      do
        it = faulty[f]
        say  '  >> 'it
        interpret it
      catch e=InterpretException
        say e.getMessage()
        nop
      end
    end

--    interpret 'RETURN'             -- special

    say 'DiagCompiledInterpret: OK! '

  method DiagCompiledInterpret(r)
    nop

  method callstaticmethod(in) static
    return in + 1

  method callmethod(in)
    return in + 1

  method interpretreturn(in) returns Rexx
    it = 'return 'in + 1
    say  '>>   'it
    interpret it

-- not reached
    return 0


  method main(s=String[]) static
    do
       DiagCompiledInterpret()
       exit 0
    catch dx=DiagX
      say 'DiagCompiledInterpret: "'dx.getMessage'"'
      exit 1
    end

