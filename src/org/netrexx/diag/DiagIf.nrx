/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* DiagIf                                                             */
/*                                                                    */
/*   An object that tests ...                                         */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.06.19 Initial                                                 */
/* 2000.02.07 Add tests for IF expr, expr....                         */
/* ------------------------------------------------------------------ */
package org.netrexx.diag
options nobinary  -- NB

class DiagIf

 /* Construct a set of tests; raise DiagX exception if error */
 method DiagIf

  /*-- I F / T H E N / E L S E -----------------------------------------*/
  ok='OK'
  if 1 then ok=ok '!' 'If Then'
       else signal DiagX('If Then')
  if 0 then signal DiagX('If Else')
       else ok=ok '!' 'If Else'
  if 1; then flag=1
        else flag=0
  if flag;
    /* Test dummy truly Null clauses before THEN */;
        then flag=1
        else flag=0
  if 0; then flag=0
        else
        one=1
  if flag=1  then ok=ok '!' 'If ..;Then'
             else signal DiagX('If ..;then')

  -- test conditional OR (multiple expressions)
  i=5
  if i=6, i=1 then signal DiagX('If-expr 1')
  if i=5, i=4 then flag=1
              else flag=0
  if i=7, i=5 then nop
              else flag=0

  ivc=InvalidClassException null
  if ivc=null, ivc.classname='foo' then nop
    else signal DiagX('If-expr ivc')  -- here if bad reach
  s=String null
  if s=null, s='foo', s='bar' then nop
                              else signal DiagX('If-expr s1')
  s=String 'foo'
  if s=null, s='foo', s='bar' then nop
                              else signal DiagX('If-expr s2')
  s=String 'bar'
  if s=null, s='foo', s='bar' then nop
                              else signal DiagX('If-expr s3')
  s=String 'jul'
  if s=null, s='foo', s='bar' then signal DiagX('If-expr s4')

  ok=ok '!' 'If Multi'

  -- test nested ifs, 3 deep
  x=1; y=2; z=3

  if x=1 then if y=2 then if z=0 then signal DiagX('If-nest 1')
  if x=1 then if y=0 then if z=3 then signal DiagX('If-nest 2')
  if x=0 then if y=2 then if z=3 then signal DiagX('If-nest 3')

  if x=1 then if y=2 then if z=0 then signal DiagX('If-nest 4')
                                 else nop
                     else signal DiagX('If-nest 5')
         else signal DiagX('If-nest 6')
  if x=1 then if y=0 then if z=3 then signal DiagX('If-nest 7')
                                 else signal DiagX('If-nest 8')
                     else nop
         else signal DiagX('If-nest 9')
  if x=0 then if y=2 then if z=3 then signal DiagX('If-nest 10')
                                 else signal DiagX('If-nest 11')
                     else signal DiagX('If-nest 12')
         else nop
  -- full trees...
  if x=1 then if y=2 then if z=3 then nop
                                 else signal DiagX('If-nest 21')
                     else if z=3 then signal DiagX('If-nest 22')
                                 else signal DiagX('If-nest 23')
         else if y=2 then if z=3 then signal DiagX('If-nest 24')
                                 else signal DiagX('If-nest 25')
                     else if z=3 then signal DiagX('If-nest 26')
                                 else signal DiagX('If-nest 27')
  if x=0 then if y=0 then if z=0 then signal DiagX('If-nest 30')
                                 else signal DiagX('If-nest 31')
                     else if z=0 then signal DiagX('If-nest 32')
                                 else signal DiagX('If-nest 33')
         else if y=0 then if z=0 then signal DiagX('If-nest 34')
                                 else signal DiagX('If-nest 35')
                     else if z=0 then signal DiagX('If-nest 36')
                                 else nop
  ok=ok '!' 'If Nested'

  /* Test THEN special processing */
  a1=0; a2=0; a3=0; a4=0; a5=0; a6=0; a7=0; a8=0; a9=0
  IF 1=one
    then a1=1
  IF 1=1
    then
    a2=1
  ax  =0                           -- to close the IF

  else='OK1'                       -- can no longer use as keyword
  a3 = else='OK1'
  else = 'ok2'
  a4 = else='ok2'
  else /* comment */ = 'ok3'
  a5 = else='ok3'
  a6=1 -- was label
  IF 1=1
    then
    a7=1
  if 1=1 then
    a8=1
  if 1=-
    1 then a9=1
  if a1\=1 | a2\=1 | a3\=1 | a4\=1 | a5\=1 | a6\=1 | a7\=1 | a8\=1 | a9\=1-
   | ax\=0
    then signal DiagX('Then processing')
  ok=ok '!' 'Then'
  then=1; if=1; if=then if
  say 'DiagIf:' ok
  /*--------------------------------------------------------------------*/

 /* Scaffolding for stand-alone test */
 method main(s=String[]) static
  say version '/' source -- say what level we are running under
  do
    DiagIf()
  catch e=DiagX
    say 'Failed: "'e.getMessage'"'
  end
