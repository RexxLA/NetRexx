/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 1997.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* DiagSay                                                            */
/*                                                                    */
/*   An object that tests UTF8 encoding.                              */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.09.22 Initial                                                 */
/* ------------------------------------------------------------------ */
package org.netrexx.diag
options binary utf8

class DiagUTF8

 /* Construct a set of tests; raise DiagX exception if error */
 method DiagUTF8
  /*-- U T F 8 ---------------------------------------------------------*/
  flag=boolean 1
  ok='OK'
  c=char
  c='m'                            -- ASCII
  flag=flag &  109==int(c)
  c=''                            -- ASCII
  flag=flag &  127==int(c)
  c=''                           -- 11000010 10000000
  flag=flag &  128==int(c)
  c='ÿ'                           -- 11000011 10111111
  flag=flag &  255==int(c)
  c='Ѐ'                           -- 11010000 10000000
  flag=flag &  1024==int(c)
  c='ࠀ'                          -- 11100000 10100000 10000000
  flag=flag &  2048==int(c)
  c='ꪪ'                          -- 11101010 10101010 10101010
  flag=flag &  43690==int(c)
  c='￿'                          -- 11101111 10111111 10111111
  flag=flag &  65535==int(c)

  if flag then ok=ok '! UTF-8 strings'
   else signal DiagX("UTF-8 strings")

--MRE Check for Unicode backslashes/escape codes
-- following lines javac will fail to compile if \U005C is not seen as a \\

 foo='\U005C'   ;say foo         -- one character
 foo='one backslash \u005C' ;say foo
 foo='two backslashes \u005c\U005C' ;say foo
 foo='two backslashes \u005c\\' ;say foo
 foo='two backslashes \\\u005c' ;say foo
 foo='three backslashes \\\u005c\U005C' ;say foo
 foo='three backslashes \u005c\\\U005C' ;say foo
 foo='mixing a\\b\u005C\n\\U005Ca' ;say foo
 ok=ok '! \\u005c checks'

  /* Now try some exotic identifiers and numbers */
  -- Arabic digits: 0660-0669 -- 11011001 1010xxxx
  --                                 217d 160-169d
  -- Some letters:  0900-0903 -- 11100000 10100100 100000xx
  --                                 224d     164d 128-131d
  -- 0901 is broken in Java 1.1.1 Character class, now using 1F00
  -- Some letters:  1F00-1F03 -- 11100001 10111100 100000xx
  --                                 225d     188d 128-131d
  foo١='foo-arabic1'
  flag=flag & foo١ == 'foo-arabic1'

  /* ँfoo='let-foo'                   -- this is the 0901 case */
  /* flag=flag & ँfoo == 'let-foo'                             */

  ἀfoo='let-foo'
  flag=flag & ἀfoo == 'let-foo'

  num=١١    -- arabic 11
  flag=flag & (num==١١)          -- only when do arith do we lose original
  flag=flag & (num+3)==14
  flag=flag & (num+٩)==20         -- plus arabic 9

  if flag then ok=ok '! UTF-8 source'
   else signal DiagX("UTF-8 source")

  /* And now numbers from literals (i.e., as data) */
  flag=flag & (num=='١١')        -- re-check of above
  n37='٣٧'       -- arabic 37
  n38=' + ٣٨ '   -- arabic 38
  flag=flag & (n37-n38)==-1
  nm38000='-٣.٨E+٠٤ '   -- arabic -3.8E+04
  flag=flag & (nm38000+0)==-38000

  if flag then ok=ok '! UTF-8 arith'
   else signal DiagX("UTF-8 arith")

  /*--------------------------------------------------------------------*/
  say 'DiagUTF8:' ok

 /* Scaffolding for stand-alone test */
 method main(s=String[]) static
  say version '/' source -- say what level we are running under
  do
    DiagUTF8()
  catch dx=DiagX
    say 'Failed: "'dx.getMessage'"'
  end
