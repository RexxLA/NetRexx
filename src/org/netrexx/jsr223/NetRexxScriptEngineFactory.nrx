/*
 *  NetRexxScriptEngineFactory.nrx - NetRexx JSR223 Scripting Engine Factory
 *  Copyright (C) 2009, 2012 Kermit Kiser and others
 *
 *  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.
 *  See LICENSE for the licence and information on using, copying, modifying,
 *  and distributing this program.
 
Version 1.0.1 (April 29, 2015)

	* change getParameter to return actual object rather than object.toString (NPE per issue NETREXX-117)

Version 1.0.0 (November 26, 2012)

    * change package to org.netrexx.jsr223 for RexxLa release 

Version 0.0.1 (November 5, 2009)

    * First version working - simple feasibility demo! 
 
 */
package org.netrexx.jsr223
import javax.script.
import java.util.List
options strictcase
--trace results

class NetRexxScriptEngineFactory implements ScriptEngineFactory 
	
	properties private static
    
     FILEEXT = String "nrx"

     MIMETYPES = [String "text/plain","text/NetRexx","application/NetRexx"] 
        
     NAMES = [String "NetRexx", "netrexx"] 
        
    myScriptEngine=ScriptEngine 
    extensions=List		--	<String> 
    mimeTypes=List		--	<String> 
    names=List			--	<String> 
    
    method NetRexxScriptEngineFactory() 
        if myScriptEngine = null then myScriptEngine = NetRexxScriptEngine()
        extensions = Collections.nCopies(1, FILEEXT)
        mimeTypes = Arrays.asList(MIMETYPES)
        names = Arrays.asList(NAMES)
    
    method getEngineName() returns String 
        return getScriptEngine().get(ScriptEngine.ENGINE).toString()
    
    method getEngineVersion() returns String  
        return getScriptEngine().get(ScriptEngine.ENGINE_VERSION).toString()
    
    method getExtensions() returns List			--		<String>
        return extensions
    
    method getMimeTypes() returns List			--		<String>
        return mimeTypes
    
    method getNames() returns List				--		<String>
        return names
    
    method getLanguageName() returns String
        return getScriptEngine().get(ScriptEngine.LANGUAGE).toString()
    
    method  getLanguageVersion() returns String
        return getScriptEngine().get(ScriptEngine.LANGUAGE_VERSION).toString()
    
    method getParameter(key=String ) returns  Object
        return getScriptEngine().get(key)
    
--    method getMethodCallSyntax(obj=String ,m= String,  args= String...)  returns  String
    method getMethodCallSyntax(obj=String ,m= String,  args= String[])  returns  String
        sb = StringBuffer()
        sb.append(String (obj || "." || m || "("))
        len = args.length
        loop i=0 for len
            if (i > 0) then sb.append(',')
            sb.append(args[i])
            end
        sb.append(")")
        return sb.toString()
    
    method getOutputStatement(toDisplay=String ) returns String 
    	if toDisplay==null then toDisplay=""
        return String ("say '" || toDisplay || "'")
    
--    method getProgram(statements=String ... ) returns  String
    method getProgram(statements=String[]) returns  String
        sb = StringBuffer()
        if statements==null then return ""
        len = statements.length
        loop i=0 for len
            if (i > 0) then sb.append('\n')
            if statements[i]\== null then sb.append(statements[i])
            end
        return sb.toString()
    
    method getScriptEngine() returns ScriptEngine 
        return myScriptEngine
    