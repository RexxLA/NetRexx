/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxClauser                                                          */
/*                                                                    */
/*   This is a lexical processor for NetRexx syntax.  Given a         */
/*   streamer object (which can supply lines of source code), the     */
/*   clauser object will parse the input lines and supply logical     */
/*   NetRexx clauses, expressed as a RxClause object (primarily an    */
/*   array of RxTokens).                                              */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 1996.05.10 Initial                                                 */
/* 1996.05.22 Tuning                                                  */
/* 1996.06.10 Add packstring utility                                  */
/* 1996.06.25 Rework for better keyword and continuation handling     */
/* 1996.09.24 Allow extra-letters/digits using java.lang.Character    */
/* 1996.10.02 Improve checking of Numbers (must be right syntax)      */
/* 1998.01.14 Use symbolic RxToken types                              */
/* 1998.03.08 Allow $ in names                                        */
/* 1998.08.12 Allow euro in names (\u20ac)                            */
/* 2000.04.08 Add match utility (for skipping over argument lists)    */
/* 2000.04.30 Get date from RxSource, not streamer                    */
/* ------------------------------------------------------------------ */

package COM.ibm.netrexx.process
options binary nodecimal strictcase strictargs

class RxClauser

 properties private
  rxt=RxTranslator       -- our boss
  source=RxSource        -- our provider

  lineno=0               -- current input line number
  nextpos=0              -- where to look for next token [origin 1]
  line=char[]            -- current line, as character array
  linelen=0              -- linelength (consider empty file)

  tcount=int             -- tokens in current clause array
  tarray=RxToken[]       -- current clause array
  isif=boolean           -- clause is IF/WHEN

  /* Clause lookaside (clauses saved for later passes) */
  ccount=int 0           -- count of clauses in lookaside
                         -- [after first pass, this is count of clauses
                         --  in program, inspectable via 'clauses()']
  carray=RxClause[500]   -- lookaside array

  /* Character translation table */
  trantable=char[]       -- fast translate table
  tranmax  =char '\0'    -- will be highest char in trantable

 properties private constant

  /* Local/temporary token types */
  -- must be \x1-
  TBD =char '\x10'       -- to be determined
  BAD =char '\x1f'       -- bad character

  /* States while collecting numbers */
  IPART=byte 0           -- integer     part
  DPART=byte 1           -- decimal     part (after '.')
  EPART=byte 2           -- exponent    part (after 'E+')
  XPART=byte 3           -- hexadecimal part (after 'X')
  BPART=byte 4           -- binary      part (after 'B')

  /* Here is the setup table for 'standard' NetRexx characters.      */
  /* Note: white space is handled before translation, for speed.     */
  /* This table handles the 'core' characters.  Unicode letters and  */
  /* digits (>'\x7f') are handled in-line, when encountered.         */
  /* White space characters are also in the table.                   */
  /* Note: the euro character (\u20ac) is not in the table as it     */
  /* would cause the table to become 8K long; it's special-cased.    */
  intrans=char[]-
         ('abcdefghijklmnopqrstuvwxyz'-
        ||'ABCDEFGHIJKLMNOPQRSTUVWXYZ'-
        ||'_$'-                              -- special symbol characters
        ||'1234567890'-
        ||'+-/*\\%&|=<>'-                    -- '\\' here is '\'
        ||'.()[]"'';,@'-
        ||'\t\f')
  outrans=char[]-
         ('ssssssssssssssssssssssssss'-      -- 's' is non-digit symbol
        ||'ssssssssssssssssssssssssss'-
        ||'ss'-
        ||'nnnnnnnnnn'-                      -- 'n' is digit
        ||'ooooooooooo'-                     -- 'o' is operator
        ||'.()[]"'';,@'-                     -- specials are themselves
        ||'  ')                              -- whitespace
        /* # used for break */

 properties shared
  copyright=RxProcessor.copyright

 /** Construct the factory */
 method RxClauser(newrxt=RxTranslator)
  rxt=newrxt; source=rxt.program.source
  /* Set up the translate table */
  loop i=0 to intrans.length-1               -- determine highest
    if intrans[i]>tranmax then tranmax=intrans[i]
    end i
  trantable=char[int(tranmax)+1]
  loop t=0 to trantable.length-1             -- set defaults
    trantable[t]=BAD
    end t
  loop i=0 to intrans.length-1               -- set up table
    trantable[int(intrans[i])]=outrans[i]
    end i

  /* 'prime the pump' with the first line */
  type=readline()
  if type=RxToken.EOS then
    signal RxQuit(rxt, null, 'no.lines.in.source', source.getName())
  return

 /** CLAUSES: Return the number of known clauses
    After the first pass, this is the total in program. */
 method clauses returns int
  return ccount

 /** CLAUSE: Get the nth tokenized clause.
    Arg1 is the index of the clause to return (origin 1)
         (currently ignored on pass 0 -- the next clause is found)
    Returns an array of RxTokens for the selected clause, or
      null if the clause does not exist in the source.
    The first token is origin 0.
    [Clauses could be a simple linked list, in fact -- but random access
    might be useful later.]
 */
 method clause(clausenumber=int) returns RxClause

  if \rxt.pass0 then /* use lookaside */ do
    if clausenumber>carray.length then return null
    return carray[clausenumber-1]
    end

  /* pass 0 */
  clause=RxClause()                     -- make a clause
  tcount=0                              -- tokens in current clause array
  tarray=RxToken[8]                     -- initial clause array
  last=char '?'                         -- type of last token
  isif=0                                -- not an IF/WHEN [shared]
  tokcont=RxToken null                  -- continuation whereabouts
                                        -- [non-null if continuation pending]
  /* start collecting tokens */
  loop label gettokens forever          -- collect tokens
    tok=nexttoken()                     -- get next token

    /* If the second token in clause than any continuation is satisfied */
    if tcount=1 then tokcont=null

    /* If the first token was a symbol then if second token in clause,
       (or the third if second was a blank, perhaps from a comment) then
       the first token may be a keyword that needs special action.
       This may be (a) telling tokenizer to watch for THEN or (b) ending
       current clause implicitly. */
    if tcount>0 then if tarray[0].type=RxToken.SYM then if tcount<3 then
     do label keycheck
      /* either one or two tokens in array so far; the first is a
         symbol, and we have the second or third */
      if tcount=1 then if tok.type=RxToken.SP then leave keycheck  -- defer
      if tcount=2 then do
        if tarray[1].type<>RxToken.SP then leave keycheck -- already checked
        /* Remove the blank if adjacent to the usual suspects */
        select
          when tok.type=RxToken.OP    then tcount=1
          when tok.type=RxToken.RBRK  then tcount=1
          when tok.type=RxToken.RPAR  then tcount=1
          when tok.type=RxToken.COMMA then tcount=1
          otherwise nop
          end
        if tcount=1 then last=RxToken.SYM -- no longer pending blank
        end
      /* Determine the token that actually follows the symbol */
      if tcount=1 then ftok=tok
                  else ftok=tarray[1]   -- (in fact, RxToken.SP)

      if ftok.type=RxToken.OP then      -- if ..
       if ftok.value[0]='=' then        -- .. followed by '='
        leave keycheck                  -- .. then cannot be a keyword
      if ftok.type=RxToken.DOT then     -- if followed by '.'
        leave keycheck                  -- .. then cannot be a keyword
      if ftok.type=RxToken.LPAR then    -- if followed by '('
        leave keycheck                  -- .. then cannot be a keyword
      if ftok.type=RxToken.LBRK then    -- if followed by '['
        leave keycheck                  -- .. then cannot be a keyword
      isuni=boolean 0                   -- assume not a uni-keyword clause
      trial=tarray[0].value             -- get the word
      select
        when rxt.program.parser.iskey(trial, 'IF')        then isif=1
        when rxt.program.parser.iskey(trial, 'THEN')      then isuni=1
        when rxt.program.parser.iskey(trial, 'WHEN')      then isif=1
        when rxt.program.parser.iskey(trial, 'ELSE')      then isuni=1
        when rxt.program.parser.iskey(trial, 'OTHERWISE') then isuni=1
        when rxt.program.parser.iskey(trial, 'FINALLY')   then isuni=1
        otherwise nop
        end
      /* If we're looking for THEN and this token is THEN, then close
         off the IF or WHEN (parsing for these will report missing
         expression).  This is the case: 'IF THEN...', where the blank
         could be real or from a comment. */
      if isif then if tok.type=RxToken.SYM then
       if rxt.program.parser.iskey(tok.value, 'THEN') then
        isuni=1                              -- request separator
      /* If implicit end-clause, add RxToken.END, ask for reparse, and
         quit */
      if isuni then do                       -- automatic end clause
        if tcount=2 then tcount=1            -- drop blank
        addtoken(RxToken(RxToken.END, tarray[0].line,-
                         tarray[0].pos+tarray[0].value.length-1,-
                         1, RxToken.EOI))
        reparse(tok)                         -- step back the tokenizer
        leave gettokens
        end
      end keycheck

    /* Special token processing */
    select label specials
      when tok.type=RxToken.SP then select   -- new is blank
        when last=RxToken.SP    then nop     -- don't add after this
        when last=RxToken.OP    then nop
        when last=RxToken.LBRK  then nop
        when last=RxToken.LPAR  then nop
        when last=RxToken.COMMA then nop
        -- strip leading blank later
        otherwise
          last=tok.type
          addtoken(tok)
          tokcont=null                       -- any continuation is satisfied
        end

      when tok.type=RxToken.END then do      -- end of clause
        if tokcont\=null then
          signal RxQuit(rxt, tokcont, 'bad.continuation.empty')
        if last='?' then do                  -- at start of clause
          -- truly null clause
          if tok.value[0]\=RxToken.EOS then iterate -- null clause, ignore
          return null                        -- EOS, report now
          end
        if last=RxToken.SP then if tcount=1 then do -- comment null clause
          -- it could be EOS, but if so, report on next call
          addtoken(tok)                      -- true end of clause
          leave gettokens
          end

        /* potential clause end */
        /* .. unless continuation */
        if last=RxToken.OP then
         if tarray[tcount-1].value[0]='-' then do label continue
          tcount=tcount-1                    -- strip the continuator
          tokcont=tarray[tcount]             -- hold its token
          if tok.value[0]=RxToken.EOS then
            signal RxQuit(rxt, tokcont, 'bad.continuation.eos')
          /* now add blank (unless disappears) */
          if tcount=0 then do
            last='?'
            iterate gettokens                -- [null clause]
            end
          last=tarray[tcount-1].type
          select
            when last=RxToken.SP then nop    -- don't add after this
            when last=RxToken.OP then nop
            when last=RxToken.LBRK then nop
            when last=RxToken.LPAR then nop
            when last=RxToken.COMMA then nop
            otherwise
              /* add blank (it may go away, later) */
              tokcont.type=RxToken.SP        -- reuse token
              tokcont.value=null             -- ..
              addtoken(tokcont)              -- add back to current clause
              last=RxToken.SP
            end
          /* EOL or ; is now ignored */
          leave specials
          end continue

        /* not continuation -- clause end is here */
        if last=RxToken.SP then tcount=tcount-1   -- strip trailing blank

        /* If an implied semicolon, make a cosmetic improvement to the
           position: point it immediately after the previous real token
           (if any), for better error reporting if 'something expected'.
           Note that this strips comments, in effect, so tracer will
           have to work around this.
           */
        if tcount>0 then if tok.value[0]\=RxToken.EOC then do
          lasttok=tarray[tcount-1]
          tok.line=lasttok.line
          tok.pos=lasttok.pos+lasttok.len
          -- tok.len is already 1
          end
        addtoken(tok)                        -- true end of clause
        leave gettokens
        end /* EOL, EOC, EOI, EOS */

      when last=RxToken.SP then do           -- old blank may go
        select
          when tcount=1     then tcount=tcount-1  -- strip leading blank now
          when tok.type=RxToken.OP    then tcount=tcount-1
          when tok.type=RxToken.RBRK  then tcount=tcount-1
          when tok.type=RxToken.RPAR  then tcount=tcount-1
          when tok.type=RxToken.COMMA then tcount=tcount-1
          otherwise nop
          end
        last=tok.type
        addtoken(tok)
        tokcont=null                    -- any continuation is satisfied
        end

      otherwise
        last=tok.type
        addtoken(tok)
        tokcont=null                    -- any continuation is satisfied
      end specials
    end gettokens

  clause.tokens=tarray             -- add array to clause

  /* save clause in lookaside for later passes */
  if ccount=carray.length then do  -- need to extend the lookaside array
    new=RxClause[carray.length+carray.length%2]
    System.arraycopy(carray, 0, new, 0, carray.length)
    carray=new
    end
  carray[ccount]=clause
  ccount=ccount+1
  clause.clausenum=ccount          -- remember our number [for tracer]
  return clause

 /** ADDTOKEN -- add token to the current clause array
    Arg1 is RxToken to add
    */
 method addtoken(add=RxToken) private
  if tcount=tarray.length then do  -- need to extend the array
    new=RxToken[tarray.length+16]
    System.arraycopy(tarray, 0, new, 0, tarray.length)
    tarray=new
    end
  tarray[tcount]=add
  tcount=tcount+1
  return


 /** READLINE -- read a line and set positioning information
    Returns EOS or EOL
    */
 method readline returns char private
  lineno=lineno+1
  nextpos=1
  line=source.getLine(lineno)
  if line=null then do
    linelen=0
    return RxToken.EOS
    end
  linelen=line.length
  return RxToken.EOL

 /** REPARSE -- set up for next token
    Arg1 is the token to be reparsed

    This is used for reparsing a token; it sets the persistent
    information used by the tokenizer (NEXTTOKEN).
    */
 method reparse(tok=RxToken) private
  nextpos=tok.pos                  -- where to start
  if tok.line=lineno then return   -- line information is fine
  /* line number has changed; time to backtrack */
  lineno=tok.line
  line=source.getLine(lineno)
  /* [cannot be null] */
  linelen=line.length
  return

 /** NEXTTOKEN -- return next token from source input stream
    This is an ad-hoc parser written from memory [1.96]
    Most, but not all, extra blanks are removed -- for example,
      comments are passed up as blanks, so significant null clauses
      can be detected.
    See also DMSRIN. */
 method nexttoken returns RxToken private
  value=String           -- value of long token
  cchar=char             -- current character
  ctype=char             -- type of current character
  tok=RxToken            -- token to be returned
  pos=nextpos            -- position in line [origin 1]
  hadblank=0             -- have had blank/whitespace; this is position
  loop label collect forever
    if pos>linelen then do    -- at end of line
      ctype=readline()
      tok=RxToken(RxToken.END, lineno-1, pos, 1, ctype)
      -- [line and pos will be improved later unless null clause]
      leave collect; end

    /* determine character type */
    cchar=line[pos-1]
    select
      when cchar=' ' then /* blank */ do     -- special-case, for speed
        hadblank=pos; pos=pos+1; iterate; end
      when cchar<=tranmax then ctype=trantable[int(cchar)]
      when Character.isLetter(cchar) then ctype='s'         -- symbol start
      when cchar='\u20ac'            then ctype='s'         -- the euro
      when Character.isDigit(cchar) & -                     -- number start?
           Character.digit(cchar, 10)>=0 then ctype='n'     -- base 10?
      otherwise ctype=BAD
      end

    tok=RxToken(TBD, lineno, pos, 1, null)   -- token so far
    pos=pos+1

    if ctype='o' then do label opchar   -- operator character
      if pos>linelen then c2=BAD; else c2=line[pos-1]
      if cchar='-' then if c2='-' then /* line comment start */ do
        nextpos=linelen+1
        tok.type=RxToken.SP
        leave collect; end

      if cchar='/' then if c2='*' then /* nest comment start */ do
        pos=pos+1; nest=1
        loop label comments forever
          if pos>=linelen then do       -- no room for comment end
            ctype=readline()
            if ctype=RxToken.EOS then do
              tok.len=2
              signal RxQuit(rxt, tok, 'comment.start.unmatched')
              end
            pos=1
            iterate; end
          c1=line[pos-1]
          pos=pos+1
          if c1\='*' then if c1\='/' then iterate -- no state change
          c2=line[pos-1]
          if c1='*' then do
            if c2='/' then do
              pos=pos+1
              if nest=1 then leave comments
              nest=nest-1
              end
            end
           else do            -- c1 is '/'
            if c2='*' then do
              pos=pos+1
              nest=nest+1
              end
            end
          end comments
        nextpos=pos
        tok.type=RxToken.SP
        leave collect
        end /* handle nest comment */

      if cchar='+' then if c2='+' then /* reserved */ do
        tok.len=2
        signal RxQuit(rxt, tok, 'plus.plus.found')
        end
      if cchar='\\' then if c2='\\' then /* reserved */ do
        tok.len=2
        signal RxQuit(rxt, tok, 'backslash.backslash.found')
        end

      /* standard operator character */
      tok.type=RxToken.OP; tok.value=char[1]; tok.value[0]=cchar
      nextpos=pos
      leave collect
      end opchar

    if ctype=',' then do                     -- commas eat blanks
      tok.type=RxToken.COMMA
      nextpos=pos
      leave collect; end

    if ctype=';' then do                     -- a real semicolon
      tok.type=RxToken.END
      tok.value=char[1]; tok.value[0]=RxToken.EOC
      nextpos=pos
      leave collect; end

    if ctype=' ' then /* non-blank whitespace */ do
      hadblank=pos-1
      iterate; end

    /* Should be about to start S, N, brackets, string, dot,
       or BAD -- preserve any blank so far */
    if hadblank>0 then do
      nextpos=pos-1
      tok.type=RxToken.SP
      tok.pos=hadblank                       -- latest blank we found
      leave collect; end

    if ctype='s' then do                     -- symbol start
      start=pos-1                            -- pos where this thing starts
      loop label symbol forever
        if pos>linelen then leave symbol     -- [eol]
        cchar=line[pos-1]
        if cchar<=tranmax then do            -- Known ASCII
          ctype=trantable[int(cchar)]
          if ctype<>'s' then
           if ctype<>'n' then leave symbol   -- [not symbol character]
          end
         else do                             -- Maybe Unicode
          if \Character.isLetterOrDigit(cchar)
           then leave symbol                 -- [not symbol character]
          end
        tok.len=tok.len+1
        pos=pos+1
        end symbol
      /* copy the value */
      tok.value=char[tok.len]
      System.arraycopy(line, start-1, tok.value, 0, tok.len)

      /* Symbol accumulated -- check for active IF */
      /* Note that the check for THEN, here takes no account of
         variables as in pass 1 we have none.  Since an error is
         inevitable (as THEN keyword could never be found) if there
         really was a variable called THEN, this isn't a serious
         problem.
         */
      if isif then if tok.value.length=4 then
       if tok.value[0]='t' , tok.value[0]='T' then
       if tok.value[1]='h' , tok.value[1]='H' then
       if tok.value[2]='e' , tok.value[2]='E' then
       if tok.value[3]='n' , tok.value[3]='N' then do
        -- end-of-if/when found [implied separator]
        nextpos=start
        tok.len=1; tok.type=RxToken.END
        tok.value=char[1]; tok.value[0]=RxToken.EOI
        leave collect; end

      nextpos=pos
      tok.type=RxToken.SYM
      leave collect; end

    if ctype='n' then do                     -- number start
      start=pos-1                            -- pos where this thing starts
      part2=0                                -- pos of second part series
      -- Collect remaining characters
      state=IPART                            -- in integer part
      exotics=(cchar>tranmax)                -- 1 if first digit is exotic
      loop label number forever
        if pos>linelen then leave number     -- [EOL]
        lastcchar=cchar                      -- previous cchar
        cchar=line[pos-1]
        if cchar<=tranmax then ctype=trantable[int(cchar)]
         else /* exotic */ select
          when Character.isLetter(cchar) then ctype='s'     -- symbol start
          when Character.isDigit(cchar) &-                  -- number start?
               Character.digit(cchar, 10)>=0 then do        -- base 10?
            ctype='n'
            exotics=1                             -- postconvert needed
            end
          otherwise ctype=BAD
          end
        if ctype='n' then do                      -- looks good
          tok.len=tok.len+1
          pos=pos+1
          iterate number                          -- keep accumulating
          end
        -- If we just had '.' but it was not followed by a digit, then the
        -- dot was not part of the number [consider: 123.equals(x)]
        if lastcchar='.' then do
          tok.len=tok.len-1
          pos=pos-1
          state=IPART
          leave number
          end
        if ctype='.' then do
          if state\=IPART then leave number       -- unexpected dot
          state=DPART
          tok.len=tok.len+1
          pos=pos+1
          iterate number                          -- include the dot
          end

        if ctype\='s' then leave number           -- not for us

        -- We now allow: E   (if IPART or DPART)
        --               X   (if IPART)
        --               B   (if IPART)
        --               any (if XPART .. hexiness checked later)
        -- Any other symbol combination or syntax is invalid (that is, error)

        -- Include the character in the number [now, so shows as part of
        -- the token in error case]
        tok.len=tok.len+1
        pos=pos+1
        if state=XPART then iterate number        -- assume it's A-F for now

        if cchar='e' | cchar='E' then do          -- try for exponent
          select
            when state=IPART then nop             -- ok
            when state=DPART then nop             -- ok
            otherwise
              signal RxQuit(rxt, tok, 'not.a.number')
            end
          if pos>linelen then                     -- no room for sign
            signal RxQuit(rxt, tok, 'not.a.number')
          c2=line[pos-1]                          -- pick up the sign
          tok.len=tok.len+1                       -- include sign
          pos=pos+1
          if (c2\='+' & c2\='-')-                 -- bad sign..
           | pos>linelen then                     -- .. or no room for digits
            signal RxQuit(rxt, tok, 'not.a.number')
          -- OK, time to collect the exponent
          state=EPART
          part2=pos                               -- start of part 2
          iterate number; end
        if cchar='x' | cchar='X' then do          -- try for hexadecimal
          if state\=IPART then
            signal RxQuit(rxt, tok, 'not.a.number')
          -- OK, time to collect the hexadecimal part
          state=XPART
          part2=pos                               -- start of part 2
          iterate number; end
        if cchar='b' | cchar='B' then do          -- try for binary
          if state\=IPART then
            signal RxQuit(rxt, tok, 'not.a.number')
          -- OK, time to collect the binary part
          state=BPART
          part2=pos                               -- start of part 2
          iterate number; end
        -- anything else is bad news
        signal RxQuit(rxt, tok, 'not.a.number')
        end

      /* Now end-checks */
      do label endcheck
        if state=IPART then leave endcheck   -- easy
        if state=DPART then leave endcheck   -- dot known to be followed
        -- the remaining types all needed at least one more character
        if part2=pos then signal RxQuit(rxt, tok, 'not.a.number')
        if state=EPART then leave endcheck   -- it's ready to use
        -- We have hexadecimal or binary
        -- Get the first part as an integer.
        -- More than 9 digits is an error [implementation restriction]
        ilen=part2-start-1
        if ilen>9 then signal RxQuit(rxt, tok, 'not.a.number')
        ichars=char[ilen]; System.arraycopy(line, start-1, ichars, 0, ilen)
        ivalue=Rexx(ichars).toint()          -- [cannot fail]
        -- Now get the second part.  ivalue must fit or be 0
        vlen=pos-part2                       -- length of second part
        if ivalue<vlen then if ivalue\=0 then
          signal RxQuit(rxt, tok, 'not.a.number')
        -- If binary and ivalue=vlen then we will need to sign-extend to
        -- a multiple of four for later
        if state=BPART & ivalue=vlen then do
          offset=vlen//4; if offset\=0 then offset=4-offset
          ivalue=ivalue+offset               -- adjust to match
          end
         else offset=0                       -- where to copy
        vchars=char[vlen+offset]
        -- copy the digits to the vchars array, with offset, and convert
        -- exotic digits to '0'-'9' (as b2x/x2d don't handle them).
        loop i=0 for vlen
          inchar=line[part2-1+i]
          if exotics then if inchar>tranmax then do
            v=Character.digit(inchar, 10)         -- base 10 digit?
            if v>0 then inchar=char(int('0')+v)   -- yes, convert to 0-9
            end
          vchars[i+offset]=inchar                 -- copy
          end i
        -- If we had an offset, then sign- or zero- extend
        if offset>0 then loop i=0 for offset
          vchars[i]=vchars[offset]
          end i
        rchars=Rexx(vchars)                       -- make Rexx
        -- say '# ivalue, rchars:' ivalue vchars.length ''''rchars''''

        do label errorhandle
          -- If binary, compress to hexadecimal and adjust ivalue and vlen
          if state=BPART then do
            rchars=rchars.b2x()
            vlen=(vchars.length+3)%4              -- length of result
            end
          -- If was original exact length match...
          if ivalue=vchars.length then
            vchars=rchars.x2d(vlen).toCharArray() -- may end up -ve
           else
            vchars=rchars.x2d().toCharArray()     -- always +ve
        catch RuntimeException                    -- conversion, etc.
          signal RxQuit(rxt, tok, 'not.a.number')
          end
        -- OK we have the result as a character array (possibly with '-')
        -- tok.len refers to the *original* token data in line
        -- say '# >>>'  ''''vchars''''
        tok.value=vchars
        tok.type=RxToken.NUM
        nextpos=pos
        leave collect
        end endcheck
      /* Here for numbers that don't need b2x/x2d; we can leave exotics
         in the value as Rexx arithmetic will handle. */
      tok.value=char[tok.len]                     -- copy the value...
      System.arraycopy(line, start-1, tok.value, 0, tok.len)
      tok.type=RxToken.NUM
      nextpos=pos
      leave collect; end

    if ctype='.' then do                     -- regular dot
      tok.type=RxToken.DOT
      nextpos=pos
      leave collect; end

    /* Groupers.  Blanks inside handled at higher level */
    if ctype='(' then do
      tok.type=RxToken.LPAR; nextpos=pos; leave collect; end
    if ctype=RxToken.LBRK then do
      tok.type=RxToken.LBRK; nextpos=pos; leave collect; end
    if ctype=')' then do
      tok.type=RxToken.RPAR; nextpos=pos; leave collect; end
    if ctype=']' then do
      tok.type=RxToken.RBRK; nextpos=pos; leave collect; end

    /* Annotation starter */
    if ctype='@' then do
      tok.type=RxToken.AT; nextpos=pos; leave collect; end

    if ctype='''' | ctype='"' then do        -- string start
      start=pos-1                            -- where this thing starts
      tok.len=2                              -- allow for outer quotes
      /* We have to use a side-copy of value, in case of doubled quotes */
      value=''
      loop label string forever
        if pos>linelen then do /* eol */
          tok.pos=start; tok.len=1
          signal RxQuit(rxt, tok, 'unmatched.quote')
          end
        cchar=line[pos-1]
        pos=pos+1
        if cchar=ctype then do               -- matching quote found
          if pos>=linelen then leave string  -- at end of line; cannot be double
          if line[pos-1]\=cchar then         -- not doubled
            leave string                     -- .. so end of string
          pos=pos+1                          -- doubled quote; step over dup
          end
        if cchar='\\' then do                -- escape in stream
          if pos>=linelen then               -- at end of line; cannot be valid
            signal RxQuit(rxt, tok, 'unmatched.quote') -- [later maybe escape NL]
          value=value||cchar                 -- add to token
          tok.len=tok.len+1                  -- ..
          cchar=line[pos-1]                  -- and get the next character as-is
          pos=pos+1                          -- ..
          end
         else if cchar='"' | cchar="'" then do -- escape any included quotes
          value=value'\\'
          tok.len=tok.len+1
          end
        value=value||cchar
        tok.len=tok.len+1
        end string
      tok.type=RxToken.STR; tok.value=value.toCharArray()
      nextpos=pos
      leave collect; end

    if ctype=BAD then do
      if rxt.program.flag.diag then do
        say '# BAD char ctype: '''ctype''''-
            Character.isLetter(cchar) Character.isDigit(cchar)-
            Character.isLetterOrDigit(cchar) Character.isDefined(cchar)
        end
      signal RxQuit(rxt, tok, 'invalid.character', cchar,-
                    Rexx(int(cchar)).d2x(4))
      end

    /* Should never get here */
    tok.pos=pos-1; tok.len=1
    signal RxQuit(rxt, tok, 'internal.error', 'RxClauser: case' ctype)
    end collect

/**
  if \diag then return tok
  if value=='' then v=''; else v='['value']'
  say '#' left(type,3) v
**/
  return tok

 /** MATCH -- Return token index of matching bracket or parenthesis
    arg1 is tokens array
    arg2 is token number to start from in TOKENS (must be '[' or '(')
    Returns 0 if unmatched (END found while still looking)
    Returns >0 if matched, value is token after match
    */
 method match(tokens=RxToken[], n=int) static returns int
  tok=tokens[n]
  begintype=tok.type
  select case begintype
    when RxToken.LPAR then look=RxToken.RPAR
    when RxToken.LBRK then look=RxToken.RBRK
    end
  loop forever
    n=n+1; tok=tokens[n]
    if tok.type=look then leave /* done */
    if tok.type=RxToken.END then return 0
    if tok.type=RxToken.LPAR, tok.type=RxToken.LBRK then do  /* recurse */
      n=match(tokens, n)
      if n=0 then leave
      end
    end
  return n
