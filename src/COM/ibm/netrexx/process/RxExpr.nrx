/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* Venta language processor                                       mfc */
/* Copyright (c) IBM Corporation 2000.        All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* RxExpr                                                             */
/*                                                                    */
/*   An object that represents a parsed expression.                   */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 2000.03.06 Initial                                                 */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal strictcase strictargs

class RxExpr
 properties constant shared
  -- expression type [always set, but not necessarily used]
  ASSIGN_EXPR =int 10    -- expression is an assignment expression
  CASE_EXPR   =int 7     -- expression is SELECT CASE expr
  IF_EXPR     =int 8     -- expression is an IF expr
  LOOP_EXPRI  =int 1     -- expression is LOOP initial variable value
  LOOP_EXPRT  =int 2     -- expression is LOOP TO exprt
  LOOP_EXPRB  =int 3     -- expression is LOOP BY exprb
  LOOP_EXPRF  =int 4     -- expression is LOOP FOR exprf/exprr
  LOOP_EXPRW  =int 5     -- expression is LOOP WHILE exprw
  LOOP_EXPRU  =int 6     -- expression is LOOP UNTIL expru
  NUMERIC_EXPR=int 11    -- expression is a NUMERIC expression
  RETURN_EXPR =int 12    -- expression is a RETURN expression
  SAY_EXPR    =int 13    -- expression is a SAY expression
  WHEN_EXPR   =int 9     -- expression is a WHEN expr

 properties shared
  exprtype=int           -- one of the LOOP_ values
  code    =RxCode        -- code for the expression
  litexpr =boolean 0     -- apply literal-to-type promotion
  addzero =boolean 0     -- add zero to the result before conversion
  addone  =boolean 0     -- add one to the result before conversion
  conv    =RxConvert     -- conversion to apply after evaluation
  type    =RxType        -- final type of the expression

 properties private
  rxt     =RxTranslator  -- for finding factories
  endins  =char[]        -- ending characters
  ender   =Rexx          -- ending keyword [may be null if none]
  tokens  =RxToken[]     -- tokens associated with this clause

 /* Constructor
    Arg1 is the context
    Arg2 is the expression type
    Arg3 is the code object for the expression
    */
 method RxExpr(newrxt=RxTranslator, cursor=RxCursor, newtype=int, newcode=RxCode)
  rxt=newrxt
  exprtype=newtype
  code=newcode
  type=code.type         -- assume no conversion applied
  -- determine the ender from the token after the expression end
  tokens=cursor.curclause.tokens

  tok=tokens[code.endoff+1]
  if tok.type=RxToken.SP then tok=tokens[code.endoff+2] -- step over blank
  select
    when tok.type=RxToken.END then nop       -- no end word/characters
    when tok.type=RxToken.SYM then do        -- ended by keyword, save it
      ender=tok.value
      end
    otherwise
      endins=char[1]
      endins[0]=tok.type                     -- save the end type character
    end

 /* firsttoken -- return token for the start of the expression */
 method firsttoken returns RxToken
  return tokens[code.begoff]

 /* evaluate -- evaluate the expression
    Arg1 is the context
    returns evaluated expression result as an RxCode object

    NB expression may not return S_TYPE .. but constant anyway
    */
 method evaluate(cursor=RxCursor, tracetag=char '>', tracename=Rexx '')-
                 returns RxCode
   -- evaluate the expression.  If it's constant and we're not tracing
   -- then we don't need to evaluate
   if code.constant then if cursor.curtrace=null then return code
   -- re-evaluation needed
   work=rxt.eparser.evalexpr(cursor, 0, code.begoff, endins, ender,-
                             tracetag, tracename)

   if addzero then do
     ocode=rxt.eparser.oneopdo(cursor, '+', tokens[code.begoff], work)
     -- may be new code object; apply it to ours
     work.type=ocode.type
     work.value=ocode.value
     work.constant=ocode.constant
     end

   if litexpr then rxt.converter.litexpr(cursor, work) -- we chose type

   if conv\=null then do
     rxt.converter.convertcode(cursor, type, conv.proc, work, tokens[work.begoff])
     -- if rxt.superflag.diag then
     -- say '# expr:' work.type work.value work.value.getclass '=>' type conv.proc
     end

   return work


