/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor                                     mfc */
/* Copyright (c) IBM Corporation 2000.        All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* NrMethodcall                                                       */
/*                                                                    */
/*   An object that represents a method call instruction.             */
/*                                                                    */
/*   This one is special in that scanning of the term has already     */
/*   been done by the parser, so scan() here has no function, and     */
/*   the specal call just records the scanned term.                   */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 2000.02.20 Initial                                                 */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.process
options binary nodecimal strictcase strictargs

/**   An object that represents a method call instruction.             */
class NrMethodcall implements RxClauseParser uses RxCode

 properties shared
  special   =boolean          -- 1 if this is a super/this call

 properties private
  rxt       =RxTranslator     -- the boss
  term      =RxCode           -- the parsed term

 /** Construct an object from the current clause */
 method NrMethodcall(newrxt=RxTranslator)
  rxt      =newrxt                      -- the boss

 /** process -- handle the parsed term
    Arg1 is the code for the term
    Arg2 is 1 if the term is a special constructor call (this/super)

    We already know the term is a method/constructor call
 */
 method process(newterm=RxCode, newspec=boolean)
  term=newterm                          -- save
  special=newspec

 /** Pass processing */
 method scan(pass=int)
  if pass<2 then signal RxQuit(rxt, null, 'internal.error', 'NrMethodcall', pass)
  nop

 /** Trace names list */
 method getAssigns returns String[]
  return null

 /** code generation [only] */
 method generate
  rxt.program.streamer.out(term.javacode';') -- easy

 /** Interpretation */
 method interpret(cursor=RxCursor null)

  -- Evaluate the term.  It cannot be a constant, and always fills the
  -- clause.
  term=rxt.tparser.parseterm(cursor, 0, 0)   -- (we are on LHS)

  -- pass the result back if we were a special constructor
  if special then cursor.curreturn=term.value
