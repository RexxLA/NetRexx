/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 1997.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* DiagConstant                                                       */
/*                                                                    */
/*   An object that tests numeric constants [and handling thereof]    */
/*                                                                    */
/*   +++ floats and doubles barely tested                             */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.07.04 Initial                                                 */
/* 1998.12.12 Check byte casting                                      */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.diag
options nobinary         -- NB

trace off                -- should be a nop

class DiagConstant

 /* Construct a set of tests; raise DiagX exception if error */
 method DiagConstant
  /*-- C O N S T A N T -----------------------------------------------*/
  ok='OK'
  /* Integer Boundary checking */
  numeric digits 30
  flag=1
  int1 = int 2147483647                 -- type INT case
  flag=flag & int1=='2147483647'
  int1c= Integer.MAX_VALUE              -- same
  flag=flag & int1c=='2147483647' & int1c=int1
  int2 = int 1                          -- Rexx arithmetic & conversion
  flag=flag & int2=='1'
  do
    int3 = int ; int3 = int1 + int2     -- Conversion overflow
    int3 = int3                         -- [avoid warning]
    flag=0                              -- shouldn't get here
  catch NumberFormatException
    -- say 'int1+int2 conversion overflow (as expected)'
    -- flag OK
  end
  int4 = int int2 - int1
  flag=flag & int4=='-2147483646'

  int6 = int 999999999
  int7 = int 1000000000
  int7x=int7+1
  int8 = int int7x
  flag=flag & int8=='1000000001'
  int9 = int int2 - int6
  flag=flag & int9=='-999999998'
  int10= int int2 - int7
  flag=flag & int10=='-999999999'
  int11= int int2 - int8
  flag=flag & int11=='-1000000000'

  /*** The next one is now a compile-time error
  do
    int12 = int 2147483648         -- this should overflow
    say int12 '<= bad'
    flag=0
  catch NumberFormatException
    -- say 'int12 conversion overflow (as expected)'
    -- flag OK
  end
  ***/

  int13 = int '-2147483648'         -- conversion should be OK
  flag=flag & int13='-2147483648'

  int14 = int (-2147483648)         -- Rexx arithmetic then conversion
  flag=flag & int14='-2147483648'

  int15 = int (0-2147483648)        -- Rexx arithmetic then conversion
  flag=flag & int15='-2147483648'

  int16 = int (boolean 1)           -- tricky primitive constructors
  int17 = int(boolean 1)
  int18 = int(char('32'.toint()))
  int19 = int(char('-1'.toint()))
  bool1 = boolean int17
  bool2 = boolean(int17)
  flag=flag & int16==1 & int17==1 & int18=32 & int19==65535 & bool1 & bool2

  -- some byte casting nasties
  byte1=Byte(-128)
  byte2=Byte(+127)
  byte3=Byte( 127)
  flag=flag & byte2.byteValue==byte3.byteValue
  flag=flag & -(byte1.byteValue+1)==byte3.byteValue
  flag=flag & binbytes() -- same with options binary

  if \flag then signal DiagX("Constant integers")
  ok=ok '! Constant Integer'

  /* Now some LONG boundaries */
  long1 = long 9223372036854775807           -- type LONG case
  flag=flag & long1=='9223372036854775807'
  long2 = long 1                             -- Rexx arithmetic & conversion
  flag=flag & long2=='1'
  do
    long3 = long ; long3 = long1 + long2     -- Conversion overflow
    long3 = long3                            -- [avoid warning]
    flag=0                                   -- shouldn't get here
  catch NumberFormatException
    -- say 'long1+long2 conversion overflow (as expected)'
    -- flag OK
  end
  long4 = long long2 - long1
  flag=flag & long4=='-9223372036854775806'
  /* Now try excessives */
  vlong=999999999999999999999                -- won't fit in long
  vlong=vlong+1                              -- Rexx arithmetic
  flag=flag & vlong=='1000000000000000000000'
  vlong=vlong+1
  flag=flag & vlong=='1000000000000000000001'
  vlong=-vlong
  flag=flag & vlong=='-1000000000000000000001'

  if \flag then signal DiagX("Constant longs")
  ok=ok '! Constant Long'

  dub=double 7
  flag=flag & ((double Rexx(dub))==dub)
  dubm=-dub
  flag=flag & ((double Rexx(dubm))==dubm)

  if \flag then signal DiagX("Constant doubles")
  ok=ok '! Constant Double'


  /*--------------------------------------------------------------------*/
  say 'DiagConstant:' ok


 method binbytes private returns boolean binary  -- NB binary
  byte1=Byte(-128)
  byte2=Byte(+127)
  byte3=Byte( 127)
  flag=byte2.byteValue==byte3.byteValue
  flag=flag & -(byte1.byteValue+1)==byte3.byteValue
  return flag

 /* Scaffolding for stand-alone test */
 method main(s=String[]) static
  say version '/' source -- say what level we are running under
  do
    DiagConstant()
  catch dx=DiagX
    say 'Failed: "'dx.getMessage'"'
  end
