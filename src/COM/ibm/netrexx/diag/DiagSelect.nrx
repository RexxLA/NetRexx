/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 1998.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* DiagSelect                                                         */
/*                                                                    */
/*   An object that tests Select instructions.                        */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.06.19 Initial                                                 */
/* 1998.12.21 Add SELECT CASE tests                                   */
/* 1999.09.15 Add SELECT CASE tests for switch generation             */
/* 1999.09.19 Add multiple expressions (WHEN foo, bar THEN) on WHENs  */
/* 1999.11.10 Check for conditional OR in multiple expression WHENs   */
/* ------------------------------------------------------------------ */
package COM.ibm.netrexx.diag
options binary

class DiagSelect

 properties private constant
  TWO=2

 /* Construct a set of tests; raise DiagX exception if error */
 method DiagSelect

  /*-- S E L E C T -----------------------------------------------------*/
  ok='OK'
  i=4
  select
    when i=1 then signal DiagX('sel001 When 1')
    when i=4 then ok=ok '! When'
    when i=6 then signal DiagX('sel002 When 2')
  end;
  select
    when i=1 then signal DiagX('sel003 When/Otherwise 1')
    when i=6 then signal DiagX('sel004 When/Otherwise 2')
    otherwise ok=ok '! Otherwise'
  end;
  select label tor
    when i=1 then signal DiagX('sel005 When/Otherwise 3')
    when i=6 then signal DiagX('sel006 When/Otherwise 4')
    otherwise leave tor
  end;
  select label tor
    when i=1 then do; signal DiagX('sel007 When/Otherwise 5'); end
    when i=4 then leave tor
    when i=6 then signal DiagX('sel008 When/Otherwise 6')
    otherwise
      nop
      signal DiagX('sel009 When/Otherwise 7')  -- here if Otherwise unnested
  end

  select label tor
    when i=1, i=6 then do; signal DiagX('sel021 When/Otherwise 1,6'); end
    when i=4 then leave tor
    when i=7, i=9, i=8 then do; signal DiagX('sel023 When/Otherwise 7,9,8'); end
    otherwise
      nop
      signal DiagX('sel022 When/Otherwise other')  -- here if Otherwise unnested
  end

  -- test conditional OR
  ivc=InvalidClassException null
  select label tor
    when i=6, i=1 then do; signal DiagX('sel024 When/Otherwise 6,1'); end
    when ivc=null, ivc.classname='foo' then leave tor
    otherwise
      signal DiagX('sel025 When/Otherwise ivc')  -- here if bad reach
  end

  -- This one lays a nested if/else trap
  select label tor
    when i=1 then do; signal DiagX('sel010 When/Otherwise 8'); end
    when 1   then if i=2 then nop
    when i=4 then signal DiagX('sel011 When/Otherwise 9')
  end tor

  j=3
  select
    when i=1 then signal DiagX('sel012 When')
    when i=4 then select
       when j=1 then signal DiagX('sel013 Nested when 1')
       when j=3 then ok=ok '! nested Select'
       when j=5 then signal DiagX('sel014 Nested when 2')
       otherwise signal DiagX('sel015 Nested when 3')
      end
    otherwise signal DiagX('sel016 Otherwise')
  end

  /* Now try some CASEs [I is used on a WHEN so not SWITCH candidates] */
  i=1
  select label foo case i                         -- simple var
    when i+1 then signal DiagX('sel100 i=2')
    when 3   then signal DiagX('sel101 bad 3')
    when 0|0 then signal DiagX('sel102 bad precedence/0')
    when 1   then nop
    otherwise signal DiagX('sel103 bad case')
    end
  if i\=1 then signal DiagX('sel104 bad i')

  select label foo case i+3                       -- expression
    when i+1 then signal DiagX('sel110 i=2')
    when 3   then signal DiagX('sel111 bad 3')
    when 0|0 then signal DiagX('sel112 bad precedence/0')
    when 4   then nop
    otherwise signal DiagX('sel113 bad case')
    end foo
  if i\=1 then signal DiagX('sel114 bad i')

  select case Rexx('1')                      -- Rexx Object
    when i+1 then signal DiagX('sel120 i=2')
    when 3   then signal DiagX('sel121 bad 3')
    when 0|0 then signal DiagX('sel122 bad precedence/0')
    when 1   then nop
    otherwise signal DiagX('sel123 bad case')
    end

  select label foo case i+3                       -- commas
    when i+1     then signal DiagX('sel130 i=2')
    when 3,6,8   then signal DiagX('sel131 bad 3')
    when 7,9     then signal DiagX('sel132 bad 3')
    when 0|0 then signal DiagX('sel133 bad precedence/0')
    when 4   then nop
    otherwise signal DiagX('sel134 bad case')
    end foo
  if i\=1 then signal DiagX('sel135 bad i')

  -- now four 'switch' candidates [one for each type]
  -- Check generated code for the first one -- should use switch{}
  i=1
  select label foo case i
    when TWO then signal DiagX('sel130 1=2')
    when 3   then signal DiagX('sel131 bad 3')
    when java.math.BigDecimal.ROUND_DOWN then nop  -- 1
    otherwise signal DiagX('sel133 bad case')
    end
  if i\=1 then signal DiagX('sel134 bad i')

  s=short 1
  select label foo case s
    when 2   then signal DiagX('sel140 1=2')
    when 3   then do; signal DiagX('sel141 bad 3'); end
    when 1   then nop
    otherwise signal DiagX('sel143 bad case')
    end
  if s\=1 then signal DiagX('sel144 bad s')

  b=byte 1
  select label foo case b
    when 2   then signal DiagX('sel150 1=2')
    when 3   then signal DiagX('sel151 bad 3')
    when 1   then nop
    otherwise signal DiagX('sel153 bad case')
    end
  if b\=1 then signal DiagX('sel154 bad b')

  c=char 'a'
  select label foo case c
    when 'b' then signal DiagX('sel160 1=2')
    when 'c' then signal DiagX('sel161 bad 3')
    when 'a' then nop
    otherwise signal DiagX('sel163 bad case')
    end
  if c\='a' then signal DiagX('sel164 bad c')

  -- expression for case
  b=byte 0
  select label foo case b+1
    when 2   then signal DiagX('sel165 1=2')
    when 3   then signal DiagX('sel166 bad 3')
    when 1   then nop
    otherwise signal DiagX('sel167 bad case')
    end
  if b\=0 then signal DiagX('sel168 bad b')

  -- commas
  c=char 'a'
  select label foo case c
    when 'b' then signal DiagX('sel170 1=2')
    when 'c' then signal DiagX('sel171 bad 3')
    when 'a' then nop
    when 'd', 'e' then signal DiagX('sel172 bad 3')
    when 'f', 'g', 'h' then signal DiagX('sel173 bad 3')
    -- try some forms of constant
    when '\0', '\x77', '\u0123' then signal DiagX('sel174 bad 3')
    otherwise signal DiagX('sel175 bad case')
    end
  if c\='a' then signal DiagX('sel176 bad c')

  -- signal before Otherwise and before implied otherwise..
  select label foo case c
    when 'b' then signal DiagX('sel180 1=2')
    when 'c' then signal DiagX('sel181 bad 3')
    otherwise nop
    end
  if c\='a' then signal DiagX('sel184 bad c')
  select label foo case c
    when 'b' then signal DiagX('sel185 1=2')
    when 'a' then nop
    when 'c' then signal DiagX('sel186 bad 3')
    end
  if c\='a' then signal DiagX('sel187 bad c')

  select case File('foo.bar')                -- not well-known
    when File('foo.bar') then signal DiagX('sel130 filecomp')
    otherwise nop
    end

  ok=ok '! Select Case'

  say 'DiagSelect:' ok
  /*--------------------------------------------------------------------*/

 /* Scaffolding for stand-alone test */
 method main(s=String[]) static
  say version '/' source -- say what level we are running under
  do
    DiagSelect()
  catch dx=DiagX
    say 'Failed: "'dx.getMessage'"'
  end
