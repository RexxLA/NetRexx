/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* netrexx.lang.RexxTrace -- Trace object and helper functions        */
/* ------------------------------------------------------------------ */
/* Copyright IBM Corporation, 1996, 2000.  All Rights Reserved.       */
/* Author    Mike Cowlishaw                                           */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 96.07.29 Initial version                                           */
/* 98.05.21 Support Trace VAR [array of active variables]             */
/* 98.05.23 Context switch tracing added                              */
/* 00.05.25 Add reset for command -prompt use                         */
/* 00.08.24 'A' tracetag used to indicate method argument trace       */
package netrexx.lang
options binary strictargs nodecimal nodiag

/**
   This defines trace settings for NetRexx programs.
   A RexxTrace object is passed to RexxTrace helper functions, and
   is manipulated/modified by TRACE instructions.
    */

class RexxTrace final

  /* ----- Properties ----- */
  properties public constant
    /* Tracing levels */
    OFF      = int 0
    VAR      = int 1
    METHODS  = int 2
    ALL      = int 3
    RESULTS  = int 4
    TERMS    = int 5
    OPS      = int 6

  properties private constant
    levelwords=Rexx "off var methods all results"  -- "terms operations"
    nulltrace='[null]'

  properties private
    level=OFF                 -- the current tracing level
    context=boolean 1         -- show context changes
    width=int                 -- width of maximum linenumber in the program
    lastline=int 0            -- last linenumber traced using this object
    programname=String        -- name of program that we belong to
    tracestream=PrintStream   -- the output stream to use
    varnames=String[0]        -- variables currently being traced [may
                              -- be 0 but not null; names in lower case]

  properties private static   -- global context
    lastthread=Thread null    -- last thread to trace
    lastprogramname=String '' -- last program to trace
    threadlock=Object()       -- capability token

  /* ----- Constructors ----- */
  /** Build a default Trace settings context
     Arg1 is number of lines in source program
     Arg2 is the stream to use for output
     Arg3 is the name of the program constructing the tracer
     */
  method RexxTrace(lines=int, stream=PrintStream System.err, name=String '?')
    width=String.valueOf(lines).length()
    tracestream=stream
    programname=name

  /**  Clone a Trace settings context  */
  -- Note the varnames themselves don't have to be copied, as any
  -- modification makes a new array
  method RexxTrace(old=RexxTrace)
    level=old.level
    width=old.width
    lastline=old.lastline
    tracestream=old.tracestream
    programname=old.programname
    varnames=old.varnames
    context=old.context

  /* ----- Utility methods ----- */
  /** Reset the static information [used during prompt loop] */
  method reset static
    lastthread=null
    lastprogramname=''
    return

  /* ----- Value methods ----- */
  /** Return a word for the trace level */
  method levelword returns Rexx
    return levelwords.word(level+1)

  /** Set a new level; OFF resets the 'last line' count */
  method newlevel(new=int)
    level=new
    if level=OFF then lastline=0

  /** Get/Set the Context property */
  method getContext returns boolean; return context
  method setContext(b=boolean); context=b

  /** Add and/or remove names to the array of variables being traced
     Arg1 is array of lowercase names to add to the list
     Arg2 is array of lowercase names to remove from the list
     Either array may be null or empty (or both may be)
     A name may not be in both lists
     Not an error if adds duplicate olds, or removes not found.
     Side-effect: this implies TRACE VAR: OFF is bumped to VAR.
     */
  -- This always makes a new array
  method modnames(addnames=String[], subnames=String[])
    if level=OFF then level=VAR
    if addnames=null then addnames=String[0]
    if subnames=null then subnames=String[0]
    work=Vector(varnames.length+addnames.length)  -- always enough
    -- put the addnames in first, as they are likely to be referenced
    loop a=0 for addnames.length
      work.addElement(addnames[a])
      end a
    -- add the old names if not in either list
    loop v=0 for varnames.length
      name=varnames[v]
      loop a=0 for addnames.length
        if addnames[a]==name then iterate v
        end a
      loop s=0 for subnames.length
        if subnames[s]==name then iterate v
        end s
      work.addElement(name)
      end v
    -- and finally make the new array
    varnames=String[work.size()]
    work.copyInto(varnames)

  /* ---------------------------------------------------------------- */
  /* Tracer methods (actually produce trace output)                   */
  /* ---------------------------------------------------------------- */

  /** traceclause -- Trace a clause
     Arg1 is line number of this clause
     Arg2 is the sourceline segments for this clause, or a single
             clause segment
     Arg3 is the normal trace level for this clause (ALL assumed)
     Arg4 is the list of variables changed (assigned) in this clause
             (lower case names), or null if none.
     The clause is traced if the current level is tracelevel or higher,
     unless the tracelevel is VAR and level is <ALL.  In this case, one
     or more variables are assigned and unless none is in the varnames
     list the clause is traced.
     */
  method traceclause(lineno=int, line=String, tracelevel=ALL,-
                     names=String[] null)
    -- this entrypoint accepts a single string for the lines array
    lines=String[1]
    lines[0]=line
    traceclause(lineno, lines, tracelevel, names)
    return

  method traceclause(lineno=int, lines=String[], tracelevel=ALL,-
                     names=String[] null)
    if level<tracelevel then return     -- just too low
    if tracelevel=VAR then
     if level<ALL then do label mayleave
      if names\=null then loop n=0 for names.length
        name=names[n]
        loop v=0 for varnames.length
          if varnames[v]==name then leave mayleave
          end v
        end n
      return             -- var but we didn't match
      end mayleave

    /* Clause will be traced.  Lock while we do it so context correct */
    do protect threadlock
      if context then showContext()
      if lastline=lineno then prefix=' '.copies(width)
       else do
        prefix=Rexx(lineno).right(width)
        lastline=lineno+lines.length-1
        end
      prefix=prefix '*=*'
      loop i=0 to lines.length-1
        tracestream.println(' 'prefix lines[i])
        prefix=Rexx(lineno+i+1).right(width) '*-*'
        end i
      end

  /** traceresult -- data string trace (Shared by type-dependent methods)
     Arg1 is line number of this clause
     Arg2 is the data (string) to be traced
     Arg3 is the tag character for the trace
     Arg4 is the name (actual case) of the variable this result will be
             assigned to, or '' (not null) if none

     The data are traced if:
      -- the current level is RESULTS or higher, or
      -- the current level is METHODS or higher and the tracetag is the
         method argument indicator, 'm', or
      -- the current level is VAR or higher, and one or more variables
         are assigned and one is in the varnames list

     */
  method traceresult(lineno=int, data=Rexx, tag=char, name=String) private
    if level<RESULTS then do label mayquit
      if level>=METHODS then if tag='m' then leave mayquit
      if level<VAR then return          -- lower than VAR
      -- must be VAR or higher
      lowname=name.toLowerCase()
      loop v=0 for varnames.length
        if varnames[v]==lowname then leave mayquit
        end v
      return                            -- no reason to trace
      end mayquit

    if tag='m' then tag='a'             -- as per NRL

    /* String will be traced.  Lock while we do it so context correct */
    do protect threadlock
      if context then showContext()
      if lastline=lineno then prefix=' '.copies(width)
       else do
        prefix=Rexx(lineno).right(width)
        lastline=lineno
        end
      prefix=prefix '>'tag'>'                -- add tag
      if name\=='' then prefix=prefix name   -- add name (if any)
      /* Sanitize the data */
      if data=null then tracestream.println(' 'prefix nulltrace)
       else do label nonnull
        cdata=char[] data
        loop i=0 to cdata.length-1
          if cdata[i]<' ' then do
            if cdata[i]='\t' then cdata[i]=' '
                             else cdata[i]='?'
            end
          end i
        tracestream.println(' 'prefix '"'cdata'"')
        end nonnull
      end

  /** Produce a separator line if the context has changed */
  -- this should only be called if the capability token is protected
  method showContext()
    thisthread=Thread.currentThread()
    if lastthread==thisthread then
     if lastprogramname==programname then
      return                                 -- context unchanged
    -- build and display separator
    prefix=' '.copies(width) '---'
    tname=thisthread.getName()
    gname=thisthread.getThreadGroup().getName()
    if gname\=='main' then tname=tname','gname
    if tname=='main' then tname=''
                     else tname=' ['tname']'
    tracestream.println(' 'prefix programname||tname)
    lastthread=thisthread                    -- new context
    lastprogramname=programname              -- ..
    lastline=0                               -- force line number

  /* ---------------------------------------------------------------- */
  /* Trace various types of data                                      */
  /* Arguments, etc., as for traceresult.                             */
  /* ---------------------------------------------------------------- */

  /*** Trace a char, and return it  */
  method tracechar(lineno=int, data=char, tag=char, tracelevel=int, name=String)-
      returns char
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a boolean, and return it  */
  method traceboolean(lineno=int, data=boolean, tag=char, tracelevel=int, name=String)-
      returns boolean
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a byte, and return it  */
  method tracebyte(lineno=int, data=byte, tag=char, tracelevel=int, name=String)-
      returns byte
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a short, and return it  */
  method traceshort(lineno=int, data=short, tag=char, tracelevel=int, name=String)-
      returns short
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a int, and return it  */
  method traceint(lineno=int, data=int, tag=char, tracelevel=int, name=String)-
      returns int
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a long, and return it  */
  method tracelong(lineno=int, data=long, tag=char, tracelevel=int, name=String)-
      returns long
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a float, and return it  */
  method tracefloat(lineno=int, data=float, tag=char, tracelevel=int, name=String)-
      returns float
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a double, and return it  */
  method tracedouble(lineno=int, data=double, tag=char, tracelevel=int, name=String)-
      returns double
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, Rexx(data), tag, name)
    return data

  /**  Trace a Rexx string, and return it  */
  method traceRexx(lineno=int, data=Rexx, tag=char, tracelevel=int, name=String)-
      returns Rexx
    if level<tracelevel then return data   -- fastpath
    traceresult(lineno, data, tag, name)
    return data

  /**  Trace a String, and return it  */
  method traceString(lineno=int, data=String, tag=char, tracelevel=int, name=String)-
      returns String
    if level<tracelevel then return data   -- fastpath
    if data=null then tdata=Rexx null
                 else tdata=Rexx(data)
    traceresult(lineno, tdata, tag, name)
    return data

  /**  Trace a char[], and return it  */
  method tracechararray(lineno=int, data=char[], tag=char, tracelevel=int, name=String)-
      returns char[]
    if level<tracelevel then return data   -- fastpath
    if data=null then tdata=Rexx null
                 else tdata=Rexx(data)
    traceresult(lineno, tdata, tag, name)
    return data

  /**  Trace an arbitrary Object, and return it  */
  method traceObject(lineno=int, data=Object, tag=char, tracelevel=int, name=String)-
      returns Object
    if level<tracelevel then return data   -- fastpath
    if data=null then tdata=Rexx null
                 else tdata=Rexx(data.toString())
    traceresult(lineno, tdata, tag, name)
    return data

