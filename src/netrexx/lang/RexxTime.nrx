/*  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.   */
/*  See LICENSE for the licence and information on using, copying, modifying, */
/*  and distributing this program.                                            */
/* The former Rexx2Nrx Run-Time Package (NetRexx Version)                     */
/* of Thomas Schneider, ThSITC, 2011. See www.thsitc.com/Product Rexx2Nrx     */
/* for Details. Note that the method names have been adjusted for Java        */
/* naming conventions since the first Rexx2Nrx release, back in 2001!         */
/* Copyright (c) 2000-2010 Thomas.Schneider@thsitc.com                        */
/* Copyright (c) 2011-oo   RexxLA                                             */

package netrexx.lang

/* RexxTime contains an emulation of the classic REXX date & Time functions   */
/*                                (c) Th. Schneider, Mai 2000                 */

/* 04.09.2007: time('N') returns hh':'mm':'ss  added                          */
/* 01.01.2021: rvj redid all of date, based on Rexx ANSI/ISO/INCITS standard  */
/* 09.01.2021: rvj redid time'E' and time'R'                                  */
/* 15.01.2021: rvj added date('C') following a recipe by Walter Pachl         */

options decimal nobinary nostrictcase
--trace results

-- note: digits 18 absolutely needed
numeric digits 18

class RexxTime public

  properties static
  
  months3=Rexx 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'
  Months=Rexx 'January February March April May June July August'-
         'September October November December'
  WeekDays=Rexx 'Monday Tuesday Wednesday Thursday Friday Saturday Sunday'
  starttime = 0 
  
  method RexxTime()
    
  method time(opt=Rexx ' ') public static returns Rexx
    dts=java.time.LocalDateTime.now()
    ihh=dts.getHour()
    hh=Rexx ihh
    hh=hh.right(2,'0')
    inn=dts.getMinute()
    nn=Rexx inn
    nn=nn.right(2,'0')
    iss=dts.getSecond()
    ss=Rexx iss
    ss=ss.right(2,'0')
    
    opt1=opt.substr(1,1)
    select case opt1
      when 'C' then
	do
	  return timeFormatC(ihh,nn)
	end
      when 'E' then
	do
	  if starttime = 0 then return '0'.format(null,6)
	  stoptime = System.nanoTime()
	  duration=(stoptime-starttime)/1000000000 -- seconds
	  return duration.format(null,6)
	end
      when 'H' then return hh /* returns hour */
      when 'L' then
	do
          uuuuuu=Rexx(dts.getNano())
          return hh':'nn':'ss'.'uuuuuu.left(6)
	end
      when 'M' then
	do
          nnnn=ihh*60+inn   /* minutes past midnight */
          return nnnn
	end
      when 'N' then return hh':'nn':'ss  /* own addition */
      when 'R' then
	do    /* reset timer */
	  if starttime = 0 then
	    do
  	      starttime = System.nanoTime()
	      return 0
	    end
	  else do
	    stoptime = System.nanoTime()
	    duration=(stoptime-starttime)/1000000000 -- seconds\
	    starttime = System.nanoTime()
	    return duration.format(null,6)
	  end
	end
      when 'S' then
	do    /* seconds past midnight */
          ssss=(hh*60+nn)*60+ss
          return ssss
	end
      otherwise return hh':'nn':'ss
    end /* select */


  method timeFormatC(ihh,nn) static
    xx='am'
    if ihh>12 then
      do
	ihh=ihh-12
	xx='pm'
      end

    hh=Rexx ihh
    hh=hh.right(2,'0')
    return hh':'nn||xx


    -- here starts the date part
  method Leap(yeara) static returns Rexx
    if yeara // 400 = 0 then return 1
    if (yeara // 4 = 0) & (yeara // 100 <> 0) then return 1
    return 0

  method Time2Date(microseconds) static
    /* These are checks on the range of the date. */
    if microseconds < 0 then
      return 'Bad'
    if microseconds >= 315537897600000000 then
      return 'Bad'
    return Time2Date2(microseconds)
    
  method Time2Date2(microseconds) static
    /*  Convert a timestamp to a date.
       Argument is a timestamp (the number of microseconds relative to
       0001 01 01 00:00:00.000000)
       Returns a date in the form
       year month day hour minute second microsecond base days     */
    /* Argument is relative to the virtual date 0001 01 01 00:00:00.000000 */
    Time=microseconds
    
    Second = Time   % 1000000    ; Microsecond = Time   // 1000000
    Minute = Second %      60    ; Second      = Second //      60
    Hour   = Minute %      60    ; Minute      = Minute //      60
    Day    = Hour   %      24    ; Hour        = Hour   //      24
    /* At this point, the days are the days since the 0001 base date. */
    BaseDays = Day
    Day = Day + 1
    /* Compute either the fitting year, or some year not too far earlier.
       Compute the number of days left on the first of January of this
       year. */
    Year   = Day % 366
    Day    = Day - (Year*365 + Year%4 - Year%100 + Year%400)
    Year   = Year + 1
    /* Now if the number of days left is larger than the number of days
       in the year we computed, increment the year, and decrement the
       number of days accordingly. */
    loop while Day > (365 + Leap(Year))
      Day = Day - (365 + Leap(Year))
      Year = Year + 1
    end
    /* At this point, the days left pertain to this year. */
    YearDays = Day
    /* Now step through the months, increment the number of the month,
       and decrement the number of days accordingly (taking into
       consideration that in a leap year February has 29 days), until
       further reducing the number of days and incrementing the month
       would lead to a negative number of days */
    Days = Rexx '31 28 31 30 31 30 31 31 30 31 30 31'
    loop Month = 1 to Days.words()
      ThisMonth = Days.word(Month) + (Month = 2) * Leap(Year)
      if Day <= ThisMonth then leave
      Day = Day - ThisMonth
    end
    return Year Month Day Hour Minute Second Microsecond BaseDays YearDays
    
  method Date() static
    return nativeDate()

  method Date(Option) static
    Option=Option.left(1).upper()
    BaseDays = Date('B',nativeDate())
    Micro = BaseDays * 86400 * 1000000
    if Option == 'S' then OutSeparator = ''
    else OutSeparator = Option.translate("xx/x //x","BDEMNOUW")
    return DateFormat(Micro,Option,OutSeparator)
    
  method Date(Option, inDate, InOption="", arg4='', arg5='') static
    Option=Option.left(1).upper()
    /* if Inoption is not set, it will be N */
    if InOption <> '' then
    do
      nop
      InOption = InOption.upper()
    end
    else InOption = 'N'

    /* In September 97 the standardizing committee decided how DATE should
       be extended to generalize the separators used. */
       if Option = 'S' then OutSeparator = Rexx('')
       else OutSeparator = Option.translate("xx/x //x","BDEMNOUW")
       if arg4 <> '' then do
	 /* The text for the following error 40.46 is '<bif> argument <argnumber>,
	    "<value>", is a format incompatible with separator specified in argument
	    <argnumber>'
	  */
	 if OutSeparator = 'x' then return ''
	 OutSeparator = arg4
	 /* The text for the following error 40.45 is '<bif> argument <argnumber>
	    must be a single non-alphanumeric character or the null string; found <value>"'
	  */
	  if OutSeparator.length() > 1 | OutSeparator.datatype(Rexx'A') then return ''
       end
       if InOption = 'S' then InSeparator = ''
       else InSeparator = InOption.translate("xx/ //","BDENOU")
       if arg5 <> '' then do
	 if InSeparator = Rexx('x') then return ''
	 InSeparator = arg5
	 if InSeparator.length() > 1 | InSeparator.datatype(Rexx('A')) then return ''
       end
       
       Value = inDate
       /* First try for Year Month Day */
       Logic = 'NS'
       select
	 when InOption = 'N' then
	   do
	     if InSeparator = '' then
	       do
		 if Value.length() <8 then return ''
		 Year = Value.right(4)
		 MonthIs = Value.right(8).substr(1,3)
		 Day = Value.left(Value.length()-8)
               end
	     else parse Value Day (InSeparator) MonthIs (InSeparator) Year
	     
	     loop Month = 1 to 12
	       if Months.word(Month).left(3) = MonthIs then leave
	     end Month
	   end	  
	 when InOption == 'S' then
	   if InSeparator == '' then parse Value Year +4 Month +2 Day
	   else parse Value Year (InSeparator) Month (InSeparator) Day
	 otherwise Logic = 'EOU' /* or BD */
       end
       /* Next try for year without century */
       if Logic = 'EOU' then
	 Select
	   when InOption == 'E' then
             if InSeparator == '' then parse Value Day +3 Month +3 YY
             else parse Value Day (InSeparator) Month (InSeparator) YY
	   when InOption == 'O' then
             if InSeparator == '' then parse Value YY +3 Month +3 Day
             else parse Value YY (InSeparator) Month (InSeparator) Day
	   when InOption == 'U' then
             if InSeparator == '' then parse Value Month +3 Day +3 YY
             else parse Value Month (InSeparator) Day (InSeparator) YY
	   otherwise Logic = 'BD'
	 end
       if Logic = 'EOU' then do
	 /* The century is assumed, on the basis of the current year. */
	 if YY.dataType('W')=0 then return ''
	 YearNow = Date('S').left(4)
	 Year = YY
	 loop while Year < YearNow-50
	   Year = Year + 100
	 end
       end /* Century assumption -- if Logic */
       
       if Logic <> 'BD' then do
	 /* Convert Month & Day to Days of year. */
	 if Month.dataType('W')=0 | Day.dataType('W')=0 | Year.dataType('W')=0 then return ''
	 Days = '0 31 59 90 120 151 181 212 243 273 304 334'.word(Month) + (Month>2)*Leap(Year) + Day-1
       end
       else
	 if Value.datatype('W')=0 then return ''
	 if InOption = 'D' then do
	   Year = Date('S').left(4)
	   Days = Value - 1 /* 'D' includes current day */
	 end
	 if InOption = 'C' then do
	   Year = nativeDate().right(4).left(1)'000'
	   Days = Value - 1 /* 'C' includes current day */
	 end
	 if InOption = 'J' then do
	     if Value.length() == 5 then
	       do
		 Year=Value.left(2)
		 Days=Value.right(3)-1
		 -- century-window it
		 if Year>75  then Year=Year+1900
		 if Year<=75 then Year=Year+2000
	       end
	     if Value.length() == 7 then
	       do
		 Year=Value.left(4)
		 Days=Value.right(3)-1
	       end
	 end	 
	 /* Convert to BaseDays */
	 if InOption <> 'B' then
	   do
	     BaseDays = (Year-1)*365 + (Year-1)%4 - (Year-1)%100 + (Year-1)%400 + Days
	   end
	 else Basedays = Value
	 /* Convert to microseconds from 0001 */
	 Micro = BaseDays * 86400 * 1000000
	 return DateFormat(Micro,Option,OutSeparator)
	 
  method nativeDate() static
    cal=GregorianCalendar()
    dd=Rexx(cal.get(Calendar.DAY_OF_MONTH))
    mm=cal.get(Calendar.MONTH) + 1
    yyyy=cal.get(Calendar.YEAR)
    return dd.right(2,'0') months3.word(mm) yyyy

  method DateFormat(x, format, delimiter='') static
    /* Convert from microseconds to given format and separator. */
    x = Time2Date(x)
    if x='Bad' then return 'Bad'
    parse x Year Month Day . . . . Base Days
    select
      when format = 'B' then
        return Base
      when format = 'C' then
	do
	  yy=Year
	  y0=yy.left(1)||'000' /* start of century */
	  yp=(yy-y0) /* preceding years */
	  ly=(yp-1)%4 /* number of leap years */
	  if y0//4=0 then ly=ly+1 /* if start of century way a leap year */
	  dca=365*yp+ly+Days
	  return dca
	end
      when format = 'D' then
        return Days
      when format = 'E' then return -
	   Day.right(2,'0')delimiter||Month.right(2,'0')||delimiter||Year.right(2,'0')
      when format = 'I' then do
	if delimiter = 'I' then delimiter = '-'
	return -
	  Year.right(4,'0')||delimiter||Month.right(2,'0')||delimiter||Day.right(2,'0')
      end
      when format = 'J' then return -
	   Year||Days.right(3,0)
      when format = 'M' then return Months.word(Month)
      when format = 'N' then
        return Day Months.word(Month).left(3) Year.right(4,'0')
      when format = 'O' then return -
	   Year.right(2,'0')||delimiter||Month.right(2,'0')||delimiter||Day.right(2,'0')
      when format = 'S' then return -
	   Year.right(4,'0')||delimiter||Month.right(2,'0')||delimiter||Day.right(2,'0')
      when format = 'U' then return -
	   Month.right(2,'0')||delimiter||Day.right(2,'0')||delimiter||Year.right(2,'0')
      when format = 'W' then return Weekdays.word(1+Base//7)
      otherwise
	return 'Unknown Date option'
    end


  method main(args=String[]) static
    numeric digits 18
    say DateFormat(737791*86400*1000000,'B')
    say DateFormat(737791*86400*1000000,'E','/')
    say DateFormat(737791*86400*1000000,'W')
    say DateFormat(737791*86400*1000000,'S')
    say DateFormat(737791*86400*1000000,'U')
    say DateFormat(737791*86400*1000000,'O')
    say DateFormat(737791*86400*1000000,'M')
    say DateFormat(737791*86400*1000000,'N')
    
