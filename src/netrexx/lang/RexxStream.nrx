package netrexx.lang

import java.io

 /*  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.   */   
 /*  See LICENSE for the licence and information on using, copying, modifying, */
 /*  and distributing this program.                                            */
/**
 * Class RexxStream implements a Classic Rexx compatible Streams class with
 * static method as to enable a 'uses RexxStream' clause so the user can
 * use linein, lineout, charin, charout in a Classic Rexx comaptible manner.   
 * <BR>
 * Created on: Thu, 03, Feb 2022 16:40:14 +0100 rvj
 */
class RexxStream

  properties private static
  fileReaderHandles = TreeMap()
  fileWriterHandles = TreeMap()
  bufferedReaderHandles = TreeMap()
  bufferedWriterHandles = TreeMap()


  /**
   * Default constructor
   */
  method RexxStream()
    return this

  /**
   * Method charin without arguments, reads from stdin
   */
  method charin() static
  /**
   * Method charin ...
   * @param opts is a Rexx
   */
  method charin(opts) static
    -- parse opts name ',' start ',' length) static


  /**
   * Method charout without arguments, writes to stdin
   */
  method charout() static
  /**
   * Method charout ...
   * @param opts is a Rexx
   */
  method charout(opts) static
    -- parse opts name ',' start ',' length) static

  /**
   * Method linein without arguments, writes to stdin
   */
  method linein() static
  /**
   * Method linein ...
   * @param opts is a Rexx
   */
  method linein(opts) static
    parse opts name ',' start ',' length
    say 'filename:' name
    fh = fileReaderHandles.get(name.toString())
    if fh = null then openFile(name,'r')
    
  /**
   * Method lineout without arguments, writes to stdin
   */
  method lineout() static
  /**
   * Method lineout ...
   * @param opts is a Rexx
   */
  method lineout(opts) static
    -- parse opts name ',' start ',' length) static
    

  method openFile(name=String, mode) static
    do
      select
	when mode = 'r' then do
	  fr = FileReader(name)
	  fileReaderHandles.put(name,fr)
	  brf = BufferedReader(fr)
	  bufferedReaderHandles.put(name,fr)
	end
	otherwise
	  say '?'
      end -- select
    catch FileNotFoundException
      say 'file not found'
    end
    