package netrexx.lang

import java.io

 /*  Distributed under the ICU 1.8.1 Licence with NO WARRANTIES of ANY kind.   */   
 /*  See LICENSE for the licence and information on using, copying, modifying, */
 /*  and distributing this program.                                            */
/**
 * Class RexxStream implements a Classic Rexx compatible Streams class with
 * static methods as to enable a 'uses RexxStream' clause so we can
 * use linein, lineout, charin, charout in a Classic Rexx compatible manner.   
 * <BR>
 * Created on: Thu, 03, Feb 2022 16:40:14 +0100 rvj
 */
class RexxStream

  properties private static
  fileReaderHandles	= TreeMap()
  fileWriterHandles	= TreeMap()
  bufferedReaderHandles	= TreeMap()
  printWriterHandles	= TreeMap()
  lines			= TreeMap()

  /**
   * Default constructor
   */
  method RexxStream()
    return this

  /**
   * Method charin without arguments, reads from stdin
   */
  method charin() static
  /**
   * Method charin ...
   * @param opts is a Rexx
   */
  method charin(opts) static
    -- parse opts name ',' start ',' length) static


  /**
   * Method charout without arguments, writes to stdin
   */
  method charout() static
  /**
   * Method charout ...
   * @param opts is a Rexx
   */
  method charout(opts) static
    -- parse opts name ',' start ',' length) static

  /**
   * Method lines returns 0 or the lines left in a file
   * @param name is a Rexx
   */
  method lines(name) static
    if lines.get(name) == null then do
      openFile(name,'r')
    end
    return Rexx lines.get(name)
    
  /**
   * Method linein without arguments, returns line from stdin 
   */
  method linein() static
    return ask
    
  /**
   * Method linein ...
   * @param opts is a Rexx
   */
  method linein(opts) static
    parse opts name ',' start ',' length
    fh = fileReaderHandles.get(name.toString())
    if fh = null then openFile(name,'r')
    do
      line = Rexx (BufferedReader bufferedReaderHandles.get(name)).readLine()
      if line = null then lines.put(name, Rexx 0)
      return line
    catch IOException
      say 'ioexception while reading file' name
      return 'ioerror'
    end
  /**
   * Method lineout further arguments, writes to stdout
   */
  method lineout(in_) static
    say in_
    
  /**
   * Method lineout ...
   * @param text is a Rexx
   */
  method lineout(name,text) static
    fh = fileWriterHandles.get(name.toString())
    if fh = null then openFile(name,'w')
    (PrintWriter printWriterHandles.get(name)).println(text)
    /* need to flush every line when we don't really know when to close */
    (PrintWriter printWriterHandles.get(name)).flush()
    

  /**
   * Method openFile opens a file for read or write
   * and adds it to the structures 
   * @param name is a String
   * @param mode is a Rexx
   */
  method openFile(name=String, mode) static
    do
      select
	when mode = 'r' then do
	  fr = FileReader(name)
	  fileReaderHandles.put(name,fr)
	  bfr = BufferedReader(fr)
	  bufferedReaderHandles.put(name,bfr)
	  lines.put(name,Rexx 1)
	end
	when mode = 'w' then do
	  do
	    fw = FileWriter(name)
	    fileWriterHandles.put(name,fw)
	    pw = PrintWriter(fw)
	    printWriterHandles.put(name,pw)
	  catch IOException
	    say 'ioexception while writing file' name
	  end
	end
	otherwise
	  say '?'
      end -- select
    catch FileNotFoundException
      say 'file not found'
    end
    