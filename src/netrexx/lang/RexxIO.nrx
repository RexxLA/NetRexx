/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* netrexx.lang.RexxIO -- I/O utilities for NetRexx                   */
/* ------------------------------------------------------------------ */
/* Copyright IBM Corporation, 1996, 1997.  All Rights Reserved.       */
/* Author    Mike Cowlishaw                                           */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* 1996.04.03 Ask method (read a line)                                */
/* 1996.07.07 Say method (write a line or partial line)               */
/* 1997.02.01 Make I/O streams externally accessible [for IFB]        */
/*          [this may be a security exposure, removed for 1.1]        */
/* 1997.06.28 Upgrade for 1.1 NLS                                     */
/* 1998.08.30 Use PrintWriter for output                              */
/* 2018.02.22 RVJ add method to set outputstream                      */
/* 2018.03.12 RVJ add methods to push and pop outputstreams           */
/* 2018.03.14 RVJ add one liner linehandler                           */
/* 2022.03.21 RVJ say null should not output but just return          */
/* ------------------------------------------------------------------ */
import java.util
package netrexx.lang
options binary strictargs nodecimal noformat

/**
   This defines the I/O utility class for NetRexx.
 */
    
class RexxIO implements Serializable

  /* ----- Constants ----- */
  properties private static
  StdIn	 = BufferedReader(InputStreamReader(System.in))
  StdOut = ConcurrentLinkedDeque()
  --StdOut = LinkedList()
  fileIn = BufferedReader
  
  properties private constant unused
  serialVersionUID=long 2781762092115528702
  
--  method initDeque() constant
--    StdOut.push(PrintWriter(System.out))
    
  /** Function to return a line read from the standard input stream.
     If the stream is closed or otherwise unavailable, null is returned.
   */
  method Ask() static returns Rexx
    do
      line=StdIn.readLine()
      if line=null then return Rexx null
    catch IOException
      return null
    end
    return Rexx(line)

  /** Function to return a line read from the standard input stream without echo.
   *  e.g. for passwords 
     If the stream is closed or otherwise unavailable, null is returned.
   */
  method AskDark() static returns Rexx
    -- do
      line=System.console().readPassword()
      if line=null then return Rexx null
    -- catch IOException
    --   return null
    -- end
    return Rexx(line)
    

  /** Function to return a character read from the standard input stream.
     If the stream is closed or otherwise unavailable, null is returned.
     [This still seems to require that Enter be pressed, in 1.1.1]
   */
  method AskOne() static returns Rexx
    do
      one=char(StdIn.read())
    catch IOException
      return null
    end
    return Rexx(one)
    
  /** Function to write a line to the standard output stream.
     Arg1 is the Object or Rexx string to be written.
     If the line ends in the NUL character ('\-' or '\0') then no
     line termination is provided (and the NUL is deleted).
     If the write succeeds 0 is returned, otherwise 1 is returned.
     
     We handle all the well-known character forms directly to
     minimize code generation in caller; null is allowed for all
     objects.
     We also handle Object here, so null can be processed efficiently.
     We provide versions for all the other primitives, too.
   */
  method Say(obj=Object) static returns boolean
    -- if obj=null then return Say(char[] null)
    if obj==null then return 0
    return Say(obj.toString().toCharArray())
    
  method Say(str=String) static returns boolean
    -- if str=null then return Say(char[] null)
    if str==null then return 0
    return Say(str.toCharArray())
    
  method Say(line=Rexx) static returns boolean
    if line==null then return 0
    --if line='' then Exception().printStackTrace()
    return Say(Rexx.tochararray(line))       -- null passes through
    
  method Say(c=char) static returns boolean
    ca=char[1]; ca[0]=c
    return Say(ca)
    
    -- numeric primitives
  method Say(n=long) static returns boolean  -- handles byte, short, int
    return Say(Long.toString(n).toCharArray())
  method Say(f=float)   static returns boolean; return Say(Rexx(f))
  method Say(d=double)  static returns boolean; return Say(Rexx(d))
  method Say(b=boolean) static returns boolean; return Say(Rexx(b))
    
  method Say(aline=char[]) static returns boolean
    if StdOut.size() == 0 then StdOut.push(PrintWriter(System.out))
    i = StdOut.iterator()
    loop while i.hasNext()
      out=PrintWriter i.next()
      if aline=null then out.println()      -- just new line
      else do                                 -- have some data
	select
          when aline.length=0 then out.println()
          when aline[aline.length-1]\=='\-' then out.println(aline)
          otherwise                            -- rarer continuation case
            bline=char[aline.length-1]
            System.arraycopy(aline, 0, bline, 0, bline.length)
            out.print(bline)
        end
      end
      out.flush()  -- could be a real user out there
    end -- loop while i
    return 0


  /** Function to write a line to the standard output stream, to be used from
     multiple thread, where we don't want to push an output stream to the StdOut deque
     each time. The problem here is that the RexxIO methods are static (always were).
     
     Arg1 is the Object or Rexx string to be written.
     If the line ends in the NUL character ('\-' or '\0') then no
     line termination is provided (and the NUL is deleted).
     If the write succeeds 0 is returned, otherwise 1 is returned.
     
     We handle all the well-known character forms directly to
     minimize code generation in caller; null is allowed for all
     objects.
     We also handle Object here, so null can be processed efficiently.
     We provide versions for all the other primitives, too.
   */
  method pipeSay(obj=Object) static returns boolean
    if obj=null then return pipeSay(char[] null)
    return pipeSay(obj.toString().toCharArray())
    
  method pipeSay(str=String) static returns boolean
    if str=null then return pipeSay(char[] null)
    return pipeSay(str.toCharArray())
    
  method pipeSay(line=Rexx) static returns boolean
    --if line='' then Exception().printStackTrace()
    return pipeSay(Rexx.tochararray(line))       -- null passes through
    
  method pipeSay(c=char) static returns boolean
    ca=char[1]; ca[0]=c
    return pipeSay(ca)
    
    -- numeric primitives
  method pipeSay(n=long) static returns boolean  -- handles byte, short, int
    return pipeSay(Long.toString(n).toCharArray())
  method pipeSay(f=float)   static returns boolean; return pipeSay(Rexx(f))
  method pipeSay(d=double)  static returns boolean; return pipeSay(Rexx(d))
  method pipeSay(b=boolean) static returns boolean; return pipeSay(Rexx(b))
    
  method pipeSay(aline=char[]) static returns boolean
    out=PrintWriter(System.out)
    if aline=null then out.println()        -- just new line
    else do                                 -- have some data
      select
        when aline.length=0 then out.println()
        when aline[aline.length-1]\=='\-' then out.println(aline)
        otherwise                            -- rarer continuation case
          bline=char[aline.length-1]
          System.arraycopy(aline, 0, bline, 0, bline.length)
          out.print(bline)
      end
    end
    out.flush()  -- could be a real user out there
    return 0
    
  method setOutputStream(out=OutputStream) static
    StdOut.clear()
    StdOut.push(PrintWriter(out))
    
  method pushOutputStream(out=OutputStream) static
    StdOut.push(PrintWriter(out))
    
  method popOutputStream() static
    do
      StdOut.pop()
    catch java.util.NoSuchElementException
      StdOut.push(PrintWriter(System.out))
    end
    
  method File(nm) returns RexxIO
    do
      fileIn = BufferedReader(FileReader(nm))
    catch IOException
      return null
    end
    return this
    
  /**
   * Method forEachline implements a way to loop through all lines in a file
   * using one sourceline and a dependent class for this purpose 
   * @param c is a LineHandler
   */
  method forEachline(c=LineHandler)
    do
      loop forever
	line = Rexx fileIn.readLine()
	if line = null then leave
	c.handle(line)
      end
    catch IOException
    end -- do
    
  method forEachline(c=LineHandler,numLines)
    do
      loop i=0 to numLines
	line = Rexx fileIn.readLine()
	if line = null then leave
	c.handle(line)
      end
    catch IOException
    end -- do
    