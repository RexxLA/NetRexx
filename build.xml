<?xml version="1.0" ?>

<project name="NetRexx" basedir="." default="default">

  <!-- <property name="version"      value="3.03"/> -->
  <property name="PACKAGE_NAME" value="NetRexx-3.04RC1.zip"/>
  <property name="examples"     value="../examples"  description="directory location to find the NetRexx examples" />
  
  <property name="build.sysclasspath"                         value="ignore"/>
  <!-- =================================================================== -->
  <!-- NetRexx default settings                                            -->
  <!-- =================================================================== -->
  
  <property name="ant.netrexxc.binary"                         value="yes"/>
  <property name="ant.netrexxc.comments"                       value="true"/>
  <property name="ant.netrexxc.compact"                        value="true"/>
  <property name="ant.netrexxc.crossref"                       value="no"/>
  <property name="ant.netrexxc.format"                         value="false"/>
  <property name="ant.netrexxc.keep"                           value="true"/>
  <property name="ant.netrexxc.keepasjava"                     value="true"/>
  <property name="ant.netrexxc.logo"                           value="true"/>
  <property name="ant.netrexxc.removeKeepExtension"            value="no"/>
  <property name="ant.netrexxc.replace"                        value="yes"/>
  <property name="ant.netrexxc.strictargs"                     value="yes"/>
  <property name="ant.netrexxc.strictcase"                     value="yes"/>
  <property name="ant.netrexxc.strictsignal"                   value="yes"/>
  <property name="ant.netrexxc.suppressDeprecation"            value="true"/>
  <property name="ant.netrexxc.suppressExceptionNotSignalled"  value="false"/>
  <property name="ant.netrexxc.suppressMethodArgumentNotUsed"  value="true"/>
  <property name="ant.netrexxc.suppressPrivatePropertyNotUsed" value="true"/>
  <property name="ant.netrexxc.suppressVariableNotUsed"        value="false"/>
  <property name="ant.netrexxc.verbose"                        value="verbose1"/>
  <property name="ant.netrexxc.console"                        value="false"/>
  <property name="ant.netrexxc.java"                           value="true"/>
  <property name="ant.netrexxc.time"                           value="true"/>
  <property name="ant.netrexxc.source"                         value="1.6"/>
  <property name="ant.netrexxc.target"                         value="1.6"/>
  <!-- <property name="ant.netrexxc.javacompiler"           value="ecj"/> -->
  <!-- <property name="nrx.compiler"                        value="ecj"/> -->


  <!-- =================================================================== -->
  <!-- Project properties                                                  -->
  <!-- =================================================================== -->
  
  <property name="name"          value="NetRexx"/>

  <property name="root"          location="."/>
  <property name="sources"       value="${root}/src"/>
  <property name="build"         value="${root}/build"/>
  <property name="package"       value="${root}/package"/>
  <property name="build.lib"     value="${build}/lib"/>
  <property name="build.classes" value="${build}/classes"/>

  <property name="runtimeDir"    value="netrexx/lang"/>
  <property name="compilerDir"   value="org/netrexx/process"/>
  <property name="eclipseDir"   value="org/eclipse"/>
  <property name="jsr223Dir"     value="org/netrexx/jsr223"/>
  <property name="pipesDir"     value="org/netrexx/njpipes/pipes"/>
  <property name="stagesDir"     value="org/netrexx/njpipes/stages"/>
  <property name="antsrcDir"     value="tools/ant-task"/>
  <property name="anttaskDir"    value="org/apache/tools/ant/taskdefs/optional"/>
  <property name="testsDir"      value="org/netrexx/diag"/>

  <property name="oldAPI" value="COM/ibm/netrexx/process"/>  
  <property name="oldAPINAME" value="COM.ibm.netrexx.process"/>  
  <property name="RUNTIME" value="${build.classes}/netrexx/lang/" description="Runtime directory"/>
  <property name="RUNTIMENAME" value="netrexx.lang" description="Runtime prefix"/>
  <property name="COMPILER" value="${build.classes}/org/netrexx/process/" />
  <property name="COMPILERNAME" value="org.netrexx.process"/> 
  <property name="DIAG" value="${build.classes}/org/netrexx/diag/"/>
  <property name="DIAGNAME" value="org.netrexx.diag"/>  
  
  <property name="DOCPATH"       value="${build}/javadocs"/>
  <property name="DOCTITLE"      value="NetRexx documentation:"/>
	
  <property name="WINDOWTITLE"   value="NetRexx Javadocs"/>
  <property name="HEADER"        value="NetRexx class documentation"/>
  <property name="BOTTOM"        value="Provided by RexxLA - The Rexx Language Association"/>
  <property name="build.sysclasspath"  value="ignore"/>

  <!-- =================================================================== -->
  <!-- Preparation / creating build directories                            -->
  <!-- =================================================================== -->

  <target name="prepare">
    <mkdir dir="${build}"/>
    <mkdir dir="${build.lib}"/>
    <mkdir dir="${build.classes}"/>

    <!-- Common Classpath -->
    <path id="common.class.path">
      <fileset dir="${java.home}/lib">
        <include name="tools.jar"/>
      </fileset>
      <fileset dir="${java.home}/../lib" erroronmissingdir="false">
	<include name="tools.jar"/>
      </fileset>
      <fileset dir="${java.home}/.." erroronmissingdir="false">
	<include name="jdk*/lib/tools.jar"/>
      </fileset>      
      <fileset dir="${java.home}/bundle/Classes" erroronmissingdir="false">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${root}/ant">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    
    <!-- Build Classpath has build.classes prepended, all libs included -->
    <path id="build.class.path">
      <path refid="common.class.path"/>
      <pathelement path="${build.classes}"/>
      <fileset dir="${root}/lib">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <pathconvert property="build.classpath" refid="build.class.path"/>
    
    <!-- Test Classpath now uses the fresh NetRexxC.jar being built -->
    <path id="test.class.path">
      <path refid="common.class.path"/>
      <pathelement path="${build.lib}${file.separator}NetRexxC.jar"/>
      <pathelement path="${build.classes}"/>
      <fileset dir="${root}/lib">
        <include name="**/*.jar"/>
        <exclude name="NetRexxC.jar"/>
      </fileset>
    </path>
    <pathconvert property="test.classpath" refid="test.class.path"/>
    
    <!-- two netrexx compilers, one for building, later the built one for testing -->
    <taskdef name="buildnrc" classname="org.apache.tools.ant.taskdefs.optional.NetRexx" classpath="${build.classpath}"/>
    
    
  </target>
  
  <target name="post.jar.prepare" depends="prepare" description="post jar build - define new NetRexx compiler">  
    <taskdef name="testnrc"  classname="org.apache.tools.ant.taskdefs.optional.NetRexx" classpath="${test.classpath}"/>
  </target>

  <target name="compile.runtime" depends="prepare" description="compile runtime">
    
    <pathconvert pathsep="${line.separator}|   |-- "
		 property="echo.path.compile"
		 refid="build.class.path">
    </pathconvert>
    
    <echo message="|   |"/>
    <echo message="|-- compile classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.compile}"/>
    <echo message="|   |"/>
    
    <buildnrc srcDir="${sources}/${runtimeDir}" destDir="${build.classes}/${runtimeDir}" classpath="${build.classpath}"
      includes="*.nrx" excludes="RexxDictionary.nrx"  java="yes" compile="no"  />
      
    <javac srcdir="${build.classes}/${runtimeDir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter"  line="-nowarn" />
    	</javac>
      
  </target>
  
  <target name="clean.runtime"  description="delete built runtime files">
    <delete dir="${build.classes}/netrexx/lang"/>
  </target>
  
  <target name="compile.process" depends="compile.runtime" description="compile translator">
    <!-- There's an outstanding issue with the compiler regarding the order of the files given and the dependency
         resolution. The best way to fix that is to break the build into smaller chunks and avoiding circular
         dependencies. As the latter will be fixed in the future, I hope, this two-step compile get's things up
         and running for the moment.
    -->
    <buildnrc srcDir="${sources}/${compilerDir}" destDir="${build.classes}/${compilerDir}" classpath="${build.classpath}"
	      includes="NrVersion.nrx RxChunk.nrx RxConvert.nrx  RxProcessor.nrx RxSource.nrx RxToken.nrx
			RxSignalPend.nrx RxType.nrx RxMessageOutput.nrx RxMessage.nrx"  java="yes" compile="no"  />
      
    <javac srcdir="${build.classes}/${compilerDir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter"  line="-nowarn" />
    	</javac>    	
    	
    <buildnrc srcDir="${sources}/${compilerDir}" destDir="${build.classes}/${compilerDir}" classpath="${build.classpath}"
	      includes="*.nrx" excludes="NetRexxS.nrx,NetRexxInterpreter.nrx,Nrx.nrx"  java="yes" compile="no"  />
      
    <javac srcdir="${build.classes}/${compilerDir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-nowarn" />
    	</javac>    	
	      
    <buildnrc srcDir="${sources}/${jsr223Dir}" destDir="${build.classes}/${jsr223Dir}" classpath="${build.classpath}"
	      includes="*.nrx"  java="yes" compile="no"  />
      
    <javac srcdir="${build.classes}/${jsr223Dir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter"  line="-nowarn" />
    	</javac>    	
	      
    <buildnrc srcDir="${sources}/${oldAPI}" destDir="${build.classes}/${oldAPI}" classpath="${build.classpath}"
	      includes="*.nrx"   java="yes" compile="no"  />   
      
    <javac srcdir="${build.classes}/${oldAPI}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter"  line="-nowarn" />
    	</javac>    	
	      
    <buildnrc srcDir="${antsrcDir}" destDir="${build.classes}/${anttaskDir}" classpath="${build.classpath}"
    	      includes="*.nrx" excludes="Nrxc.nrx"   java="yes" compile="no"  />   
      
    <javac srcdir="${build.classes}/${anttaskDir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-nowarn" />
    	</javac>    	

    <buildnrc srcDir="${sources}/${pipesDir}" destDir="${build.classes}/${pipesDir}" classpath="${build.classpath}"
	      includes="link.nrx pnode.nrx pipe.nrx _stage.nrx
			stage.nrx StageError.nrx utils.nrx DString.nrx
			IRange.nrx RingBuf.nrx RunnablePool.nrx ThreadPool.nrx ThreadQ.nrx"  java="yes" compile="no"  />

    <javac srcdir="${build.classes}/${pipesDir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter"  line="-nowarn" />
    	</javac>    	

    <buildnrc srcDir="${sources}/${stagesDir}" destDir="${build.classes}/${stagesDir}" classpath="${build.classpath}"
	      includes="*.nrx"  java="yes" compile="no"  />

    <javac srcdir="${build.classes}/${stagesDir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter"  line="-nowarn" />
    	</javac>    	

    <buildnrc srcDir="${sources}/${pipesDir}" destDir="${build.classes}/${pipesDir}" classpath="${build.classpath}"
	      includes="compiler.nrx filterNjp.nrx pipe2nrx.nrx processNjp.nrx readconfig.nrx readgroup.nrx writepipe.nrx"  java="yes" compile="no"  />

    <javac srcdir="${build.classes}/${pipesDir}" destdir="${build.classes}"  listfiles="yes"
    	classpath="${build.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter"  line="-nowarn" />
    	</javac>    	

    	      
    <copy file="${sources}/${compilerDir}/NetRexxC.properties" todir="${build.classes}/${compilerDir}"/>
    
  </target>
  
  <target name="clean.process"  description="delete built translator files">
    <delete dir="${build.classes}/${compilerDir}"/>
    <delete dir="${build.classes}/${oldAPI}"/>
  </target>
  
  <target name="compile" depends="compile.process" description="compile all (except tests)"/>
  
  
  <target name="compile.tests" depends="compile, jars,post.jar.prepare" description="compile tests">
    
    <pathconvert pathsep="${line.separator}|   |-- "
		 property="echo.path.test"
		 refid="test.class.path">
    </pathconvert>
    
    <echo message="|   |"/>
    <echo message="|-- test classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.test}"/>
    <echo message="|   |"/>
    
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no"
	     includes="DiagX.nrx"  java="yes" compile="no" />
      
    <javac srcdir="${build.classes}/${testsDir}" destdir="${build.classes}"  listfiles="yes"
    	 includes="DiagX.java"
    	classpath="${test.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-nowarn" />
    	</javac>    
    	
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no"
	     includes="*.nrx" excludes="DiagUTF8.nrx DiagAll.nrx"  java="yes" compile="no" />
      
    <javac srcdir="${build.classes}/${testsDir}" destdir="${build.classes}"  listfiles="yes"
    	includes="*.java" excludes="DiagUTF8.java DiagAll.java" 
    	classpath="${test.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-nowarn" />
    	</javac>    
	     
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no" utf8="true"
	     includes="DiagUTF8.nrx"  java="yes" compile="no" />
      
    <javac srcdir="${build.classes}/${testsDir}" destdir="${build.classes}"  listfiles="yes"
    	includes="DiagUTF8.java"
    	classpath="${test.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-nowarn" />
    	</javac>    
	     
    <testnrc srcDir="${sources}/${testsDir}" destDir="${build.classes}/${testsDir}" classpath="${test.classpath}" strictcase="no" strictargs="no" strictsignal="no"
	     includes="DiagAll.nrx"  java="yes" compile="no" />
	           
    <javac srcdir="${build.classes}/${testsDir}" destdir="${build.classes}"  listfiles="yes"
     	includes="DiagAll.java"
    	classpath="${test.classpath}" source="${ant.netrexxc.source}" target="${ant.netrexxc.target}" >
    	<compilerarg compiler="org.eclipse.jdt.core.JDTCompilerAdapter" line="-nowarn" />
    	</javac>    

  </target>
  
  <target name="-checkRunTestsRequired" depends="compile.tests">
    <uptodate property="noRunTestsRequired" targetfile="${build.classes}/${testsDir}/lastTestRun.ts">
      <srcfiles dir="${sources}/${runtimeDir}" includes="**/*"/>
      <srcfiles dir="${sources}/${compilerDir}" includes="**/*"/>
      <srcfiles dir="${sources}/${testsDir}" includes="**/*"/>
    </uptodate>
  </target>
  
  <target name="run.tests" depends="-checkRunTestsRequired" unless="noRunTestsRequired">
    <java classname="org.netrexx.diag.DiagAll" classpath="${test.classpath}" failonerror="true"/>
    <touch file="${build.classes}/${testsDir}/lastTestRun.ts"/>
  </target>
  
  <target name="clean.tests"  description="delete test files">
    <delete dir="${build.classes}/${testsDir}"/>
  </target>
  
  <target name="tests" depends="run.tests" description="compile and run tests"/>
  
  <target name="jars" depends="init,compile" description="create jars">
  
    <jar jarfile="${build.lib}/NetRexxR.jar" compress="yes" filesonly="true">
      <fileset dir="${build.classes}">
        <include name="${runtimeDir}/*.class"/>
      </fileset>
      <fileset dir="${root}">
        <include name="LICENSE"/>
      </fileset>
      <manifest>
	<attribute name="Implementation-Vendor" value="Rexx Language Association"/>
	<attribute name="Implementation-Title" value="NetRexx Runtime Library"/>
	<attribute name="Implementation-Version" value="${ant.project.name} ${version}, ${build.id.string}"/>
	<attribute name="Implementation-Build" value="${build.id.string}"/>
      </manifest>
    </jar>
    
    <jar jarfile="${build.lib}/NetRexxC.jar" compress="yes" filesonly="true" manifest="${sources}/manifest">
      <fileset dir="${build.classes}">
        <include name="${runtimeDir}/*.class"/>
        <include name="${compilerDir}/*.class"/>
        <include name="${jsr223Dir}/*.class"/>
        <include name="${oldAPI}/*.class"/>
        <include name="${compilerDir}/*.properties"/>
      </fileset>
      <fileset dir="${root}">
        <include name="LICENSE"/>
      </fileset>
      <fileset dir="${root}">
        <include name="META-INF/"/>
      </fileset>
      
      <manifest>
	<attribute name="Implementation-Vendor" value="Rexx Language Association"/>
	<attribute name="Implementation-Title" value="NetRexx Translator"/>
	<attribute name="Implementation-Version" value="${ant.project.name} ${version}, ${build.id.string}"/>
	<attribute name="Implementation-Build" value="${build.id.string}"/>
	<attribute name="Main-Class" value="org.netrexx.process.NetRexxC"/>
      </manifest>
    </jar>
    
    <jar jarfile="${build.lib}/ant-netrexx.jar" compress="yes" filesonly="true">
      <fileset dir="${build.classes}">
        <include name="${anttaskDir}/*.class"/>
      </fileset>
      <fileset dir="${root}">
        <include name="LICENSE"/>
      </fileset>
      <manifest>
	<attribute name="Implementation-Vendor" value="Rexx Language Association"/>
	<attribute name="Implementation-Title" value="NetRexx Ant Task"/>
	<attribute name="Implementation-Version" value="${ant.project.name} ${version}, ${build.id.string}"/>
	<attribute name="Implementation-Build" value="${build.id.string}"/>
      </manifest>
    </jar>    
    
	<unzip dest="${build.classes}">
		 <fileset dir="ant">
			<include name="ecj*.jar"/>
		</fileset>
	</unzip>    
 
    <jar jarfile="${build.lib}/NetRexxF.jar" compress="yes" filesonly="true" manifest="${sources}/manifest">
      <fileset dir="${build.classes}">
        <include name="${runtimeDir}/*.class"/>
        <include name="${compilerDir}/*.class"/>
        <include name="${jsr223Dir}/*.class"/>
        <include name="${pipesDir}/*.class"/>
        <include name="${stagesDir}/*.class"/>
        <include name="${oldAPI}/*.class"/>
        <include name="${compilerDir}/*.properties"/>
        <include name="${eclipseDir}/"/>
         <include name="META-INF/"/>
         <include name="about.html"/>
      </fileset>
      <fileset dir="${root}">
        <include name="LICENSE"/>
        <include name="minimalmanifest"/>
      </fileset>
      <fileset dir="${root}">
        <include name="META-INF/"/>
      </fileset>
      
      <manifest>
	<attribute name="Implementation-Vendor" value="Rexx Language Association"/>
	<attribute name="Implementation-Title" value="NetRexx with Eclipse compiler"/>
	<attribute name="Implementation-Version" value="${ant.project.name} ${version}, ${build.id.string}"/>
	<attribute name="Implementation-Build" value="${build.id.string}"/>
	<attribute name="Main-Class" value="org.netrexx.process.NetRexxC"/>
      </manifest>
    </jar>
    
  </target>
  
  <target name="clean.jar" description="delete built jars">
    <delete dir="${build.lib}"/>
  </target>
  
  <target name="apidocs" depends="compile" description="create API documentation">
		 <javadoc source="1.4" maxmemory="128M" private="true" Author="true" Version="true" breakiterator="yes" Use="true" destdir="${DOCPATH}"
		 		bottom="${BOTTOM}" Header="${HEADER}"  Windowtitle="${WINDOWTITLE}" sourcepath="${build.classes}" packagenames="${COMPILERNAME},${RUNTIMENAME},${oldAPINAME}" 
		 		classpath=".${path.separator}${RUNTIME}${path.separator}${COMPILER}${path.separator}${build.classpath}"  Verbose="false"
		 		>
			 <doctitle>${DOCTITLE} ${RUNTIMENAME} ${COMPILERNAME}</doctitle>
		 </javadoc>
  </target>
  
  <target name="clean" depends="clean.runtime, clean.process, clean.tests, clean.jar,clean.javadocs" description="delete all built files">
    <delete dir="${build}"/>
  </target>  
  
  <target name="withjavadocs" depends="init,compile, jars, tests, apidocs" description="build distribution and javadocs with test"/>

  <target name="setecj"  description="set compiler to ecj">
  	<property name="ant.netrexxc.javacompiler" value="ecj"/>
  	<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
  </target>  

  <target name="setjavac"  description="set compiler to javac">
  	<property name="ant.netrexxc.javacompiler" value="javac"/>
  </target>    
  
  <target name="default" depends="withecj" description="build and test distribution"/>

  <target name="withecj" depends="setecj,compile, jars, tests" description="build and test distribution with ecj"/>
  
  <target name="withjavac" depends="setjavac,compile, jars, tests" description="build and test distribution with javac"/>

  <target name="package" depends="" description="build distribution package">
    <delete dir="${package}"/>
	<mkdir  dir="${package}${file.separator}bin"/>
	<copy todir="${package}${file.separator}bin">
		<fileset dir="bin"/>
	</copy>
	<mkdir  dir="${package}/lib"/>
	<mkdir  dir="${package}/runlib"/>
	<mkdir  dir="${package}/examples"/>
	<mkdir  dir="${package}/documents"/>
	<copy file="build/lib/NetRexxC.jar" todir="${package}/lib"/>
	<copy file="build/lib/NetRexxF.jar" todir="${package}/lib"/>
	<copy file="build/lib/NetRexxR.jar" todir="${package}/runlib"/>
	<copy todir="${package}/lib">
		<fileset dir="ant" includes="ecj*.jar"/>
	  </copy>
	<copy todir="${package}/documents">
		<fileset dir="documentation/ug" includes="*.pdf"/>
		<fileset dir="documentation/pg" includes="*.pdf"/>
		<fileset dir="documentation/nrl" includes="*.pdf" excludes="nrl3.02.pdf" />
	 </copy>
	<copy file="documentation/ug/releasenotes.txt" todir="${package}"/>
	<copy file="documentation/ug/readme.txt" todir="${package}"/>
	<copy file="documentation/ug/read.me.first" todir="${package}"/>
	<copy file="LICENSE" todir="${package}"/>
	<mkdir  dir="${package}/tools"/>
	<mkdir  dir="${package}/tools/emacs"/>
	<mkdir  dir="${package}/tools/ant-task"/>
	<copy file="lib/ant-netrexx.jar" todir="${package}/tools/ant-task"/>
	<copy file="tools/emacs-mode/netrexx-mode.el" todir="${package}/tools/emacs"/>
	<copy todir="${package}/examples">
		<fileset dir="${examples}" />
	 </copy>
   <jar jarfile="${PACKAGE_NAME}" compress="yes" filesonly="true">
      <fileset dir="${package}"/>
			 <manifest>
			  <attribute name="Implementation-Vendor" value="Rexx Language Association"/>
			  <attribute name="Implementation-Title" value="NetRexx"/>
			  <attribute name="Implementation-Version" value="${ant.project.name} ${version}, ${build.id.string}"/>
			  <attribute name="Implementation-Build" value="${build.id.string}"/>
			</manifest>
    </jar>	
  </target>
	
  <target name="clean.javadocs" description="delete built javadocs">
    <delete dir="${DOCPATH}"/>
  </target>
  
  <target name="init"  description="Set build number and document version level">
    <tstamp/>
    <propertyfile file="build.number" 	comment="Build Number for ANT. Do not edit!">
      <entry  key="build.number" type="int" default="0" operation="+" value="1" />
    </propertyfile>
    <loadproperties srcFile="${sources}${file.separator}${compilerDir}${file.separator}NrVersion.nrx">
      <filterchain>
        <linecontains>
          <contains value="version ="/>
        </linecontains>
      </filterchain>
    </loadproperties>
    <property file="build.number"/>
    <property name="build.id.string"
	      value="build ${build.number}-${DSTAMP}-${TSTAMP}"/>
    <echo level="info" message="Starting build for ${build.id.string}"/>
  </target>
  
  <target name="showprops" depends="prepare" description="Displays default property settings">
    
    <echoproperties />
    
    <!-- get the source compile classpath in a printable form -->
    
    <pathconvert pathsep="${line.separator}|   |-- "
		 property="echo.path.compile"
		 refid="build.class.path">
    </pathconvert>
    
    <echo message="|   |"/>
    <echo message="|-- compile classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.compile}"/>
    
    <pathconvert pathsep="${line.separator}|   |-- "
		 property="echo.path.test"
		 refid="test.class.path">
    </pathconvert>
    
    <echo message="|   |"/>
    <echo message="|-- test classpath"/>
    <echo message="|   |"/>
    <echo message="|   |-- ${echo.path.test}"/>
    
  </target>    
  
</project>
