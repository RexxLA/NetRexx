import junit.framework.

class CollectionSupport extends TestCase

  properties private
  t = TreeSet()
  u = TreeSet()
  a = ArrayList()
  m = TreeMap()
  
  aap = Rexx 'aap'
  noot = Rexx 'noot'
  mies = Rexx 'mies'
  teun = Rexx 'teun'
  vuur = Rexx 'vuur'
  gijs = Rexx 'gijs'
  

  method testTreeMap()
    m.put('aap','teun')
    m.put('noot','vuur')
    m.put('mies','gijs')
    AssertEquals('teun',m.get(aap).toString())
    AssertEquals('vuur',m.get(noot).toString())

  method testTreeMapComparable()
    m.put(aap,teun)
    m.put(noot,vuur)
    m.put(mies,gijs)
    AssertEquals('{aap=teun, mies=gijs, noot=vuur}',m.toString())
    
  method testArrayList()
    -- arraylist
    a.add(aap)
    a.add(noot)
    a.add(mies)
    
    a.add('aap')
--    Collections.sort(a)
--    AssertEquals('[aap, aap, mies, noot]',a.toString())

    
  method testTreeSet()
    u.add(aap)
    u.add(noot)
    u.add(mies)
    -- u.add('aap') -- still fails: funny because casting Rexx to String should be easy  
    

    number1 = Rexx 1
    number2 = Rexx 2
    number3 = Rexx 3
    number4 = Rexx 4
    
    u.add(number1)
    u.add(number2)
    u.add(number4)
    u.add(number3)
    AssertEquals('[1, 2, 3, 4, aap, mies, noot]',u.toString())

    t.add('aap')
    t.add('noot')
    t.add('mies')
    AssertEquals('[aap, mies, noot]',t.toString())

--   method testTrexxTest()
    
--     /*  Program TRexxTest.nrx -- demonstration of proposed new Rexx constructor  --  Rexx(String[],String[])
--        if passed two string arrays of the same length, convert them to an indexed Rexx variable
--        This also creates a Java Map under the proposed collections support in the advanced experimental after3.01 NetRexx branch
--        (Note that this example will not run with NetRexx 3.01 as it uses the experimental collections support mentioned above)
--      */
--     --    define test string arrays
--     ts1=String "one two three four five"
--     ts1array=ts1.split(" ")
--     ts2=String "a b c d e"
--     ts2array=ts2.split(" ")
    
--     say "part 1 - a basic map from two string arrays"
--     say ""
    
--     --    define and display an indexed Rexx variable/map
--     tri=TRexx(ts1array,ts2array)
--     loop y over tri
--       say y "==>" tri[y]
--     end
--     AssertEquals('a',tri['one'].toString())
--     AssertEquals('b',tri['two'].toString())
--     AssertEquals('c',tri['three'].toString())
--     AssertEquals('d',tri['four'].toString())
--     AssertEquals('e',tri['five'].toString())
    
--     say ""
--     say "part 2 - advanced features=default values and an ordered index"
--     say ""
    
--     --    now demonstrate creating a numerically ordered map index with a default value
--     --  then dump both maps together and show what is beyond the map boundary
--     tri2=TRexx(null,ts1array,"empty")
--     loop x=1 to tri2.size+1
--       say x "==>" tri2[x] "==>" tri[tri2[x].toString]
--     end
--     AssertEquals('one',tri2[1].toString())
--     AssertEquals('a',tri[tri2[1]].toString())
--     AssertEquals('two',tri2[2].toString())
--     AssertEquals('b',tri[tri2[2]].toString())
--     AssertEquals('three',tri2[3].toString())
--     AssertEquals('c',tri[tri2[3]].toString())
--     AssertEquals('four',tri2[4].toString())
--     AssertEquals('d',tri[tri2[4]].toString())
--     AssertEquals('five',tri2[5].toString())
--     AssertEquals('e',tri[tri2[5]].toString())
--     AssertEquals('empty',tri2[6].toString())
--     AssertEquals('',tri[tri2[6]].toString())

    
--     say ""
--     say "part 3 - advanced features=reverse one-based map"
--     say ""
    
--     --    now demonstrate creating a reverse map of values to Rexx type (one-based) numeric indexes
--     tri3=TRexx(ts1array,null,"empty")
--     loop x over tri3
--       say x "==>" tri3[x] "==>" tri[tri2[tri3[x]].toString]
--     end
--     AssertEquals('1',tri3['one'].toString())
--     AssertEquals('a',tri[tri2[tri3['one']]].toString)
--     AssertEquals('2',tri3['two'].toString())
--     AssertEquals('b',tri[tri2[tri3['two']]].toString)
--     AssertEquals('3',tri3['three'].toString())
--     AssertEquals('c',tri[tri2[tri3['three']]].toString)
--     AssertEquals('4',tri3['four'].toString())
--     AssertEquals('d',tri[tri2[tri3['four']]].toString)
--     AssertEquals('5',tri3['five'].toString())
--     AssertEquals('e',tri[tri2[tri3['five']]].toString)
    
--     -- Here is a Class to demonstrate the new Rexx constructor definition
--     --        (note that the no-default constructor method is not needed in Rexx.nrx itself, likewise the toString above would not be needed with a base Rexx class version)
-- class TRexx extends Rexx
  
--   method TRexx(s1=String[],s2=String[]) returns TRexx
--     this(s1,s2,"")
    
--   method TRexx(s1=String[],s2=String[],defaultvalue=Rexx) returns TRexx
--     super(defaultvalue.toString)
--     if s1\=null then
--       if s2\=null then
--         if s1.length\=s2.length then signal BadArgumentException
-- 	if s1=null then
--           if s2=null then arraylen=0
--           else arraylen=s2.length
--        else arraylen=s1.length
--        loop i=0 for arraylen
--          if s1=null then this.put(i+1,s2[i])
--          else if s2=null then this.put(s1[i],i+1)
--          else this.put(s1[i],s2[i])
--        end
    