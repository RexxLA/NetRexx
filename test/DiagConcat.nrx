/* IBM Materials Licensed under International Components for Unicode  */
/* Licence version 1.8.1 (ICU Licence) - Property of IBM              */
/* IBM NetRexx                                                        */
/* Copyright (c) 1995-2009 IBM Corp.                                  */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 1997.  All Rights Reserved.    */
/* ------------------------------------------------------------------ */
/* DiagConcat                                                         */
/*                                                                    */
/*   An object that tests concatenation                               */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.06.23 Initial                                                 */
/* 2012.11.22 recast as junit test                                    */
/* ------------------------------------------------------------------ */
import junit.framework.
options binary

class DiagConcat extends TestCase

 /* Construct a set of tests; raise DiagX exception if error */
 method testDiagConcat
   ok = boolean
  /*-- C O N C A T E N A T I O N ---------------------------------------*/
   if 5  1 =='5 1' then ok = 1
   else ok = 0
   AssertTrue(ok)
  
  if 6||2 =='62'-
   & 'xxx'||'2' =='xxx2' then ok = 1
  else ok = 0
  AssertTrue(ok)

   -- abuttal
  if 'X'123.4'y' =='X123.4y'-
   & 'x'Minx()'Y'=='xRiceY'
                  then ok= 1
  else ok=0
  AssertTrue(ok)

  -- compound Concat>
  if 'X'123.4/10'y' =='X12.34y' then ok=1
  else ok=0

  /* And here's a tricky one that failed before 0.80, with options binary */
  -- n=char '\n'
  --signal DiagX('<char-char Concat>')
  crlf=Rexx 'xx'
  crlf='\n'||'\n'
  if crlf='20' then ok=0
  else ok=1
  AssertTrue(ok)
  
  /*--------------------------------------------------------------------*/
  return

 method minx returns rexx     -- a little case testing, too
  return 'Rice'

