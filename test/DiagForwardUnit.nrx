/* ------------------------------------------------------------------ */
/* NetRexx language processor diagnostics                         mfc */
/* Copyright (c) IBM Corporation 1996, 2000.  All Rights Reserved.    */
/* Copyright (c) 2011- RexxLA                                         */
/* ------------------------------------------------------------------ */
/* DiagForward                                                        */
/*                                                                    */
/*   An object that tests forward references.                         */
/*                                                                    */
/* ------------------------------------------------------------------ */
/* Change list (see RxLanguage for master change list)                */
/* 1996.08.13 Initial                                                 */
/* 1996.11.06 Properties and method interactions [compile-time tests] */
/* 1997.06.11 Property and method with same name                      */
/* 2000.03.10 Property and method call on subclass instance           */
/* 2012.11.23 recast as junit test                                    */
/* ------------------------------------------------------------------ */
import junit.framework.

import java.lang.String
import java.lang.Object
options binary

-- Forward reference, and extends and implements package-private classes
-- Access to external (compiled) private interface is tricky for interpreter
class DiagForwardUnit public extends DiagForward3Unit implements DiagInterfaceUnit

  foo=DiagForward2Unit

 properties static
  varstat=int 3
  wow=methstat()
  uxl=java.util.regex.Pattern.UNIX_LINES

 properties public
  joe=int 13+1
  bar=methfoo()
  joe2=int 13+1+(7+2)+joe
  tent=methfoo('12', '3456')            -- void on pass1
  iob=java.awt.image.ImageObserver      -- check compiler resolution
  ioc=ImageObserver

 /* Construct a set of tests; raise DiagX exception if error */
 method testDiagForwardUnit signals DiagForward4Unit
  ok='OK'
  myinit=this.bar        -- this also ensures registered
  foo=DiagForward2Unit()
  if foo.bar=1-
   & wow=21-
   & uxl=1-
   & myinit=='methfoo 15 0'-
   & tent  =='methfoo 12 3456'-
   & foo.green=='envy'-
   & foo.getGreen=='envy'-
   & DiagForward3Unit.green=='envy'-
     & DiagForward3Unit.green()==303
   then ok='OK'
  else ok='notok'
  AssertEquals('OK',ok)
  
  --   then ok=ok '!' 'Forward'
  --   else signal DiagX('Forward')
  -- say 'DiagForward:' ok
  if 0 then signal DiagForward4Unit

 -- In this next, JOE will have had 14, JOE2 will still be 0
 method methfoo(x=joe+1, y=joe2) returns Rexx
  return 'methfoo' x y

 method methstat static returns int
  return 7*varstat

 method musthave(j=int 7)
  say j multiarg(6)       -- [note optional argument adds complexity]

 -- This one tests array override check
 -- [IFB piggie 1999/07]
 method retarray returns Object[]
  oa=Object[3]
  return oa

 method multiarg(a, b=a+2) static -- test code generation and opt->req
  return a+b

class DiagForward2Unit extends DiagForward3Unit  -- class forward reference

  foo=DiagForwardUnit
  bar=int 0
  along=long 0

  method DiagForward2Unit
    bar=letterspage()-100
    along=longy()                  -- test for long return

  method letterspage returns int
    return 101

  method longy returns long
    return 123456789


class DiagForward3Unit extends TestCase
  properties constant
    green=String 'envy'
  -- NB constructor is synthetic
  method letterspage returns int
    return 202
  method green returns int static
    return 303
  method getGreen returns String
    return green

/* Create a forward reference where the superclass matters */
class DiagForward4Unit extends Exception
  method DiagForward4Unit
   return


